{"pageProps":{"bookInfo":{"id":"c2b386cfad89df6c7fa7e540b1cf5192","name":"WPF教程","fullPath":"F:\\passerby\\csharp\\WPF教程","chapterList":[{"id":"c2b386cfad89df6c7fa7e540b1cf5192_ef577b720dacf53df3ae49bb90bac72a","type":"chapter","name":"01WPF体系结构.md","fullPath":"F:\\passerby\\csharp\\WPF教程\\01WPF体系结构.md","url":"/chapter/c2b386cfad89df6c7fa7e540b1cf5192_ef577b720dacf53df3ae49bb90bac72a"},{"id":"c2b386cfad89df6c7fa7e540b1cf5192_4d2ac4a7f3dd2c6c1b4caf16f11c972f","type":"chapter","name":"02WPF应用程序管理.md","fullPath":"F:\\passerby\\csharp\\WPF教程\\02WPF应用程序管理.md","url":"/chapter/c2b386cfad89df6c7fa7e540b1cf5192_4d2ac4a7f3dd2c6c1b4caf16f11c972f"},{"id":"c2b386cfad89df6c7fa7e540b1cf5192_dccdac507a316e4e80df39c473c9cd53","type":"chapter","name":"03WPF窗体.md","fullPath":"F:\\passerby\\csharp\\WPF教程\\03WPF窗体.md","url":"/chapter/c2b386cfad89df6c7fa7e540b1cf5192_dccdac507a316e4e80df39c473c9cd53"},{"id":"c2b386cfad89df6c7fa7e540b1cf5192_8c8c5a68dfc06a8d598bd12da1fc7aaf","type":"chapter","name":"04WPF布局.md","fullPath":"F:\\passerby\\csharp\\WPF教程\\04WPF布局.md","url":"/chapter/c2b386cfad89df6c7fa7e540b1cf5192_8c8c5a68dfc06a8d598bd12da1fc7aaf"},{"id":"c2b386cfad89df6c7fa7e540b1cf5192_68af2be695174cb3ec4408ddfcefd90b","type":"chapter","name":"05WPF控件模型.md","fullPath":"F:\\passerby\\csharp\\WPF教程\\05WPF控件模型.md","url":"/chapter/c2b386cfad89df6c7fa7e540b1cf5192_68af2be695174cb3ec4408ddfcefd90b"},{"id":"c2b386cfad89df6c7fa7e540b1cf5192_0c85855a5aadb7719a4a7351abb288b9","type":"chapter","name":"06WPF依赖项属性和路由事件.md","fullPath":"F:\\passerby\\csharp\\WPF教程\\06WPF依赖项属性和路由事件.md","url":"/chapter/c2b386cfad89df6c7fa7e540b1cf5192_0c85855a5aadb7719a4a7351abb288b9"},{"id":"c2b386cfad89df6c7fa7e540b1cf5192_524c4971908be13b6f37367cc71ce39c","type":"chapter","name":"07WPF键盘输入、鼠标输入、焦点处理.md","fullPath":"F:\\passerby\\csharp\\WPF教程\\07WPF键盘输入、鼠标输入、焦点处理.md","url":"/chapter/c2b386cfad89df6c7fa7e540b1cf5192_524c4971908be13b6f37367cc71ce39c"},{"id":"c2b386cfad89df6c7fa7e540b1cf5192_8e3e067e78e962ea24d6868bfe119d70","type":"chapter","name":"08WPF命令.md","fullPath":"F:\\passerby\\csharp\\WPF教程\\08WPF命令.md","url":"/chapter/c2b386cfad89df6c7fa7e540b1cf5192_8e3e067e78e962ea24d6868bfe119d70"},{"id":"c2b386cfad89df6c7fa7e540b1cf5192_30dfa04cc943d72e072ca2137a7305e4","type":"chapter","name":"09WPF资源.md","fullPath":"F:\\passerby\\csharp\\WPF教程\\09WPF资源.md","url":"/chapter/c2b386cfad89df6c7fa7e540b1cf5192_30dfa04cc943d72e072ca2137a7305e4"},{"id":"c2b386cfad89df6c7fa7e540b1cf5192_21dc9b2382d63bf02f951b51778d8b5c","type":"chapter","name":"10WPF样式与模板.md","fullPath":"F:\\passerby\\csharp\\WPF教程\\10WPF样式与模板.md","url":"/chapter/c2b386cfad89df6c7fa7e540b1cf5192_21dc9b2382d63bf02f951b51778d8b5c"},{"id":"c2b386cfad89df6c7fa7e540b1cf5192_905a7533a2c0d9bb42e08852ce81a13c","type":"chapter","name":"11WPF更换主题.md","fullPath":"F:\\passerby\\csharp\\WPF教程\\11WPF更换主题.md","url":"/chapter/c2b386cfad89df6c7fa7e540b1cf5192_905a7533a2c0d9bb42e08852ce81a13c"},{"id":"c2b386cfad89df6c7fa7e540b1cf5192_04078b526541a1e84bc17d6f367ed1bb","type":"chapter","name":"12WPF数据绑定.md","fullPath":"F:\\passerby\\csharp\\WPF教程\\12WPF数据绑定.md","url":"/chapter/c2b386cfad89df6c7fa7e540b1cf5192_04078b526541a1e84bc17d6f367ed1bb"},{"id":"c2b386cfad89df6c7fa7e540b1cf5192_0789e3dd7dcfe7a364b09978ebf0c5ce","type":"chapter","name":"13WPF基本图形.md","fullPath":"F:\\passerby\\csharp\\WPF教程\\13WPF基本图形.md","url":"/chapter/c2b386cfad89df6c7fa7e540b1cf5192_0789e3dd7dcfe7a364b09978ebf0c5ce"},{"id":"c2b386cfad89df6c7fa7e540b1cf5192_f9e2cf299b43fd1ed1ce78a44fb8e17c","type":"chapter","name":"14WPFBrush.md","fullPath":"F:\\passerby\\csharp\\WPF教程\\14WPFBrush.md","url":"/chapter/c2b386cfad89df6c7fa7e540b1cf5192_f9e2cf299b43fd1ed1ce78a44fb8e17c"}],"title":"12WPF数据绑定","type":"book","url":"/book/c2b386cfad89df6c7fa7e540b1cf5192","content":"\n    \n    \n      <div class=\"crossnote markdown-preview  \">\n      \n<h1 id=\"wpf数据绑定\">WPF数据绑定 </h1>\n<blockquote>\n<p>WPF数据绑定为应用程序提供了一种表示数据和与数据交互的简单而又一致的方法。元素能够以公共语言运行库 (CLR) 对象和XML的形式绑定到各种数据源中的数据。</p>\n</blockquote>\n<h2 id=\"基本概念\">基本概念 </h2>\n<ul>\n<li>绑定源即控件绑定所使用的源数据</li>\n<li>绑定目标即数据显示的控件</li>\n</ul>\n<h3 id=\"绑定源\">绑定源 </h3>\n<ul>\n<li>CLR对象：可以绑定到CLR类的公开的属性、子属性、索引器上</li>\n<li>ADO.Net对象：例如DataTable、DataView等</li>\n<li>XML文件：使用XPath进行解析</li>\n<li>DependencyObject：绑定到其依赖项属性上，即控件绑定控件</li>\n</ul>\n<h3 id=\"绑定目标\">绑定目标 </h3>\n<blockquote>\n<p>必须是WPF中的DependencyObject，将数据绑定到其依赖项属性上</p>\n</blockquote>\n<p><img src=\"/assets/17365982334973131.png\" alt=\"数据绑定示例图\"></p>\n<h2 id=\"绑定的基本方式\">绑定的基本方式 </h2>\n<ol>\n<li>OneWay绑定导致对源属性的更改会自动更新目标属性，但是对目标属性的更改不会传播回源属性。此绑定类型适用于绑定的控件为隐式只读控件的情况。例如，您可能绑定到如股票行情自动收录器这样的源，或许目标属性没有用于进行更改的控件接口（如表的数据绑定背景色）。如果无需监视目标属性的更改，则使用 OneWay 绑定模式可避免 TwoWay 绑定模式的系统开销</li>\n<li>TwoWay 绑定导致对源属性的更改会自动更新目标属性，而对目标属性的更改也会自动更新源属性。此绑定类型适用于可编辑窗体或其他完全交互式 UI 方案。大多数属性都默认为 OneWay 绑定，但是一些依赖项属性（通常为用户可编辑的控件的属性，如 TextBox 的 Text 属性和 CheckBox 的 IsChecked 属性）默认为 TwoWay 绑定。确定依赖项属性绑定在默认情况下是单向还是双向的编程方法是：使用 GetMetadata 获取属性的属性元数据，然后检查 BindsTwoWayByDefault 属性的布尔值</li>\n<li>OneWayToSource 与 OneWay 绑定相反；它在目标属性更改时更新源属性。一个示例方案是您只需要从 UI 重新计算源值的情况</li>\n<li>OneTime绑定 ，该绑定会导致源属性初始化目标属性，但不传播后续更改</li>\n</ol>\n<p><img src=\"/assets/17365982335269811.png\" alt=\"数据绑定方式示例图\"></p>\n<h2 id=\"实现数据源更改影响目标更改\">实现数据源更改影响目标更改 </h2>\n<pre data-role=\"codeBlock\" data-info=\"c#\" class=\"language-c# c#\"><code>using System.ComponentModel;\nnamespace BasicWPFDataBinding\n{\n    public class MyData : INotifyPropertyChanged\n    {\n        #region INotifyPropertyChanged Members\n        public event PropertyChangedEventHandler PropertyChanged;\n        #endregion\n\n        public MyData()\n        {\n            Name = \"Tom\";\n        }\n\n        private string _Name;\n        public string Name\n        {\n            set\n            {\n            _Name = value; \n                if (PropertyChanged != null)\n                {\n                    PropertyChanged(this,new PropertyChangedEventArgs(\"Name\"));\n                }\n            } \n            get\n            {\n                    return _Name;\n            }\n        }\n    }\n}\n</code></pre><h2 id=\"实现绑定目标的值更改影响绑定源的值\">实现绑定目标的值更改影响绑定源的值 </h2>\n<pre data-role=\"codeBlock\" data-info=\"xml\" class=\"language-xml xml\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TextBox</span> <span class=\"token attr-name\">Text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{Binding Path=Name, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n</code></pre><h2 id=\"自定义这种绑定转换\">自定义这种绑定转换 </h2>\n<p><img src=\"/assets/17365982335482231.png\" alt=\"自定义数据绑定示例图\"></p>\n\n      </div>\n      <div class=\"md-sidebar-toc\">\n<div class=\"md-toc\">\n<details style=\"padding:0;;padding-left:0px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#wpf数据绑定\" class=\"md-toc-link\"><p>WPF数据绑定</p>\n</a>\n          </summary>\n        <div>\n          <details style=\"padding:0;;padding-left:24px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#基本概念\" class=\"md-toc-link\"><p>基本概念</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#绑定源\" class=\"md-toc-link\">\n            <p>绑定源</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#绑定目标\" class=\"md-toc-link\">\n            <p>绑定目标</p>\n\n          </a></div>\n        </div>\n      </details>\n    <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#绑定的基本方式\" class=\"md-toc-link\">\n            <p>绑定的基本方式</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#实现数据源更改影响目标更改\" class=\"md-toc-link\">\n            <p>实现数据源更改影响目标更改</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#实现绑定目标的值更改影响绑定源的值\" class=\"md-toc-link\">\n            <p>实现绑定目标的值更改影响绑定源的值</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#自定义这种绑定转换\" class=\"md-toc-link\">\n            <p>自定义这种绑定转换</p>\n\n          </a></div>\n        </div>\n      </details>\n    \n</div>\n</div>\n      <a id=\"sidebar-toc-btn\">≡</a>\n    \n    \n    \n    \n    \n    \n<script>\n\nvar sidebarTOCBtn = document.getElementById('sidebar-toc-btn')\nsidebarTOCBtn.addEventListener('click', function(event) {\n  event.stopPropagation()\n  if (document.body.hasAttribute('html-show-sidebar-toc')) {\n    document.body.removeAttribute('html-show-sidebar-toc')\n  } else {\n    document.body.setAttribute('html-show-sidebar-toc', true)\n  }\n})\n</script>\n      \n  \n    "},"title":"12WPF数据绑定"},"__N_SSG":true}