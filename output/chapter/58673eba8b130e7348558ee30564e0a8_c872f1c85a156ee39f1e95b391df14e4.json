{"pageProps":{"bookInfo":{"id":"58673eba8b130e7348558ee30564e0a8","name":"marked源码解析","fullPath":"F:\\passerby\\source\\marked源码解析","chapterList":[{"id":"58673eba8b130e7348558ee30564e0a8_e373581e0221c78fde3ed2a81f7dc1fd","type":"chapter","name":"00前置.md","fullPath":"F:\\passerby\\source\\marked源码解析\\00前置.md","url":"/chapter/58673eba8b130e7348558ee30564e0a8_e373581e0221c78fde3ed2a81f7dc1fd"},{"id":"58673eba8b130e7348558ee30564e0a8_c872f1c85a156ee39f1e95b391df14e4","type":"chapter","name":"01单例Marked.md","fullPath":"F:\\passerby\\source\\marked源码解析\\01单例Marked.md","url":"/chapter/58673eba8b130e7348558ee30564e0a8_c872f1c85a156ee39f1e95b391df14e4"},{"id":"58673eba8b130e7348558ee30564e0a8_cb4742a4f7aec1ec432cd2b96e87b011","type":"chapter","name":"02词法分析latex.md","fullPath":"F:\\passerby\\source\\marked源码解析\\02词法分析latex.md","url":"/chapter/58673eba8b130e7348558ee30564e0a8_cb4742a4f7aec1ec432cd2b96e87b011"},{"id":"58673eba8b130e7348558ee30564e0a8_928a1b1220cfb8c94fc7bc0e674286db","type":"chapter","name":"03分词器Tokenizer.md","fullPath":"F:\\passerby\\source\\marked源码解析\\03分词器Tokenizer.md","url":"/chapter/58673eba8b130e7348558ee30564e0a8_928a1b1220cfb8c94fc7bc0e674286db"},{"id":"58673eba8b130e7348558ee30564e0a8_6e5bc1d3b7941f518f5b2a7ffa882251","type":"chapter","name":"04规则rules.md","fullPath":"F:\\passerby\\source\\marked源码解析\\04规则rules.md","url":"/chapter/58673eba8b130e7348558ee30564e0a8_6e5bc1d3b7941f518f5b2a7ffa882251"},{"id":"58673eba8b130e7348558ee30564e0a8_eb9c33f6bdeedf087da65aec0e4f1463","type":"chapter","name":"05Token.md","fullPath":"F:\\passerby\\source\\marked源码解析\\05Token.md","url":"/chapter/58673eba8b130e7348558ee30564e0a8_eb9c33f6bdeedf087da65aec0e4f1463"}],"title":"01单例Marked","type":"book","url":"/book/58673eba8b130e7348558ee30564e0a8","content":"\n    \n    \n      <div class=\"crossnote markdown-preview  \">\n      \n<h1 id=\"marked\">marked </h1>\n<p>marked 使用了单例模式<br>\nmarked 提供了一个插件式开发的基座，</p>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code><span class=\"token keyword keyword-function\">function</span> <span class=\"token function\">marked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword keyword-const\">const</span> markedInstance <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token class-name\">Marked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmarked<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">use</span> <span class=\"token operator\">=</span><span class=\"token keyword keyword-function\">function</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> MarkedExtension<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    markedInstance<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><h2 id=\"use-方法\">use 方法 </h2>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Marked</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> MarkedExtension<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> MarkedExtension<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword keyword-const\">const</span> extensions<span class=\"token operator\">:</span> MarkedOptions<span class=\"token punctuation\">[</span><span class=\"token string\">'extensions'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>extensions <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span> renderers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> childTokens<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        args<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pack<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword keyword-const\">const</span> opts <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>pack <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-as\">as</span> MarkedOptions<span class=\"token punctuation\">;</span>\n            opts<span class=\"token punctuation\">.</span>async <span class=\"token operator\">=</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>async <span class=\"token operator\">||</span> opts<span class=\"token punctuation\">.</span>async <span class=\"token operator\">||</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword keyword-if\">if</span><span class=\"token punctuation\">(</span>pack<span class=\"token punctuation\">.</span>extensions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                pack<span class=\"token punctuation\">.</span>extensions<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ext<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ext<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword keyword-throw\">throw</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'extension name required'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword keyword-if\">if</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"renderer\"</span> <span class=\"token keyword keyword-in\">in</span> ext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword keyword-const\">const</span> prevRenderer <span class=\"token operator\">=</span> extensions<span class=\"token punctuation\">.</span>renderers<span class=\"token punctuation\">[</span>ext<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword keyword-if\">if</span><span class=\"token punctuation\">(</span>prevRenderer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                           extensions<span class=\"token punctuation\">.</span>renderers<span class=\"token punctuation\">[</span>ext<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword keyword-function\">function</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                                <span class=\"token keyword keyword-let\">let</span> ret <span class=\"token operator\">=</span> ext<span class=\"token punctuation\">.</span><span class=\"token function\">renderer</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token keyword keyword-if\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">===</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                                    ret <span class=\"token operator\">=</span> <span class=\"token function\">prevRenderer</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token punctuation\">}</span>\n                                <span class=\"token keyword keyword-return\">return</span> ret<span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n                        <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-else\">else</span> <span class=\"token punctuation\">{</span>\n                            extensions<span class=\"token punctuation\">.</span>renderers<span class=\"token punctuation\">[</span>ext<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ext<span class=\"token punctuation\">.</span>renderer\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><h2 id=\"parse-文档解析处理\">parse 文档解析处理 </h2>\n<ol>\n<li>词法分析可以分为2中类型，一种是仅有行内的规则，一种是包含块级规则的</li>\n<li>如果hooks存在，则优先从hooks中获取词法分析函数</li>\n<li>如果是异步的则返回promise</li>\n</ol>\n<h3 id=\"执行顺序\">执行顺序 </h3>\n<ol>\n<li>优先执行钩子函数中的pregrocess</li>\n<li>进行词法分析Lexer</li>\n<li>对词法分析后的token执行钩子函数中的processAllTokens</li>\n<li>对词法分析后的token执行walkTokens函数处理</li>\n<li>进行语法解析parse</li>\n<li>对语法分析后的结果进行钩子中的postprocess函数</li>\n</ol>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Marked</span> <span class=\"token punctuation\">{</span>\n    parse <span class=\"token operator\">=</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseMarkdown</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    parseInline <span class=\"token operator\">=</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseMarkdown</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword keyword-private\">private</span> <span class=\"token function\">parseMarkdown</span><span class=\"token punctuation\">(</span>blockType<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword keyword-type\">type</span> <span class=\"token class-name\">overloadedParse</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">(</span>src<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> options<span class=\"token operator\">:</span> MarkedOptions <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span> async<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">(</span>src<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> options<span class=\"token operator\">:</span> MarkedOptions <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span> async<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">(</span>src<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> options<span class=\"token operator\">?</span><span class=\"token operator\">:</span> MarkedOptions <span class=\"token operator\">|</span> <span class=\"token keyword keyword-null\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword keyword-const\">const</span> parse<span class=\"token operator\">:</span> overloadedParse <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>src<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> options<span class=\"token operator\">:</span> MarkedOptions <span class=\"token operator\">|</span> <span class=\"token keyword keyword-null\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword keyword-const\">const</span> origOpt <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>options <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword keyword-const\">const</span> opt <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span><span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>origOpt <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword keyword-const\">const</span> throwError <span class=\"token operator\">=</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onError</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span>opt<span class=\"token punctuation\">.</span>silent<span class=\"token punctuation\">,</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>opt<span class=\"token punctuation\">.</span>async<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>async <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">&amp;&amp;</span> origOpt<span class=\"token punctuation\">.</span>async <span class=\"token operator\">===</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword keyword-return\">return</span> <span class=\"token function\">throwError</span><span class=\"token punctuation\">(</span><span class=\"token keyword keyword-new\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword keyword-typeof\">typeof</span> src <span class=\"token operator\">===</span> <span class=\"token string\">'undefined'</span> <span class=\"token operator\">||</span> src <span class=\"token operator\">===</span> <span class=\"token keyword keyword-null\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword keyword-return\">return</span> <span class=\"token function\">throwError</span><span class=\"token punctuation\">(</span><span class=\"token keyword keyword-new\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'marked(): input parameter is undefined or null'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword keyword-typeof\">typeof</span> src <span class=\"token operator\">!==</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword keyword-return\">return</span> <span class=\"token function\">throwError</span><span class=\"token punctuation\">(</span><span class=\"token keyword keyword-new\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'marked(): input parameter is of type '</span>\n                <span class=\"token operator\">+</span> Object<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">', string expected'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            \n            <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                opt<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>options <span class=\"token operator\">=</span> opt<span class=\"token punctuation\">;</span>\n                opt<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>block <span class=\"token operator\">=</span> blockType<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword keyword-const\">const</span> lexer <span class=\"token operator\">=</span> opt<span class=\"token punctuation\">.</span>hooks <span class=\"token operator\">?</span> opt<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span><span class=\"token function\">provideLexer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>blockType <span class=\"token operator\">?</span> _Lexer<span class=\"token punctuation\">.</span>lex <span class=\"token operator\">:</span> _Lexer<span class=\"token punctuation\">.</span>lexInline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword keyword-const\">const</span> parser <span class=\"token operator\">=</span> opt<span class=\"token punctuation\">.</span>hooks <span class=\"token operator\">?</span> opt<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span><span class=\"token function\">provideParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>blockType <span class=\"token operator\">?</span> _Parser<span class=\"token punctuation\">.</span>parse <span class=\"token operator\">:</span> _Parser<span class=\"token punctuation\">.</span>parseInline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>async<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword keyword-return\">return</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>hooks <span class=\"token operator\">?</span> opt<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span><span class=\"token function\">preprocess</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> src<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>src <span class=\"token operator\">=&gt;</span> <span class=\"token function\">lexer</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>tokens <span class=\"token operator\">=&gt;</span> opt<span class=\"token punctuation\">.</span>hooks <span class=\"token operator\">?</span> opt<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span><span class=\"token function\">processAllTokens</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> tokens<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>tokens <span class=\"token operator\">=&gt;</span> opt<span class=\"token punctuation\">.</span>walkTokens <span class=\"token operator\">?</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">walkTokens</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>walkTokens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> tokens<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> tokens<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>tokens <span class=\"token operator\">=&gt;</span> <span class=\"token function\">parser</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>html <span class=\"token operator\">=&gt;</span> opt<span class=\"token punctuation\">.</span>hooks <span class=\"token operator\">?</span> opt<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span><span class=\"token function\">postprocess</span><span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> html<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>throwError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword keyword-try\">try</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                src <span class=\"token operator\">=</span> opt<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span><span class=\"token function\">preprocess</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-as\">as</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword keyword-let\">let</span> tokens <span class=\"token operator\">=</span> <span class=\"token function\">lexer</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                tokens <span class=\"token operator\">=</span> opt<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span><span class=\"token function\">processAllTokens</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>walkTokens<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">walkTokens</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>walkTokens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword keyword-let\">let</span> html <span class=\"token operator\">=</span> <span class=\"token function\">parser</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                html <span class=\"token operator\">=</span> opt<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span><span class=\"token function\">postprocess</span><span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-as\">as</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword keyword-return\">return</span> html<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-catch\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword keyword-return\">return</span> <span class=\"token function\">throwError</span><span class=\"token punctuation\">(</span>e <span class=\"token keyword keyword-as\">as</span> Error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword keyword-return\">return</span> parse<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword keyword-private\">private</span> <span class=\"token function\">onError</span><span class=\"token punctuation\">(</span>silent<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">,</span> async<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> Error<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        e<span class=\"token punctuation\">.</span>message <span class=\"token operator\">+=</span> <span class=\"token string\">'\\nPlease report this to https://github.com/markedjs/marked.'</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>silent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword keyword-const\">const</span> msg <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;p&gt;An error occurred:&lt;/p&gt;&lt;pre&gt;'</span>\n            <span class=\"token operator\">+</span> <span class=\"token function\">escape</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>message <span class=\"token operator\">+</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;/pre&gt;'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>async<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword keyword-return\">return</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword keyword-return\">return</span> msg<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>async<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword keyword-return\">return</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword keyword-throw\">throw</span> e<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n      </div>\n      <div class=\"md-sidebar-toc\">\n<div class=\"md-toc\">\n<details style=\"padding:0;;padding-left:0px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#marked\" class=\"md-toc-link\"><p>marked</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#use-方法\" class=\"md-toc-link\">\n            <p>use 方法</p>\n\n          </a></div><details style=\"padding:0;;padding-left:24px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#parse-文档解析处理\" class=\"md-toc-link\"><p>parse 文档解析处理</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#执行顺序\" class=\"md-toc-link\">\n            <p>执行顺序</p>\n\n          </a></div>\n        </div>\n      </details>\n    \n        </div>\n      </details>\n    \n</div>\n</div>\n      <a id=\"sidebar-toc-btn\">≡</a>\n    \n    \n    \n    \n    \n    \n<script>\n\nvar sidebarTOCBtn = document.getElementById('sidebar-toc-btn')\nsidebarTOCBtn.addEventListener('click', function(event) {\n  event.stopPropagation()\n  if (document.body.hasAttribute('html-show-sidebar-toc')) {\n    document.body.removeAttribute('html-show-sidebar-toc')\n  } else {\n    document.body.setAttribute('html-show-sidebar-toc', true)\n  }\n})\n</script>\n      \n  \n    "},"title":"01单例Marked"},"__N_SSG":true}