{"pageProps":{"bookInfo":{"id":"58673eba8b130e7348558ee30564e0a8","name":"marked源码解析","fullPath":"F:\\passerby\\source\\marked源码解析","chapterList":[{"id":"58673eba8b130e7348558ee30564e0a8_e373581e0221c78fde3ed2a81f7dc1fd","type":"chapter","name":"00前置.md","fullPath":"F:\\passerby\\source\\marked源码解析\\00前置.md","url":"/chapter/58673eba8b130e7348558ee30564e0a8_e373581e0221c78fde3ed2a81f7dc1fd"},{"id":"58673eba8b130e7348558ee30564e0a8_c872f1c85a156ee39f1e95b391df14e4","type":"chapter","name":"01单例Marked.md","fullPath":"F:\\passerby\\source\\marked源码解析\\01单例Marked.md","url":"/chapter/58673eba8b130e7348558ee30564e0a8_c872f1c85a156ee39f1e95b391df14e4"},{"id":"58673eba8b130e7348558ee30564e0a8_cb4742a4f7aec1ec432cd2b96e87b011","type":"chapter","name":"02词法分析latex.md","fullPath":"F:\\passerby\\source\\marked源码解析\\02词法分析latex.md","url":"/chapter/58673eba8b130e7348558ee30564e0a8_cb4742a4f7aec1ec432cd2b96e87b011"},{"id":"58673eba8b130e7348558ee30564e0a8_928a1b1220cfb8c94fc7bc0e674286db","type":"chapter","name":"03分词器Tokenizer.md","fullPath":"F:\\passerby\\source\\marked源码解析\\03分词器Tokenizer.md","url":"/chapter/58673eba8b130e7348558ee30564e0a8_928a1b1220cfb8c94fc7bc0e674286db"},{"id":"58673eba8b130e7348558ee30564e0a8_6e5bc1d3b7941f518f5b2a7ffa882251","type":"chapter","name":"04规则rules.md","fullPath":"F:\\passerby\\source\\marked源码解析\\04规则rules.md","url":"/chapter/58673eba8b130e7348558ee30564e0a8_6e5bc1d3b7941f518f5b2a7ffa882251"},{"id":"58673eba8b130e7348558ee30564e0a8_eb9c33f6bdeedf087da65aec0e4f1463","type":"chapter","name":"05Token.md","fullPath":"F:\\passerby\\source\\marked源码解析\\05Token.md","url":"/chapter/58673eba8b130e7348558ee30564e0a8_eb9c33f6bdeedf087da65aec0e4f1463"}],"title":"02词法分析latex","type":"book","url":"/book/58673eba8b130e7348558ee30564e0a8","content":"\n    \n    \n      <div class=\"crossnote markdown-preview  \">\n      \n<h1 id=\"lexer-词法分析\">Lexer 词法分析 </h1>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code></code></pre><h2 id=\"初始化\">初始化 </h2>\n<ol>\n<li>初始化基础数据和分词器Tokenizer</li>\n<li>初始化markword文档的<a href=\"./03%E8%A7%84%E5%88%99rules.md\">解析规则</a></li>\n</ol>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code><span class=\"token function\">consstructor</span><span class=\"token punctuation\">(</span>options<span class=\"token operator\">?</span><span class=\"token operator\">:</span> MarkedOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>tokens <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword keyword-as\">as</span> <span class=\"token builtin\">unknown</span> <span class=\"token keyword keyword-as\">as</span> TokensList<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>tokens<span class=\"token punctuation\">.</span>links <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword keyword-null\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>options <span class=\"token operator\">=</span> options <span class=\"token operator\">||</span> _defaults<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>tokenizer <span class=\"token operator\">=</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>tokenizer <span class=\"token operator\">||</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token class-name\">_Tokenizer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>tokenizer <span class=\"token operator\">=</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>tokenizer<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>tokenizer<span class=\"token punctuation\">.</span>options <span class=\"token operator\">=</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>tokenizer<span class=\"token punctuation\">.</span>lexer <span class=\"token operator\">=</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>inlineQueue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        inLink<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        inRawBlock<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        top<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword keyword-const\">const</span> rules <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        other<span class=\"token punctuation\">,</span>\n        block<span class=\"token operator\">:</span> block<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">,</span>\n        inline<span class=\"token operator\">:</span> inline<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>pedantic<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        rules<span class=\"token punctuation\">.</span>block <span class=\"token operator\">=</span> block<span class=\"token punctuation\">.</span>pedantic<span class=\"token punctuation\">;</span>\n        rules<span class=\"token punctuation\">.</span>inline <span class=\"token operator\">=</span> inline<span class=\"token punctuation\">.</span>pedantic<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-else\">else</span> <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>gfm<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        rules<span class=\"token punctuation\">.</span>block <span class=\"token operator\">=</span> block<span class=\"token punctuation\">.</span>gfm<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>breaks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            rules<span class=\"token punctuation\">.</span>inline <span class=\"token operator\">=</span> inline<span class=\"token punctuation\">.</span>breaks<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-else\">else</span> <span class=\"token punctuation\">{</span>\n            rules<span class=\"token punctuation\">.</span>inline <span class=\"token operator\">=</span> inline<span class=\"token punctuation\">.</span>gfm<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>tokenizer<span class=\"token punctuation\">.</span>rules <span class=\"token operator\">=</span> rules<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><h2 id=\"lex-分解词汇\">lex 分解词汇 </h2>\n<ol>\n<li>将文档中的回车换行统一为<code>\\n</code></li>\n<li>处理块级的词汇凭证Token</li>\n<li>在处理行内的词汇凭证Token</li>\n<li>返回获取到的AST树</li>\n</ol>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code><span class=\"token function\">lex</span><span class=\"token punctuation\">(</span>src<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    src <span class=\"token operator\">=</span> src<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>carriageReturn<span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">blockTokens</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>tokens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword keyword-for\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword keyword-let\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>inlineQueue<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword keyword-const\">const</span> next <span class=\"token operator\">=</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>inlineQueue<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">inlineTokens</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">.</span>tokens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>inlineQueue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword keyword-return\">return</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>tokens<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><h3 id=\"blocktokens\">blockTokens </h3>\n<ol>\n<li>优先块级扩展中的词法分析器</li>\n<li>执行空白的词法分析器</li>\n<li>执行空白缩进或者制表符格式的代码行的词法分析器</li>\n</ol>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code><span class=\"token function\">blockTokens</span><span class=\"token punctuation\">(</span>src<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> tokens<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Token<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> lastParagraphClipped<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Token<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">blockTokens</span><span class=\"token punctuation\">(</span>src<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> tokens<span class=\"token operator\">?</span><span class=\"token operator\">:</span> TokensList<span class=\"token punctuation\">,</span> lastParagraphClipped<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> TokensList<span class=\"token punctuation\">;</span>\n<span class=\"token function\">blockTokens</span><span class=\"token punctuation\">(</span>src<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> tokens<span class=\"token operator\">:</span> Token<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> lastParagraphClipped <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>pedantic<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      src <span class=\"token operator\">=</span> src<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>tabCharGlobal<span class=\"token punctuation\">,</span> <span class=\"token string\">'    '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>spaceLine<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword keyword-while\">while</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword keyword-let\">let</span> token<span class=\"token operator\">:</span> Tokens<span class=\"token punctuation\">.</span>Generic <span class=\"token operator\">|</span> <span class=\"token keyword keyword-undefined\">undefined</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>extensions<span class=\"token operator\">?.</span>block<span class=\"token operator\">?.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>extTokenizer<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>token <span class=\"token operator\">=</span> <span class=\"token function\">extTokenizer</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> lexer<span class=\"token operator\">:</span> <span class=\"token keyword keyword-this\">this</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">,</span> tokens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                src <span class=\"token operator\">=</span> src<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                tokens<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword keyword-continue\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>token <span class=\"token operator\">=</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>tokenizer<span class=\"token punctuation\">.</span><span class=\"token function\">space</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                src <span class=\"token operator\">=</span> src<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword keyword-const\">const</span> lastToken <span class=\"token operator\">=</span> tokens<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> lastToken <span class=\"token operator\">!==</span> <span class=\"token keyword keyword-undefined\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// if there's a single \\n as a spacer, it's terminating the last line,</span>\n            <span class=\"token comment\">// so move it there so that we don't get unnecessary paragraph tags</span>\n                lastToken<span class=\"token punctuation\">.</span>raw <span class=\"token operator\">+=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-else\">else</span> <span class=\"token punctuation\">{</span>\n                tokens<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword keyword-continue\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>token <span class=\"token operator\">=</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>tokenizer<span class=\"token punctuation\">.</span><span class=\"token function\">code</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                src <span class=\"token operator\">=</span> src<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword keyword-const\">const</span> lastToken <span class=\"token operator\">=</span> tokens<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// An indented code block cannot interrupt a paragraph.</span>\n            <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>lastToken<span class=\"token operator\">?.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'paragraph'</span> <span class=\"token operator\">||</span> lastToken<span class=\"token operator\">?.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                lastToken<span class=\"token punctuation\">.</span>raw <span class=\"token operator\">+=</span> <span class=\"token string\">'\\n'</span> <span class=\"token operator\">+</span> token<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">;</span>\n                lastToken<span class=\"token punctuation\">.</span>text <span class=\"token operator\">+=</span> <span class=\"token string\">'\\n'</span> <span class=\"token operator\">+</span> token<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>inlineQueue<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> lastToken<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-else\">else</span> <span class=\"token punctuation\">{</span>\n                tokens<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword keyword-continue\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n      </div>\n      <div class=\"md-sidebar-toc\">\n<div class=\"md-toc\">\n<details style=\"padding:0;;padding-left:0px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#lexer-词法分析\" class=\"md-toc-link\"><p>Lexer 词法分析</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#初始化\" class=\"md-toc-link\">\n            <p>初始化</p>\n\n          </a></div><details style=\"padding:0;;padding-left:24px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#lex-分解词汇\" class=\"md-toc-link\"><p>lex 分解词汇</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#blocktokens\" class=\"md-toc-link\">\n            <p>blockTokens</p>\n\n          </a></div>\n        </div>\n      </details>\n    \n        </div>\n      </details>\n    \n</div>\n</div>\n      <a id=\"sidebar-toc-btn\">≡</a>\n    \n    \n    \n    \n    \n    \n<script>\n\nvar sidebarTOCBtn = document.getElementById('sidebar-toc-btn')\nsidebarTOCBtn.addEventListener('click', function(event) {\n  event.stopPropagation()\n  if (document.body.hasAttribute('html-show-sidebar-toc')) {\n    document.body.removeAttribute('html-show-sidebar-toc')\n  } else {\n    document.body.setAttribute('html-show-sidebar-toc', true)\n  }\n})\n</script>\n      \n  \n    "},"title":"02词法分析latex"},"__N_SSG":true}