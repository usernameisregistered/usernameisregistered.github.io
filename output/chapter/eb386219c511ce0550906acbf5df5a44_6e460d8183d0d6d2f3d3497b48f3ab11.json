{"pageProps":{"bookInfo":{"id":"eb386219c511ce0550906acbf5df5a44","name":"webGL","fullPath":"F:\\passerby\\web\\webGL","chapterList":[{"id":"eb386219c511ce0550906acbf5df5a44_fc1f19cdf7f20ead1ea18c422af89275","type":"chapter","name":"1.WebGL_基础概念.md","fullPath":"F:\\passerby\\web\\webGL\\1.WebGL_基础概念.md","url":"/chapter/eb386219c511ce0550906acbf5df5a44_fc1f19cdf7f20ead1ea18c422af89275"},{"id":"eb386219c511ce0550906acbf5df5a44_6e460d8183d0d6d2f3d3497b48f3ab11","type":"chapter","name":"2.webGL_工作原理.md","fullPath":"F:\\passerby\\web\\webGL\\2.webGL_工作原理.md","url":"/chapter/eb386219c511ce0550906acbf5df5a44_6e460d8183d0d6d2f3d3497b48f3ab11"},{"id":"eb386219c511ce0550906acbf5df5a44_058c5f3f9bda3e08d7deb1e589e8c144","type":"chapter","name":"3.WebGL_着色器和GLSL.md","fullPath":"F:\\passerby\\web\\webGL\\3.WebGL_着色器和GLSL.md","url":"/chapter/eb386219c511ce0550906acbf5df5a44_058c5f3f9bda3e08d7deb1e589e8c144"},{"id":"eb386219c511ce0550906acbf5df5a44_54cda204f7551490d7d9419ed9a1de77","type":"chapter","name":"4.WebGL_图像处理.md","fullPath":"F:\\passerby\\web\\webGL\\4.WebGL_图像处理.md","url":"/chapter/eb386219c511ce0550906acbf5df5a44_54cda204f7551490d7d9419ed9a1de77"}],"title":"2.webGL_工作原理","type":"book","url":"/book/eb386219c511ce0550906acbf5df5a44","content":"\n    \n    \n      <div class=\"crossnote markdown-preview  \">\n      \n<h1 id=\"webgl-工作原理\">webGL 工作原理 </h1>\n<p>WebGL在GPU上的工作基本上分为两部分，第一部分是将顶点（或数据流）转换到裁剪空间坐标， 第二部分是基于第一部分的结果绘制像素点</p>\n<pre data-role=\"codeBlock\" data-info=\"js\" class=\"language-javascript js\"><code><span class=\"token keyword keyword-var\">var</span> primitiveType <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TRIANGLES</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-var\">var</span> offset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-var\">var</span> count <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\ngl<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">drawArrays</span><span class=\"token punctuation\">(</span>primitiveType<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre><p><img src=\"/assets/17357391358599976.gif\" alt=\"顶点着色器运行\"></p>\n<p>左侧是你提供的数据，顶点着色器是你写进GLSL中的一个方法，每个顶点调用一次，在这个方法中做一些数学运算后设置一个特殊的gl_position变量，这个变量就是该顶点转换到裁剪空间中坐标值，GPU接收该值并将其保存起来。<br>\n假设你正在画三角形，顶点着色器每完成三次顶点处理，WebGL就会用这三个顶点画一个三角形。 它计算出这三个顶点对应的像素后，就会光栅化这个三角形，“光栅化”其实就是“用像素画出来” 的花哨叫法。对于每一个像素，它会调用你的片段着色器询问你使用什么颜色。 你通过给片段着色器的一个特殊变量gl_FragColor设置一个颜色值，实现自定义像素颜色。</p>\n<h2 id=\"关于buffer和attribute的代码是干什么的\">关于buffer和attribute的代码是干什么的 </h2>\n<p>缓冲操作是在GPU上获取顶点和其他顶点数据的一种方式。 gl.createBuffer创建一个缓冲；gl.bindBuffer是设置缓冲为当前使用缓冲； gl.bufferData将数据拷贝到缓冲，这个操作一般在初始化完成。</p>\n<pre data-role=\"codeBlock\" data-info=\"js\" class=\"language-javascript js\"><code><span class=\"token keyword keyword-var\">var</span> positionLocation <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getAttribLocation</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span> <span class=\"token string\">\"a_position\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-var\">var</span> colorLocation <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getAttribLocation</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span> <span class=\"token string\">\"a_color\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngl<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">enableVertexAttribArray</span><span class=\"token punctuation\">(</span><span class=\"token dom variable\">location</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngl<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">bindBuffer</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">ARRAY_BUFFER</span><span class=\"token punctuation\">,</span> someBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngl<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">vertexAttribPointer</span><span class=\"token punctuation\">(</span><span class=\"token dom variable\">location</span><span class=\"token punctuation\">,</span>numComponents<span class=\"token punctuation\">,</span> typeOfData<span class=\"token punctuation\">,</span> normalizeFlag<span class=\"token punctuation\">,</span> strideToNextPieceOfData<span class=\"token punctuation\">,</span> offsetIntoBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><h3 id=\"vertexattribpointer-中的-normalizeflag-参数是什么意思\">vertexAttribPointer 中的 normalizeFlag 参数是什么意思？ </h3>\n<p>标准化标记（normalizeFlag）适用于所有非浮点型数据。如果传递false就解读原数据类型。 BYTE 类型的范围是从 -128 到 127，UNSIGNED_BYTE 类型的范围是从 0 到 255， SHORT 类型的范围是从 -32768 到 32767，等等...</p>\n<p>如果标准化标记设为true，BYTE 数据的值(-128 to 127)将会转换到 -1.0 到 +1.0 之间， UNSIGNED_BYTE (0 to 255) 变为 0.0 到 +1.0 之间，SHORT 也是转换到 -1.0 到 +1.0 之间， 但比 BYTE 精确度高</p>\n\n      </div>\n      <div class=\"md-sidebar-toc\">\n<div class=\"md-toc\">\n<details style=\"padding:0;;padding-left:0px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#webgl-工作原理\" class=\"md-toc-link\"><p>webGL 工作原理</p>\n</a>\n          </summary>\n        <div>\n          <details style=\"padding:0;;padding-left:24px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#关于buffer和attribute的代码是干什么的\" class=\"md-toc-link\"><p>关于buffer和attribute的代码是干什么的</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#vertexattribpointer-中的-normalizeflag-参数是什么意思\" class=\"md-toc-link\">\n            <p>vertexAttribPointer 中的 normalizeFlag 参数是什么意思？</p>\n\n          </a></div>\n        </div>\n      </details>\n    \n        </div>\n      </details>\n    \n</div>\n</div>\n      <a id=\"sidebar-toc-btn\">≡</a>\n    \n    \n    \n    \n    \n    \n<script>\n\nvar sidebarTOCBtn = document.getElementById('sidebar-toc-btn')\nsidebarTOCBtn.addEventListener('click', function(event) {\n  event.stopPropagation()\n  if (document.body.hasAttribute('html-show-sidebar-toc')) {\n    document.body.removeAttribute('html-show-sidebar-toc')\n  } else {\n    document.body.setAttribute('html-show-sidebar-toc', true)\n  }\n})\n</script>\n      \n  \n    "},"title":"2.webGL_工作原理"},"__N_SSG":true}