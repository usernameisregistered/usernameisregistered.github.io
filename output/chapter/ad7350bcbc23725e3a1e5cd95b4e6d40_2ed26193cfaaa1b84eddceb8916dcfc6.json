{"pageProps":{"bookInfo":{"id":"ad7350bcbc23725e3a1e5cd95b4e6d40","name":"Web性能","fullPath":"F:\\passerby\\web\\Web性能","chapterList":[{"id":"ad7350bcbc23725e3a1e5cd95b4e6d40_27bc707ed506f3bac95a5c2cd96628f7","type":"chapter","name":"01概述.md","fullPath":"F:\\passerby\\web\\Web性能\\01概述.md","url":"/chapter/ad7350bcbc23725e3a1e5cd95b4e6d40_27bc707ed506f3bac95a5c2cd96628f7"},{"id":"ad7350bcbc23725e3a1e5cd95b4e6d40_e93adda3e055e10673f2dfcc56779604","type":"chapter","name":"02渲染页面：浏览器的工作原理.md","fullPath":"F:\\passerby\\web\\Web性能\\02渲染页面：浏览器的工作原理.md","url":"/chapter/ad7350bcbc23725e3a1e5cd95b4e6d40_e93adda3e055e10673f2dfcc56779604"},{"id":"ad7350bcbc23725e3a1e5cd95b4e6d40_35e9ce7dee62796c422685ecd288dd85","type":"chapter","name":"03关键渲染路径.md","fullPath":"F:\\passerby\\web\\Web性能\\03关键渲染路径.md","url":"/chapter/ad7350bcbc23725e3a1e5cd95b4e6d40_35e9ce7dee62796c422685ecd288dd85"},{"id":"ad7350bcbc23725e3a1e5cd95b4e6d40_4885d62b6cb4f3d8290139b4aa722f5e","type":"chapter","name":"04CSS动画与JavaScript动画的性能.md","fullPath":"F:\\passerby\\web\\Web性能\\04CSS动画与JavaScript动画的性能.md","url":"/chapter/ad7350bcbc23725e3a1e5cd95b4e6d40_4885d62b6cb4f3d8290139b4aa722f5e"},{"id":"ad7350bcbc23725e3a1e5cd95b4e6d40_f69864169b133924e7fbc07972b57107","type":"chapter","name":"05优化启动性能.md","fullPath":"F:\\passerby\\web\\Web性能\\05优化启动性能.md","url":"/chapter/ad7350bcbc23725e3a1e5cd95b4e6d40_f69864169b133924e7fbc07972b57107"},{"id":"ad7350bcbc23725e3a1e5cd95b4e6d40_cf8a5cad1866ef93258e28085d7fccc5","type":"chapter","name":"06使用dns-prefetch.md","fullPath":"F:\\passerby\\web\\Web性能\\06使用dns-prefetch.md","url":"/chapter/ad7350bcbc23725e3a1e5cd95b4e6d40_cf8a5cad1866ef93258e28085d7fccc5"},{"id":"ad7350bcbc23725e3a1e5cd95b4e6d40_341056199d4eae720af791f9b0173de8","type":"chapter","name":"07懒加载.md","fullPath":"F:\\passerby\\web\\Web性能\\07懒加载.md","url":"/chapter/ad7350bcbc23725e3a1e5cd95b4e6d40_341056199d4eae720af791f9b0173de8"},{"id":"ad7350bcbc23725e3a1e5cd95b4e6d40_201df68755b3e4b5bae98025f97336be","type":"chapter","name":"08感知性能.md","fullPath":"F:\\passerby\\web\\Web性能\\08感知性能.md","url":"/chapter/ad7350bcbc23725e3a1e5cd95b4e6d40_201df68755b3e4b5bae98025f97336be"},{"id":"ad7350bcbc23725e3a1e5cd95b4e6d40_2ed26193cfaaa1b84eddceb8916dcfc6","type":"chapter","name":"09JavaScript性能优化.md","fullPath":"F:\\passerby\\web\\Web性能\\09JavaScript性能优化.md","url":"/chapter/ad7350bcbc23725e3a1e5cd95b4e6d40_2ed26193cfaaa1b84eddceb8916dcfc6"},{"id":"ad7350bcbc23725e3a1e5cd95b4e6d40_7cb11ebe066f3016752b653be24f8462","type":"chapter","name":"10css性能优化.md","fullPath":"F:\\passerby\\web\\Web性能\\10css性能优化.md","url":"/chapter/ad7350bcbc23725e3a1e5cd95b4e6d40_7cb11ebe066f3016752b653be24f8462"},{"id":"ad7350bcbc23725e3a1e5cd95b4e6d40_3886481dc942fc073ec91a4da0553bca","type":"chapter","name":"11HTML性能优化.md","fullPath":"F:\\passerby\\web\\Web性能\\11HTML性能优化.md","url":"/chapter/ad7350bcbc23725e3a1e5cd95b4e6d40_3886481dc942fc073ec91a4da0553bca"}],"title":"09JavaScript性能优化","type":"book","url":"/book/ad7350bcbc23725e3a1e5cd95b4e6d40","content":"\n    \n    \n      <div class=\"crossnote markdown-preview  \">\n      \n<h1 id=\"javascript性能优化\">JavaScript性能优化 </h1>\n<h2 id=\"优化-javascript-的下载\">优化 JavaScript 的下载 </h2>\n<p>最高效、最不阻塞的JavaScript是根本不使用JavaScript。你应该尽量少使用JavaScript</p>\n<p><strong>并非总是需要框架</strong>：你可能熟悉使用某个 JavaScript 框架。如果你对使用该框架有经验和信心，并且喜欢它提供的所有工具，那么它可能是你构建大多数项目的首选。然而，框架会增加 JavaScript 的负担。如果你创建的是一个相对静态的体验，对 JavaScript 的要求很少，那么你可能不需要那个框架。也许你可以使用几行标准 JavaScript 来实现你需要的功能。<br>\n<strong>考虑更简单的解决方案</strong>：你可能有一个华丽、有趣的解决方案要实现，但请考虑用户是否会喜欢它。他们是否更喜欢简单的东西？<br>\n<strong>删除未使用的代码</strong>：这听起来很明显，但令人惊讶的是很多开发者忘记清除在开发过程中添加的不会被用到的功能。你需要谨慎并有意识地添加和删除代码。所有脚本都会被解析，无论它是否被使用；因此，加快下载速度的一个快速方法是摆脱任何不会被使用的功能。此外，要考虑通常只会使用框架中的一小部分功能。是否有可能创建一个仅包含你所需部分的框架的自定义构建版本？<br>\n<strong>考虑使用浏览器内置特性</strong>：也许你可以使用浏览器已经具备的特性，而不是通过 JavaScript 自己创建</p>\n<h2 id=\"处理解析和执行\">处理解析和执行 </h2>\n<ol>\n<li>通常首先解析 HTML，按照页面上出现的顺序进行解析。</li>\n<li>遇到 CSS 时，解析 CSS 以了解需要应用于页面的样式。在此期间，开始获取链接的资源，如图像和网络字体。</li>\n<li>遇到 JavaScript 时，浏览器解析、评估并执行它。</li>\n<li>稍后，浏览器根据应用于每个 HTML 元素的 CSS 来确定每个元素的样式。</li>\n<li>然后将经过样式处理的结果绘制到屏幕上。</li>\n</ol>\n<p>这里关键的步骤是第 3 步。默认情况下，JavaScript 的解析和执行会阻塞渲染。这意味着浏览器在遇到 JavaScript 之后，会阻塞解析任何出现在其后的 HTML 代码，直到脚本处理完成。因此，样式和绘制也会被阻塞。因此，你不仅需要仔细考虑你要下载的内容，还要考虑代码何时以及以何种方式执行</p>\n<ul>\n<li>尽早加载关键资源</li>\n<li>推迟非关键 JavaScript 的执行</li>\n<li>分解长任务</li>\n<li>处理 JavaScript 动画</li>\n<li>优化事件性能</li>\n<li>编写更高效代码的技巧\n<ul>\n<li>减少 DOM 操作</li>\n<li>批量进行 DOM 更改</li>\n<li>简化 HTML 代码</li>\n<li>减少循环代码的数量</li>\n<li>将计算任务移到主线程之外</li>\n</ul>\n</li>\n</ul>\n\n      </div>\n      <div class=\"md-sidebar-toc\">\n<div class=\"md-toc\">\n<details style=\"padding:0;;padding-left:0px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#javascript性能优化\" class=\"md-toc-link\"><p>JavaScript性能优化</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#优化-javascript-的下载\" class=\"md-toc-link\">\n            <p>优化 JavaScript 的下载</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#处理解析和执行\" class=\"md-toc-link\">\n            <p>处理解析和执行</p>\n\n          </a></div>\n        </div>\n      </details>\n    \n</div>\n</div>\n      <a id=\"sidebar-toc-btn\">≡</a>\n    \n    \n    \n    \n    \n    \n<script>\n\nvar sidebarTOCBtn = document.getElementById('sidebar-toc-btn')\nsidebarTOCBtn.addEventListener('click', function(event) {\n  event.stopPropagation()\n  if (document.body.hasAttribute('html-show-sidebar-toc')) {\n    document.body.removeAttribute('html-show-sidebar-toc')\n  } else {\n    document.body.setAttribute('html-show-sidebar-toc', true)\n  }\n})\n</script>\n      \n  \n    "},"title":"09JavaScript性能优化"},"__N_SSG":true}