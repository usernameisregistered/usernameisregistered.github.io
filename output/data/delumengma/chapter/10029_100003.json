{"pageProps":{"bookInfo":{"id":"10029","name":"webGL","fullPath":"F:\\passerby\\web\\webGL","chapterList":[{"id":"10029_100000","type":"chapter","name":".WebGL_基础概念","fullPath":"F:\\passerby\\web\\webGL\\1.WebGL_基础概念.md","url":"/chapter/10029_100000","content":"\n    \n    \n      <div class=\"crossnote markdown-preview  \">\n      \n<h1 id=\"基础概念\">基础概念 </h1>\n<p>WebGL仅仅是一个光栅化引擎，它可以根据你的代码绘制出点，线和三角形。 想要利用WebGL完成更复杂任务，取决于你能否提供合适的代码，组合使用点，线和三角形代替实现</p>\n<p>webGL在电脑的GPU中运行，因此你需要使用能够在GPU上运行的代码。 这样的代码需要提供成对的方法。每对方法中一个叫顶点着色器， 另一个叫片段着色器，并且使用一种和C或C++类似的强类型的语言 GLSL。 (GL着色语言)。 每一对组合起来称作一个 program（着色程序）。</p>\n<p>顶点着色器的作用是计算顶点的位置。根据计算出的一系列顶点位置，WebGL可以对点， 线和三角形在内的一些图元进行光栅化处理。当对这些图元进行光栅化处理时需要使用片段着色器方法。 片段着色器的作用是计算出当前绘制图元中每个像素的颜色值。</p>\n<p>几乎整个WebGL API都是关于如何设置这些成对方法的状态值以及运行它们。 对于想要绘制的每一个对象，都需要先设置一系列状态值，然后通过调用 gl.drawArrays 或 gl.drawElements 运行一个着色方法对，使得你的着色器对能够在GPU上运行</p>\n<h2 id=\"着色器获取数据的4种方法\">着色器获取数据的4种方法 </h2>\n<ul>\n<li>属性(attributes)和缓冲</li>\n</ul>\n<p>缓冲是发送到GPU的一些二进制数据序列，通常情况下缓冲数据包括位置，法向量，纹理坐标，顶点颜色值等。 你可以存储任何数据<br>\n属性用来指明怎么从缓冲中获取所需数据并将它提供给顶点着色器。 例如你可能在缓冲中用三个32位的浮点型数据存储一个位置值。 对于一个确切的属性你需要告诉它从哪个缓冲中获取数据，获取什么类型的数据（三个32位的浮点数据）， 起始偏移值是多少，到下一个位置的字节数是多少<br>\n缓冲不是随意读取的。事实上顶点着色器运行的次数是一个指定的确切数字， 每一次运行属性会从指定的缓冲中按照指定规则依次获取下一个值</p>\n<ul>\n<li>全局变量(Unifroms)</li>\n</ul>\n<p>全局变量在着色程序运行前赋值，在运行过程中全局有效。</p>\n<ul>\n<li>纹理(textures)</li>\n</ul>\n<p>纹理是一个数据序列，可以在着色程序运行中随意读取其中的数据，大多数情况存放的是图像数据，但是纹理仅仅是数据序列，你也可以随意存放除了颜色数据以外的其他的数据。</p>\n<ul>\n<li>可变量(varyings)</li>\n</ul>\n<p>可变量是一种顶点着色器给片段着色器传值的方式，依照渲染的图元是点、线、还是三角形，顶点着色器中设置的可变量会在片段着色器运行中获取不同的插值</p>\n<h2 id=\"webgl-hello-world\">webgl hello world </h2>\n<p>webgl只关心两件事，裁剪空间的坐标值和颜色值，使用webgl只需要给它提供这2个东西，你需要提供2个着色器来做这2件事，</p>\n<p>一个顶点着色器提供裁剪空间坐标值，一个片段着色器提供颜色值</p>\n<p>无论你的画布有多大，裁剪空间的坐标范围永远是 -1 到 1 。</p>\n\n      </div>\n      <div class=\"md-sidebar-toc\">\n<div class=\"md-toc\">\n<details style=\"padding:0;;padding-left:0px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#基础概念\" class=\"md-toc-link\"><p>基础概念</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#着色器获取数据的4种方法\" class=\"md-toc-link\">\n            <p>着色器获取数据的4种方法</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#webgl-hello-world\" class=\"md-toc-link\">\n            <p>webgl hello world</p>\n\n          </a></div>\n        </div>\n      </details>\n    \n</div>\n</div>\n      <a id=\"sidebar-toc-btn\">≡</a>\n    \n    \n    \n    \n    \n    \n<script>\n\nvar sidebarTOCBtn = document.getElementById('sidebar-toc-btn')\nsidebarTOCBtn.addEventListener('click', function(event) {\n  event.stopPropagation()\n  if (document.body.hasAttribute('html-show-sidebar-toc')) {\n    document.body.removeAttribute('html-show-sidebar-toc')\n  } else {\n    document.body.setAttribute('html-show-sidebar-toc', true)\n  }\n})\n</script>\n      \n  \n    "},{"id":"10029_100001","type":"chapter","name":".webGL_工作原理","fullPath":"F:\\passerby\\web\\webGL\\2.webGL_工作原理.md","url":"/chapter/10029_100001","content":"\n    \n    \n      <div class=\"crossnote markdown-preview  \">\n      \n<h1 id=\"webgl-工作原理\">webGL 工作原理 </h1>\n<p>WebGL在GPU上的工作基本上分为两部分，第一部分是将顶点（或数据流）转换到裁剪空间坐标， 第二部分是基于第一部分的结果绘制像素点</p>\n<pre data-role=\"codeBlock\" data-info=\"js\" class=\"language-javascript js\"><code><span class=\"token keyword keyword-var\">var</span> primitiveType <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TRIANGLES</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-var\">var</span> offset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-var\">var</span> count <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\ngl<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">drawArrays</span><span class=\"token punctuation\">(</span>primitiveType<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre><p><img src=\"/assets/100000151\" alt=\"顶点着色器运行\"></p>\n<p>左侧是你提供的数据，顶点着色器是你写进GLSL中的一个方法，每个顶点调用一次，在这个方法中做一些数学运算后设置一个特殊的gl_position变量，这个变量就是该顶点转换到裁剪空间中坐标值，GPU接收该值并将其保存起来。<br>\n假设你正在画三角形，顶点着色器每完成三次顶点处理，WebGL就会用这三个顶点画一个三角形。 它计算出这三个顶点对应的像素后，就会光栅化这个三角形，“光栅化”其实就是“用像素画出来” 的花哨叫法。对于每一个像素，它会调用你的片段着色器询问你使用什么颜色。 你通过给片段着色器的一个特殊变量gl_FragColor设置一个颜色值，实现自定义像素颜色。</p>\n<h2 id=\"关于buffer和attribute的代码是干什么的\">关于buffer和attribute的代码是干什么的 </h2>\n<p>缓冲操作是在GPU上获取顶点和其他顶点数据的一种方式。 gl.createBuffer创建一个缓冲；gl.bindBuffer是设置缓冲为当前使用缓冲； gl.bufferData将数据拷贝到缓冲，这个操作一般在初始化完成。</p>\n<pre data-role=\"codeBlock\" data-info=\"js\" class=\"language-javascript js\"><code><span class=\"token keyword keyword-var\">var</span> positionLocation <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getAttribLocation</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span> <span class=\"token string\">\"a_position\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-var\">var</span> colorLocation <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getAttribLocation</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span> <span class=\"token string\">\"a_color\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngl<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">enableVertexAttribArray</span><span class=\"token punctuation\">(</span><span class=\"token dom variable\">location</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngl<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">bindBuffer</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">ARRAY_BUFFER</span><span class=\"token punctuation\">,</span> someBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngl<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">vertexAttribPointer</span><span class=\"token punctuation\">(</span><span class=\"token dom variable\">location</span><span class=\"token punctuation\">,</span>numComponents<span class=\"token punctuation\">,</span> typeOfData<span class=\"token punctuation\">,</span> normalizeFlag<span class=\"token punctuation\">,</span> strideToNextPieceOfData<span class=\"token punctuation\">,</span> offsetIntoBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><h3 id=\"vertexattribpointer-中的-normalizeflag-参数是什么意思\">vertexAttribPointer 中的 normalizeFlag 参数是什么意思？ </h3>\n<p>标准化标记（normalizeFlag）适用于所有非浮点型数据。如果传递false就解读原数据类型。 BYTE 类型的范围是从 -128 到 127，UNSIGNED_BYTE 类型的范围是从 0 到 255， SHORT 类型的范围是从 -32768 到 32767，等等...</p>\n<p>如果标准化标记设为true，BYTE 数据的值(-128 to 127)将会转换到 -1.0 到 +1.0 之间， UNSIGNED_BYTE (0 to 255) 变为 0.0 到 +1.0 之间，SHORT 也是转换到 -1.0 到 +1.0 之间， 但比 BYTE 精确度高</p>\n\n      </div>\n      <div class=\"md-sidebar-toc\">\n<div class=\"md-toc\">\n<details style=\"padding:0;;padding-left:0px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#webgl-工作原理\" class=\"md-toc-link\"><p>webGL 工作原理</p>\n</a>\n          </summary>\n        <div>\n          <details style=\"padding:0;;padding-left:24px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#关于buffer和attribute的代码是干什么的\" class=\"md-toc-link\"><p>关于buffer和attribute的代码是干什么的</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#vertexattribpointer-中的-normalizeflag-参数是什么意思\" class=\"md-toc-link\">\n            <p>vertexAttribPointer 中的 normalizeFlag 参数是什么意思？</p>\n\n          </a></div>\n        </div>\n      </details>\n    \n        </div>\n      </details>\n    \n</div>\n</div>\n      <a id=\"sidebar-toc-btn\">≡</a>\n    \n    \n    \n    \n    \n    \n<script>\n\nvar sidebarTOCBtn = document.getElementById('sidebar-toc-btn')\nsidebarTOCBtn.addEventListener('click', function(event) {\n  event.stopPropagation()\n  if (document.body.hasAttribute('html-show-sidebar-toc')) {\n    document.body.removeAttribute('html-show-sidebar-toc')\n  } else {\n    document.body.setAttribute('html-show-sidebar-toc', true)\n  }\n})\n</script>\n      \n  \n    "},{"id":"10029_100002","type":"chapter","name":".WebGL_着色器和GLSL","fullPath":"F:\\passerby\\web\\webGL\\3.WebGL_着色器和GLSL.md","url":"/chapter/10029_100002","content":"\n    \n    \n      <div class=\"crossnote markdown-preview  \">\n      \n<h1 id=\"webgl着色器和glsl\">webGL着色器和GLSL </h1>\n<h2 id=\"顶点着色器\">顶点着色器 </h2>\n<p>一个顶点着色器的工作是生成裁剪空间坐标值</p>\n<pre data-role=\"codeBlock\" data-info=\"c\" class=\"language-c c\"><code><span class=\"token keyword keyword-void\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    gl_Position <span class=\"token operator\">=</span> doMathToMakeClipspaceCoordinates\n<span class=\"token punctuation\">}</span>\n\n</code></pre><p>每个顶点调用一次顶点着色器，每次调用都需要设置一个特殊的全局变量gl_Position,该变量的值就是裁剪空间坐标值</p>\n<p>顶点着色器需要的数据，可以通过一下三种方式获得</p>\n<ol>\n<li>Attributes属性（从缓冲中获取的数据）</li>\n<li>Uniforms全局变量（在一次绘制中对所有的顶点保持一致值）</li>\n<li>Textures纹理（从像素或纹理元素中获取的数据）</li>\n</ol>\n<h3 id=\"attributes属性\">Attributes属性 </h3>\n<pre data-role=\"codeBlock\" data-info=\"js\" class=\"language-javascript js\"><code><span class=\"token keyword keyword-var\">var</span> buffer <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngl<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">bindBuffer</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">ARRAY_BUFFER</span><span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngl<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">bufferData</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">ARRAY_BUFFER</span><span class=\"token punctuation\">,</span> somedata<span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">STATIC_DRAW</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-var\">var</span> position <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getAttribLocation</span><span class=\"token punctuation\">(</span>someShaderProgram<span class=\"token punctuation\">,</span> <span class=\"token string\">\"a_position\"</span><span class=\"token punctuation\">)</span>\ngl<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">enableVertexAttribArray</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">)</span>\ngl<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">vertexAttribPointer</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">,</span> numComponents<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> stride<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">)</span>\n</code></pre><h3 id=\"uniforms全局变量\">Uniforms全局变量 </h3>\n<p>全局变量在一次绘制过程中传递给着色器的值都一样，</p>\n<pre data-role=\"codeBlock\" data-info=\"c\" class=\"language-c c\"><code>attribute vec4 a_position<span class=\"token punctuation\">;</span>\nuniform vec4 u_offset<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword keyword-void\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    gl_Position <span class=\"token operator\">=</span> a_position <span class=\"token operator\">+</span> u_offset<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre><pre data-role=\"codeBlock\" data-info=\"js\" class=\"language-javascript js\"><code><span class=\"token keyword keyword-var\">var</span> offsetLoc <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getUniformLocation</span><span class=\"token punctuation\">(</span>someProgram<span class=\"token punctuation\">,</span> <span class=\"token string\">\"u_offset\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngl<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">uniform4fv</span><span class=\"token punctuation\">(</span>offsetLoc<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 向右偏移一半屏幕宽度</span>\n</code></pre><h2 id=\"片段着色器\">片段着色器 </h2>\n<p>一个片段着色器的工作是为当前光栅化的像素提供颜色值，通常是以下的形式</p>\n<pre data-role=\"codeBlock\" data-info=\"c\" class=\"language-c c\"><code>precision mediump <span class=\"token keyword keyword-float\">float</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword keyword-void\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    gl_FragColor <span class=\"token operator\">=</span> doMathToMakeAColor\n<span class=\"token punctuation\">}</span>\n\n</code></pre><p>每个像素都将调用一次片段着色器，每次调用需要从你设置的特殊全局变量gl_FragColor中获取颜色信息。片段着色器所需的数据，可以通过以下三种方式获取</p>\n<ol>\n<li>Uniforms全局变量</li>\n<li>Textures纹理</li>\n<li>Varyings可变量</li>\n</ol>\n<h3 id=\"uniforms-全局变量\">Uniforms 全局变量 </h3>\n<p>全局变量在一次绘制过程中传递给着色器的值都一样，</p>\n<h3 id=\"textures纹理\">Textures纹理 </h3>\n<p>在着色器中获取纹理信息，可以先创建一个sampler2D类型全局变量，然后用GLSL方法texture2D 从纹理中提取信息</p>\n<pre data-role=\"codeBlock\" data-info=\"c\" class=\"language-c c\"><code>precision mediump <span class=\"token keyword keyword-float\">float</span><span class=\"token punctuation\">;</span>\n \nuniform sampler2D u_texture<span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword keyword-void\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   vec2 texcoord <span class=\"token operator\">=</span> <span class=\"token function\">vec2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 获取纹理中心的值</span>\n   gl_FragColor <span class=\"token operator\">=</span> <span class=\"token function\">texture2D</span><span class=\"token punctuation\">(</span>u_texture<span class=\"token punctuation\">,</span> texcoord<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre><pre data-role=\"codeBlock\" data-info=\"js\" class=\"language-javascript js\"><code><span class=\"token keyword keyword-var\">var</span> tex <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createTexture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngl<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">bindTexture</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXTURE_2D</span><span class=\"token punctuation\">,</span> tex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-var\">var</span> level <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-var\">var</span> width <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-var\">var</span> height <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-var\">var</span> data <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n   <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 一个红色的像素</span>\n   <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 一个绿色的像素</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngl<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">texImage2D</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXTURE_2D</span><span class=\"token punctuation\">,</span> level<span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">RGBA</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">RGBA</span><span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">UNSIGNED_BYTE</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngl<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">texParameteri</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXTURE_2D</span><span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXTURE_MIN_FILTER</span><span class=\"token punctuation\">,</span> gl<span class=\"token punctuation\">.</span><span class=\"token constant\">LINEAR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-var\">var</span> someSamplerLoc <span class=\"token operator\">=</span> gl<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getUniformLocation</span><span class=\"token punctuation\">(</span>someProgram<span class=\"token punctuation\">,</span> <span class=\"token string\">\"u_texture\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-var\">var</span> unit <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 挑选一个纹理单元</span>\ngl<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">activeTexture</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXTURE0</span> <span class=\"token operator\">+</span> unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngl<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">bindTexture</span><span class=\"token punctuation\">(</span>gl<span class=\"token punctuation\">.</span><span class=\"token constant\">TEXTURE_2D</span><span class=\"token punctuation\">,</span> tex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngl<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">uniform1i</span><span class=\"token punctuation\">(</span>someSamplerLoc<span class=\"token punctuation\">,</span> unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><h3 id=\"varyings-可变量\">Varyings 可变量 </h3>\n<p>可变量是一种顶点着色器给片段着色器传值的方式</p>\n<p>为了使用可变量，要在两个着色器中定义同名的可变量。 给顶点着色器中可变量设置的值，会作为参考值进行内插，在绘制像素时传给片段着色器的可变量</p>\n<pre data-role=\"codeBlock\" data-info=\"c\" class=\"language-c c\"><code>attribute vec4 a_position<span class=\"token punctuation\">;</span>\n \nuniform vec4 u_offset<span class=\"token punctuation\">;</span>\n \nvarying vec4 v_positionWithOffset<span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword keyword-void\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  gl_Position <span class=\"token operator\">=</span> a_position <span class=\"token operator\">+</span> u_offset<span class=\"token punctuation\">;</span>\n  v_positionWithOffset <span class=\"token operator\">=</span> a_position <span class=\"token operator\">+</span> u_offset<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre><pre data-role=\"codeBlock\" data-info=\"c\" class=\"language-c c\"><code>precision mediump <span class=\"token keyword keyword-float\">float</span><span class=\"token punctuation\">;</span>\n \nvarying vec4 v_positionWithOffset<span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword keyword-void\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 从裁剪空间 (-1 &lt;-&gt; +1) 转换到颜色空间 (0 -&gt; 1).</span>\n  vec4 color <span class=\"token operator\">=</span> v_positionWithOffset <span class=\"token operator\">*</span> <span class=\"token number\">0.5</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">;</span>\n  gl_FragColor <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><h2 id=\"glsl\">GLSL </h2>\n<p>GLSL全称是 Graphics Library Shader Language （图形库着色器语言），是着色器使用的语言。 它有一些不同于JavaScript的特性，主要目的是为栅格化图形提供常用的计算功能。 所以它内建的数据类型例如vec2, vec3和 vec4分别代表两个值，三个值和四个值， 类似的还有mat2, mat3 和 mat4 分别代表 2x2, 3x3 和 4x4 矩阵。</p>\n<p>值得注意的是GLSL是一个强类型的语言</p>\n\n      </div>\n      <div class=\"md-sidebar-toc\">\n<div class=\"md-toc\">\n<details style=\"padding:0;;padding-left:0px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#webgl着色器和glsl\" class=\"md-toc-link\"><p>webGL着色器和GLSL</p>\n</a>\n          </summary>\n        <div>\n          <details style=\"padding:0;;padding-left:24px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#顶点着色器\" class=\"md-toc-link\"><p>顶点着色器</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#attributes属性\" class=\"md-toc-link\">\n            <p>Attributes属性</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#uniforms全局变量\" class=\"md-toc-link\">\n            <p>Uniforms全局变量</p>\n\n          </a></div>\n        </div>\n      </details>\n    <details style=\"padding:0;;padding-left:24px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#片段着色器\" class=\"md-toc-link\"><p>片段着色器</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#uniforms-全局变量\" class=\"md-toc-link\">\n            <p>Uniforms 全局变量</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#textures纹理\" class=\"md-toc-link\">\n            <p>Textures纹理</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#varyings-可变量\" class=\"md-toc-link\">\n            <p>Varyings 可变量</p>\n\n          </a></div>\n        </div>\n      </details>\n    <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#glsl\" class=\"md-toc-link\">\n            <p>GLSL</p>\n\n          </a></div>\n        </div>\n      </details>\n    \n</div>\n</div>\n      <a id=\"sidebar-toc-btn\">≡</a>\n    \n    \n    \n    \n    \n    \n<script>\n\nvar sidebarTOCBtn = document.getElementById('sidebar-toc-btn')\nsidebarTOCBtn.addEventListener('click', function(event) {\n  event.stopPropagation()\n  if (document.body.hasAttribute('html-show-sidebar-toc')) {\n    document.body.removeAttribute('html-show-sidebar-toc')\n  } else {\n    document.body.setAttribute('html-show-sidebar-toc', true)\n  }\n})\n</script>\n      \n  \n    "},{"id":"10029_100003","type":"chapter","name":".WebGL_图像处理","fullPath":"F:\\passerby\\web\\webGL\\4.WebGL_图像处理.md","url":"/chapter/10029_100003","content":"\n    \n    \n      <div class=\"crossnote markdown-preview  \">\n      \n<h1 id=\"webgl-图像处理\">WebGL 图像处理 </h1>\n\n      </div>\n      <div class=\"md-sidebar-toc\">\n<div class=\"md-toc\">\n<div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:18px\">\n          <a href=\"#webgl-图像处理\" class=\"md-toc-link\">\n            <p>WebGL 图像处理</p>\n\n          </a></div>\n</div>\n</div>\n      <a id=\"sidebar-toc-btn\">≡</a>\n    \n    \n    \n    \n    \n    \n<script>\n\nvar sidebarTOCBtn = document.getElementById('sidebar-toc-btn')\nsidebarTOCBtn.addEventListener('click', function(event) {\n  event.stopPropagation()\n  if (document.body.hasAttribute('html-show-sidebar-toc')) {\n    document.body.removeAttribute('html-show-sidebar-toc')\n  } else {\n    document.body.setAttribute('html-show-sidebar-toc', true)\n  }\n})\n</script>\n      \n  \n    "}],"type":"book","url":"/book/10029"},"chapterInfo":{"id":"10029_100003","type":"chapter","name":".WebGL_图像处理","fullPath":"F:\\passerby\\web\\webGL\\4.WebGL_图像处理.md","url":"/chapter/10029_100003","content":"\n    \n    \n      <div class=\"crossnote markdown-preview  \">\n      \n<h1 id=\"webgl-图像处理\">WebGL 图像处理 </h1>\n\n      </div>\n      <div class=\"md-sidebar-toc\">\n<div class=\"md-toc\">\n<div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:18px\">\n          <a href=\"#webgl-图像处理\" class=\"md-toc-link\">\n            <p>WebGL 图像处理</p>\n\n          </a></div>\n</div>\n</div>\n      <a id=\"sidebar-toc-btn\">≡</a>\n    \n    \n    \n    \n    \n    \n<script>\n\nvar sidebarTOCBtn = document.getElementById('sidebar-toc-btn')\nsidebarTOCBtn.addEventListener('click', function(event) {\n  event.stopPropagation()\n  if (document.body.hasAttribute('html-show-sidebar-toc')) {\n    document.body.removeAttribute('html-show-sidebar-toc')\n  } else {\n    document.body.setAttribute('html-show-sidebar-toc', true)\n  }\n})\n</script>\n      \n  \n    "}},"__N_SSG":true}