{"pageProps":{"bookInfo":{"id":"10033","name":"IndexedDB","fullPath":"D:\\personal\\文档\\passerby\\database\\IndexedDB","chapterList":[{"id":"10033_100000","type":"chapter","name":"基础","fullPath":"D:\\personal\\文档\\passerby\\database\\IndexedDB\\01基础.md","url":"/chapter/10033_100000.html","content":"\n    \n    \n      <div class=\"crossnote markdown-preview  \">\n      \n<h1 id=\"indexeddb\">IndexedDB </h1>\n<blockquote>\n<p>一款基于浏览器客户端实现的存储大量的结构化数据的事务型数据库系统, 是一种底层API。该 API 使用索引实现对数据的高性能搜索；<br>\nIndexedDB 是一个基于 JavaScript 的面向对象数据库</p>\n</blockquote>\n<p>IndexedDB 执行的操作是异步执行的，以免阻塞应用程序</p>\n<h2 id=\"使用步骤\">使用步骤 </h2>\n<ol>\n<li>打开数据库</li>\n<li>在数据库中创建一个对象存储</li>\n<li>启动事务，并发送一个请求来执行一些数据库操作</li>\n<li>通过监听DOM事件等待操作完成</li>\n<li>对结果进行一些操作</li>\n</ol>\n<h3 id=\"打开数据库\">打开数据库 </h3>\n<pre data-role=\"codeBlock\" data-info=\"javascript\" class=\"language-javascript javascript\"><code><span class=\"token keyword keyword-const\">const</span> dbFactory <span class=\"token operator\">=</span> <span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">indexedDB</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TestDatabase\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword keyword-let\">let</span> dbInstance<span class=\"token punctuation\">;</span>\ndbFactory<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span><span class=\"token arrow operator\">=&gt;</span><span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">数据库错误：</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>event<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">errorCode</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\ndbFactory<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"success\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span><span class=\"token arrow operator\">=&gt;</span><span class=\"token punctuation\">{</span>\n    dbInstance <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span><span class=\"token property-access\">target</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">result</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre><h3 id=\"在数据库中创建一个对象存储\">在数据库中创建一个对象存储 </h3>\n<p>IndexedDB 使用对象存储而不是表，并且一个数据库可以包含任意数量的对象存储。每当一个值被存入一个对象存储时，它会与一个键相关联。键的提供可以有几种不同的方法，这取决于对象存储是使用键路径还是键生成器</p>\n<table>\n<thead>\n<tr>\n<th>键路径</th>\n<th>键生成器</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>启用</td>\n<td>禁用</td>\n<td>可以保存任意类型的值，甚至是像数字和字符串这种原始值。每当我们想要增加一个新值的时候，必须提供一个单独的键参数</td>\n</tr>\n<tr>\n<td>启用</td>\n<td>禁用</td>\n<td>只能保存 JavaScript 对象。这些对象必须具有一个和键路径同名的属性</td>\n</tr>\n<tr>\n<td>禁用</td>\n<td>启用</td>\n<td>可以保存任意类型的值。键会为我们自动生成，或者如果你想要使用一个特定键的话你可以提供一个单独的键参数</td>\n</tr>\n<tr>\n<td>启用</td>\n<td>启用</td>\n<td>只能保存 JavaScript 对象。通常一个键被生成的同时，生成的键的值会被存储在对象中的一个和键路径同名的属性中。然而，如果已存在该属性，该属性的值将被用作键而不会生成一个新的键</td>\n</tr>\n</tbody>\n</table>\n<pre data-role=\"codeBlock\" data-info=\"javascript\" class=\"language-javascript javascript\"><code><span class=\"token keyword keyword-const\">const</span> customerData <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">ssn</span><span class=\"token operator\">:</span> <span class=\"token string\">\"444-44-4444\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Bill\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">email</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bill@company.com\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">ssn</span><span class=\"token operator\">:</span> <span class=\"token string\">\"555-55-5555\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Donna\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">email</span><span class=\"token operator\">:</span> <span class=\"token string\">\"donna@home.org\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword keyword-const\">const</span> objectStore <span class=\"token operator\">=</span> dbInstance<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createObjectStore</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"customers\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">keyPath</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ssn\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobjectStore<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createIndex</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">unique</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobjectStore<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createIndex</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"email\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"email\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">unique</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobjectStore<span class=\"token punctuation\">.</span><span class=\"token property-access\">transaction</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">oncomplete</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 将数据保存到新创建的对象存储中。</span>\n    <span class=\"token keyword keyword-const\">const</span> customerObjectStore <span class=\"token operator\">=</span> dbInstance\n      <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">transaction</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"customers\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"readwrite\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">objectStore</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"customers\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    customerData<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">customer</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      customerObjectStore<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">add</span><span class=\"token punctuation\">(</span>customer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n      </div>\n      <div class=\"md-sidebar-toc\">\n<div class=\"md-toc\">\n<details style=\"padding:0;;padding-left:0px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#indexeddb\" class=\"md-toc-link\"><p>IndexedDB</p>\n</a>\n          </summary>\n        <div>\n          <details style=\"padding:0;;padding-left:24px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#使用步骤\" class=\"md-toc-link\"><p>使用步骤</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#打开数据库\" class=\"md-toc-link\">\n            <p>打开数据库</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#在数据库中创建一个对象存储\" class=\"md-toc-link\">\n            <p>在数据库中创建一个对象存储</p>\n\n          </a></div>\n        </div>\n      </details>\n    \n        </div>\n      </details>\n    \n</div>\n</div>\n      <a id=\"sidebar-toc-btn\">≡</a>\n    \n    \n    \n    \n    \n    \n<script>\n\nvar sidebarTOCBtn = document.getElementById('sidebar-toc-btn')\nsidebarTOCBtn.addEventListener('click', function(event) {\n  event.stopPropagation()\n  if (document.body.hasAttribute('html-show-sidebar-toc')) {\n    document.body.removeAttribute('html-show-sidebar-toc')\n  } else {\n    document.body.setAttribute('html-show-sidebar-toc', true)\n  }\n})\n</script>\n      \n  \n    "},{"id":"10033_100001","type":"chapter","name":"浏览器存储限制和清理标准","fullPath":"D:\\personal\\文档\\passerby\\database\\IndexedDB\\02浏览器存储限制和清理标准.md","url":"/chapter/10033_100001.html","content":"\n    \n    \n      <div class=\"crossnote markdown-preview  \">\n      \n<h1 id=\"浏览器存储限制和清理标准\">浏览器存储限制和清理标准 </h1>\n<p>一般来说，数据存储的类型主要有以下两种</p>\n<ol>\n<li>持久化存储：这种数据是希望长久保留的，只有的当用户选择清除才会被删除掉</li>\n<li>临时存储：这种数据不用保存很久，当最近一次使用时储存限制达到限制大小就会被自动清理掉</li>\n</ol>\n<h2 id=\"数据存储在哪里\">数据存储在哪里？ </h2>\n<p>每种存储类型代表一个单独的存储库。这是用户 Firefox 配置文件下目录的实际映射</p>\n<ul>\n<li><strong>profile</strong>/storage——配额管理器维护的主要顶级目录</li>\n<li><strong>profile</strong>/storage/permanent——持久数据存储库</li>\n<li><strong>profile</strong>/storage/temporary——临时数据存储库</li>\n<li><strong>profile</strong>/storage/default——默认数据存储库</li>\n</ul>\n<h2 id=\"数据储存限制\">数据储存限制 </h2>\n<p>浏览器的最大存储空间是动态的——它取决于你的硬盘大小。全局限制为可用磁盘空间的50％。在Firefox中，一个名为Quota Manager的内部浏览器工具会跟踪每个源用尽的磁盘空间，并在必要时删除数据。</p>\n<p>因此，如果你的硬盘驱动器是500GB，那么浏览器的总存储容量为 250GB。如果超过此范围，则会发起称为源回收的过程，删除整个源的数据，直到存储量再次低于限制。删除源数据没有只删一部分的说法——因为这样可能会导致不一致的问题。</p>\n<p>还有另一个限制称为组限制——这被定义为全局限制的20％，但它至少有10MB，最大为 2GB。每个源都是一组（源组）的一部分。</p>\n<h2 id=\"lru-策略\">LRU 策略 </h2>\n<p>当可用磁盘空间已满时，配额管理器将根据 LRU 策略开始清除数据——最近最少使用的源将首先被删除，然后是下一个，直到浏览器不再超过限制。</p>\n<p>我们使用临时存储跟踪每个源的“上次访问时间”。一旦达到临时存储的全局限制（之后会有更多限制），我们将尝试查找所有当前未使用的源（即没有打开选项卡/应用程序的那些来保持打开的数据存储）。然后根据“上次访问时间”对它们进行排序。然后删除最近最少使用的源，直到有足够的空间来满足触发此源回收的请求</p>\n\n      </div>\n      <div class=\"md-sidebar-toc\">\n<div class=\"md-toc\">\n<details style=\"padding:0;;padding-left:0px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#浏览器存储限制和清理标准\" class=\"md-toc-link\"><p>浏览器存储限制和清理标准</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#数据存储在哪里\" class=\"md-toc-link\">\n            <p>数据存储在哪里？</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#数据储存限制\" class=\"md-toc-link\">\n            <p>数据储存限制</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#lru-策略\" class=\"md-toc-link\">\n            <p>LRU 策略</p>\n\n          </a></div>\n        </div>\n      </details>\n    \n</div>\n</div>\n      <a id=\"sidebar-toc-btn\">≡</a>\n    \n    \n    \n    \n    \n    \n<script>\n\nvar sidebarTOCBtn = document.getElementById('sidebar-toc-btn')\nsidebarTOCBtn.addEventListener('click', function(event) {\n  event.stopPropagation()\n  if (document.body.hasAttribute('html-show-sidebar-toc')) {\n    document.body.removeAttribute('html-show-sidebar-toc')\n  } else {\n    document.body.setAttribute('html-show-sidebar-toc', true)\n  }\n})\n</script>\n      \n  \n    "},{"id":"10033_100002","type":"chapter","name":"接口","fullPath":"D:\\personal\\文档\\passerby\\database\\IndexedDB\\03接口.md","url":"/chapter/10033_100002.html","content":"\n    \n    \n      <div class=\"crossnote markdown-preview  \">\n      \n<h1 id=\"indexeddb的接口\">indexedDB的接口 </h1>\n<h2 id=\"idbcursor\">IDBCursor </h2>\n<p>IDBCursor 接口表示一个游标，用于遍历或迭代数据库中的多条记录</p>\n<p>游标有一个源，指示需要遍历哪一个索引或者对象存储区。它在所属区间范围内有一个位置，根据记录健（存储字段）的顺序递增或递减方向移动。游标使应用程序能够异步处理在游标范围内的所有记录</p>\n<p><img src=\"/assets/100000165.png\" alt=\"IDBCursor\"></p>\n<h2 id=\"idbdatabase\">IDBDatabase </h2>\n<p>提供一个到 数据库的连接; 你可以使用 IDBDatabase 对象在数据库中打开一个transaction , 然后进行操作或者删除数据库中的对象。这是唯一一个能够访问和管理数据库版本的接口。</p>\n<p><img src=\"/assets/100000166.png\" alt=\"IDBDatabase\"></p>\n<h2 id=\"idbfactory\">IDBFactory </h2>\n<p>让程序可以异步存取 indexed databases,你可以通过这个对象而不是直接使用IDBFactory接口打开——创建或者连接——和删除一个数据库。</p>\n<p><img src=\"/assets/100000167.png\" alt=\"IDBFactory\"></p>\n<h2 id=\"idbindex\">IDBIndex </h2>\n<p>提供了异步获取数据库中一个index的功能。index 是一种用于在另一个 object store 中查找记录的 object store，其被称为被引用的 object store。你可以通过使用该接口来取回数据。</p>\n<p>index 是一个持久的键 - 值存储，其中其记录的值部分是被引用 object store 中的 record 的关键部分。在 object store 中新增、更新或是删除 records 时，索引中的 records 将自动填充。索引中的每条记录只能指向其引用的 object store 中的唯一一条记录，但是多个索引可以引用同一个 object store。当 object store 变更时，所有引用 object store 的索引都会自动更新。</p>\n<p><img src=\"/assets/100000168.png\" alt=\"IDBIndex\"></p>\n<h2 id=\"idbkeyrange\">IDBKeyRange </h2>\n<p>表示一些数据类型上的键的连续间隔。可以使用一个键或某个范围的键从IDBObjectStore 和IDBIndex 对象中检索记录。你也可以指定键的上界和下界来限制范围</p>\n<p>键范围可以是单个值，也可以是具有上界、下界或端点的范围。如果键范围同时有上界或下界，那么它是有界的，否则是无界的。有界键范围可以是开放的（不包含端点）或闭合的（包含了端点）。要检索一定范围内的所有键值，可以使用以下的代码结构：</p>\n<p><img src=\"/assets/100000169.png\" alt=\"IDBKeyRange\"></p>\n<h2 id=\"idbobjectstore\">IDBObjectStore </h2>\n<p>IDBObjectStore 接口表示数据库中的 一个 对象库 (object store) 。对象库中的记录根据其键值进行排序。这种排序可以实现快速插入，查找和有序检索</p>\n<p>为了方便理解，可以把“对象存储空间”想象成关系数据库的“表”结构，下文也会把对象存储空间称为表</p>\n<p><img src=\"/assets/100000170.png\" alt=\"IDBObjectStore\"></p>\n<h2 id=\"idbopendbrequest\">IDBOpenDBRequest </h2>\n<p>IndexedDB API的IDBOpenDBRequest接口提供了对打开或删除数据库请求结果的访问(使用IDBFactory执行)。open和IDBFactory.deleteDatabase，使用特定的事件处理程序属性<br>\n事件： blocked<br>\n当打开的数据库连接阻止同一数据库上的版本更改事务时触发。也可以通过onblocked属性获得。</p>\n<p>事件： upgradeneeded<br>\n当尝试打开版本号高于其当前版本的数据库时触发。也可以通过onupgradenneeded属性获得。</p>\n<h2 id=\"idbrequest\">IDBRequest </h2>\n<p>提供了根据绑定事件处理函数访问结果集的方法。其中结果集来自对数据库和数据库对象发起的异步查询。对数据库的读写操作都是通过 request 的方式来实现</p>\n<p>request 对象初始时不包括任何关于操作结果的信息，当 request 上的事件触发时，可以通过 IDBRequest 实例上的事件处理函数访问相关信息</p>\n<p>所有的异步方法返回一个 request 对象。如果 request 对象成功执行了，结果可以通过 result 属性访问到，并且该 request 对象上会触发 success 事件。如果操作中有错误发生，一个 error 事件会触发，并且会通过 result 属性抛出一个异常。</p>\n<h2 id=\"idbtransaction\">IDBTransaction </h2>\n<p>异步事务使用数据库中的事件对象属性。所有的读取和写入数据均在事务中完成。由IDBDatabase发起事务，通过IDBTransaction 来设置事务的模式（例如：是否只读readonly或读写readwrite），以及通过IDBObjectStore来发起一个请求。同时你也可以使用它来中止事务</p>\n<h2 id=\"idbversionchangeevent\">IDBVersionChangeEvent </h2>\n<p>IndexedDB API的IDBVersionChangeEvent接口指示数据库的版本发生了变化，这是onupgradenrequired事件处理函数的结果。继承自Event</p>\n<p>只有2个属性</p>\n<ul>\n<li>oldVersion</li>\n<li>newVersion</li>\n</ul>\n\n      </div>\n      <div class=\"md-sidebar-toc\">\n<div class=\"md-toc\">\n<details style=\"padding:0;;padding-left:0px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#indexeddb的接口\" class=\"md-toc-link\"><p>indexedDB的接口</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#idbcursor\" class=\"md-toc-link\">\n            <p>IDBCursor</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#idbdatabase\" class=\"md-toc-link\">\n            <p>IDBDatabase</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#idbfactory\" class=\"md-toc-link\">\n            <p>IDBFactory</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#idbindex\" class=\"md-toc-link\">\n            <p>IDBIndex</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#idbkeyrange\" class=\"md-toc-link\">\n            <p>IDBKeyRange</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#idbobjectstore\" class=\"md-toc-link\">\n            <p>IDBObjectStore</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#idbopendbrequest\" class=\"md-toc-link\">\n            <p>IDBOpenDBRequest</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#idbrequest\" class=\"md-toc-link\">\n            <p>IDBRequest</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#idbtransaction\" class=\"md-toc-link\">\n            <p>IDBTransaction</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#idbversionchangeevent\" class=\"md-toc-link\">\n            <p>IDBVersionChangeEvent</p>\n\n          </a></div>\n        </div>\n      </details>\n    \n</div>\n</div>\n      <a id=\"sidebar-toc-btn\">≡</a>\n    \n    \n    \n    \n    \n    \n<script>\n\nvar sidebarTOCBtn = document.getElementById('sidebar-toc-btn')\nsidebarTOCBtn.addEventListener('click', function(event) {\n  event.stopPropagation()\n  if (document.body.hasAttribute('html-show-sidebar-toc')) {\n    document.body.removeAttribute('html-show-sidebar-toc')\n  } else {\n    document.body.setAttribute('html-show-sidebar-toc', true)\n  }\n})\n</script>\n      \n  \n    "}],"type":"book","url":"/chapter/10033_100000.html"},"chapterInfo":{"id":"10033_100001","type":"chapter","name":"浏览器存储限制和清理标准","fullPath":"D:\\personal\\文档\\passerby\\database\\IndexedDB\\02浏览器存储限制和清理标准.md","url":"/chapter/10033_100001.html","content":"\n    \n    \n      <div class=\"crossnote markdown-preview  \">\n      \n<h1 id=\"浏览器存储限制和清理标准\">浏览器存储限制和清理标准 </h1>\n<p>一般来说，数据存储的类型主要有以下两种</p>\n<ol>\n<li>持久化存储：这种数据是希望长久保留的，只有的当用户选择清除才会被删除掉</li>\n<li>临时存储：这种数据不用保存很久，当最近一次使用时储存限制达到限制大小就会被自动清理掉</li>\n</ol>\n<h2 id=\"数据存储在哪里\">数据存储在哪里？ </h2>\n<p>每种存储类型代表一个单独的存储库。这是用户 Firefox 配置文件下目录的实际映射</p>\n<ul>\n<li><strong>profile</strong>/storage——配额管理器维护的主要顶级目录</li>\n<li><strong>profile</strong>/storage/permanent——持久数据存储库</li>\n<li><strong>profile</strong>/storage/temporary——临时数据存储库</li>\n<li><strong>profile</strong>/storage/default——默认数据存储库</li>\n</ul>\n<h2 id=\"数据储存限制\">数据储存限制 </h2>\n<p>浏览器的最大存储空间是动态的——它取决于你的硬盘大小。全局限制为可用磁盘空间的50％。在Firefox中，一个名为Quota Manager的内部浏览器工具会跟踪每个源用尽的磁盘空间，并在必要时删除数据。</p>\n<p>因此，如果你的硬盘驱动器是500GB，那么浏览器的总存储容量为 250GB。如果超过此范围，则会发起称为源回收的过程，删除整个源的数据，直到存储量再次低于限制。删除源数据没有只删一部分的说法——因为这样可能会导致不一致的问题。</p>\n<p>还有另一个限制称为组限制——这被定义为全局限制的20％，但它至少有10MB，最大为 2GB。每个源都是一组（源组）的一部分。</p>\n<h2 id=\"lru-策略\">LRU 策略 </h2>\n<p>当可用磁盘空间已满时，配额管理器将根据 LRU 策略开始清除数据——最近最少使用的源将首先被删除，然后是下一个，直到浏览器不再超过限制。</p>\n<p>我们使用临时存储跟踪每个源的“上次访问时间”。一旦达到临时存储的全局限制（之后会有更多限制），我们将尝试查找所有当前未使用的源（即没有打开选项卡/应用程序的那些来保持打开的数据存储）。然后根据“上次访问时间”对它们进行排序。然后删除最近最少使用的源，直到有足够的空间来满足触发此源回收的请求</p>\n\n      </div>\n      <div class=\"md-sidebar-toc\">\n<div class=\"md-toc\">\n<details style=\"padding:0;;padding-left:0px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#浏览器存储限制和清理标准\" class=\"md-toc-link\"><p>浏览器存储限制和清理标准</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#数据存储在哪里\" class=\"md-toc-link\">\n            <p>数据存储在哪里？</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#数据储存限制\" class=\"md-toc-link\">\n            <p>数据储存限制</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#lru-策略\" class=\"md-toc-link\">\n            <p>LRU 策略</p>\n\n          </a></div>\n        </div>\n      </details>\n    \n</div>\n</div>\n      <a id=\"sidebar-toc-btn\">≡</a>\n    \n    \n    \n    \n    \n    \n<script>\n\nvar sidebarTOCBtn = document.getElementById('sidebar-toc-btn')\nsidebarTOCBtn.addEventListener('click', function(event) {\n  event.stopPropagation()\n  if (document.body.hasAttribute('html-show-sidebar-toc')) {\n    document.body.removeAttribute('html-show-sidebar-toc')\n  } else {\n    document.body.setAttribute('html-show-sidebar-toc', true)\n  }\n})\n</script>\n      \n  \n    "}},"__N_SSG":true}