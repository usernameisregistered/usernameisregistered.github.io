{"pageProps":{"bookInfo":{"id":"10023","name":"数据结构与算法","fullPath":"F:\\passerby\\algorithm\\数据结构与算法","chapterList":[{"id":"10023_100000","type":"chapter","name":"引言","fullPath":"F:\\passerby\\algorithm\\数据结构与算法\\01引言.md","url":"/chapter/10023_100000","content":"\n    \n    \n      <div class=\"crossnote markdown-preview  \">\n      \n<h1 id=\"引言\">引言 </h1>\n<h2 id=\"数据结构的概念\">数据结构的概念 </h2>\n<p>数据结构主要研究数据（特别是非数值型数据）的组织、存储及运算方法</p>\n<p><strong>数据</strong>：是描述客观事物的数值、字符以及能输入计算机且能被处理的各种符号集合。<br>\n<strong>数据元素</strong>：是组成数据的基本单位。是数据集合的个体。<br>\n<strong>数据项</strong>是数据数据不可分割的最小单位。<br>\n<strong>数据对象</strong>：是性质相同的数据元素的集合，是数据的一个子集。<br>\n<strong>数据结构</strong>：是指相互之间存在一种或者多种特定关系的数据元素集合。<br>\n<strong>数据类型</strong>：是一组性质相同的值的集合，以及定义在这个值集合上的一组操作的总称。<br>\n<strong>抽象</strong>是对一种事物或一个系统的简化描述，它关注事物或系统的本质方面，而忽略非本质</p>\n<h3 id=\"抽象数据类型\">抽象数据类型 </h3>\n<blockquote>\n<p>抽象数据类型(abstract data type ADT)是指一个数学模型以及定义在该模型上的一组操作。</p>\n</blockquote>\n<h4 id=\"定义格式\">定义格式 </h4>\n<p>ADT &lt;ADT名称&gt;<br>\n{<br>\n数据对象：&lt; 数据对象的定义&gt;<br>\n结构关系：&lt; 结构关系的定义&gt;<br>\n基本操作：&lt; 基本操作的定义&gt;<br>\n}ADT &lt;ADT名称&gt;</p>\n<h4 id=\"基本操作的定义格式\">基本操作的定义格式 </h4>\n<p>&lt; 基本操作&gt;(参数表)<br>\n操作前提：&lt; 操作前提描述&gt;<br>\n操作结果：&lt; 操作结果描述&gt;</p>\n<p>例如：</p>\n<pre data-role=\"codeBlock\" data-info=\"ADT Linear_list\" class=\"language-adt ADT\"><code>{\n    数据对象：所有a,属于同一个数据对象，i = 1,2,....n;\n    结构关系：所有数据元素a存在次序关系\n    基本操作：设L为linear_list:\n            Initial(L)：初始化空线性表\n            Length(L): 求线性表的表长\n            Get(L,i)：求取线性表的第i个元素\n            Insert(L,i,b)：在线性表的第i个位置插入元素b\n            Delete(L,i): 删除线性表的第i个元素\n}\n</code></pre><h4 id=\"实现\">实现 </h4>\n<p>抽象数据类型的实现需要借助于高级语言，并且其具体实现也依赖于所选择的高级语言的功能。</p>\n<ol>\n<li>传统的面向过程的程序设计</li>\n<li>“包”“模型”的设计方法</li>\n<li>面向对象的程序设计</li>\n</ol>\n<h2 id=\"数据结构的内容\">数据结构的内容 </h2>\n<h3 id=\"数据的逻辑结构\">数据的逻辑结构 </h3>\n<p>数据的逻辑结构是指数据元素之间逻辑关系的描述。Data_Structure = (D,R),其中D是数据元素的有限集，R是D上关系的有限集</p>\n<p><strong>集合结构</strong>：结构中的数据元素之间除了同属于一个结构的关系外，没有任何的其他关系<br>\n<strong>线性结构</strong>：结构中的数据元素之间存在着一对一的线性关系<br>\n<strong>树型结构</strong>：结构中的数据元素之间存在着一对多的层次关系<br>\n<strong>网状结构</strong>：结构中的数据元素之间存在着多对多的任意关系，如图</p>\n<h3 id=\"数据的存储结构\">数据的存储结构 </h3>\n<p>数据的逻辑结构是从逻辑上来描述数据元素之间的关系，是独立于计算机的。然而讨论数据结构的目的是在计算机中实现对它的操作，因此还需要研究数据元素和数据元素之间的关系如何在计算机中表示，这就是数据的存储结构</p>\n<p>存储结构是逻辑关系的映像与元素本身的映像，是数据结构的实现；逻辑结构是数据结构的抽象</p>\n<p>计算机的存储器由很多存储单元组成，每个存储单元有唯一的地址。数据元素在计算机中用若干个二进制“位串”表示。</p>\n<p>数据元素之间的关系在计算机中有两种表示方法：<strong>顺序映像</strong>和<strong>非顺序映像</strong>，由此可得到两种不同的存储结构：<strong>顺序存储</strong>和<strong>链式存</strong>储。<br>\n顺序存储的特点是<em>借助元素在存储器中的相对位置来表示数据元素之间的逻辑关系</em>；<br>\n链式存储的特点是<em>借助指针表示数据元素之间的逻辑</em></p>\n<h3 id=\"数据的运算\">数据的运算 </h3>\n<p>数据结构就是研究一类数据的表示及其相关的运算操作，包括插入、删除、更新、查找等操作</p>\n<h2 id=\"算法\">算法 </h2>\n<p>算法就是解决特定问题而定义的的一系列操作步骤的集合（规则的有限集合）。</p>\n<h3 id=\"特性\">特性 </h3>\n<ul>\n<li><strong>有穷性</strong></li>\n<li><strong>确定性</strong></li>\n<li><strong>可行性</strong></li>\n<li><strong>有输入</strong></li>\n<li><strong>有输出</strong></li>\n</ul>\n<h3 id=\"评价标准\">评价标准 </h3>\n<ol>\n<li><strong>正确性</strong>：指算法能满足具体问题的要求，即对任何合法的输入，算法都会得出正确的结果</li>\n<li><strong>可读性</strong>：指算法被理解的难易程度。算法主要是为了人的阅读与交流，其次才是为计算机执行，因此算法应该更易于人的理解。另一方面，晦涩难读的程序易于隐藏较多错误而难以调试</li>\n<li><strong>健壮性（鲁棒性）</strong>：即对非法输入的抵抗能力</li>\n<li><strong>高效率与低存储量需求</strong>： 效率指的是算法执行时间，存储量指的是算法执行过程中所需的最大存储空间，两者均与问题的规模有关</li>\n</ol>\n<h3 id=\"描述\">描述 </h3>\n<p>描述算法的工具可以是自然语言、框图或高级程序设计语言。用高级程序设计语言描述算法有严格、准确的特点，但缺点是语言细节过多，所以一般采用类语言描述</p>\n<h3 id=\"性能分析\">性能分析 </h3>\n<p>一个算法的复杂性高低体现在运行该算法所需要的计算机资源的多少上面，所需的资源越多，则该算法的复杂性越高；反之，所需的资源越少，则该算法的复杂性越低。最重要的计算机资源是时间和空间资源。因此，算法的复杂性有<strong>时间复杂性</strong>和<strong>空间复杂性</strong>之分。</p>\n<p>通常有两种衡量算法效率的方法：<strong>事后统计法</strong>和<strong>事前分析估算法</strong>。事后统计法必须在计算机上实地运行程序，容易有其他因素掩盖算法本质；事前分析估算法则可以预先比较各种算法，以便均衡利弊而从中选出较优者。</p>\n<h4 id=\"时间复杂性\">时间复杂性 </h4>\n<p>一般情况下，算法中基本操作重复执行的次数是问题规模n的某个函数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>,算法的时间度量记作<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(n)=O(f(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">))</span></span></span></span>, 它表示随问题规模n的增大，算法执行时间的增长率和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>的增长率相同。称为算法的<em>时间复杂度</em></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi></mrow><annotation encoding=\"application/x-tex\">O</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span></span></span></span>的数学含义是，若存在两个常量C和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">n_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>,当<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>&gt;</mo><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">n &gt; n_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>时，<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><mi>C</mi><mi mathvariant=\"normal\">∣</mi><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">|T(n)| \\leq C|f(n)|</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span></span></span></span>, 则记作<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(n) = O(f(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">))</span></span></span></span><br>\n它表明算法的执行执行T是和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>\"同数据量级\"的，</p>\n<p><strong>原操作</strong>”**指的是固有数据类型的操作，显然每个原操作的执行时间和算法无关，相对于问题的规模是常<br>\n任何一个算法都是由一个控制结构和若干原操作组成的，因此一个算法的执行时间可以看成是所有原操作的执行时间之和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∑</mo><mo stretchy=\"false\">(</mo><mtext>原操作</mtext><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo><mtext>的执行次数</mtext><mo>∗</mo><mtext>原操作</mtext><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo><mtext>的执行时间</mtext><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\sum(原操作(i)的执行次数 * 原操作(i)的执行时间)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"mopen\">(</span><span class=\"mord cjk_fallback\">原操作</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">)</span><span class=\"mord cjk_fallback\">的执行次数</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\">原操作</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">)</span><span class=\"mord cjk_fallback\">的执行时间</span><span class=\"mclose\">)</span></span></span></span></p>\n<pre data-role=\"codeBlock\" data-info=\"js\" class=\"language-javascript js\"><code><span class=\"token keyword keyword-let\">let</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-let\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword keyword-let\">let</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword keyword-let\">let</span> n <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword control-flow keyword-for\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword keyword-let\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>                                <span class=\"token comment\">// 执行n+1次</span>\n    <span class=\"token keyword control-flow keyword-for\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword keyword-let\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>                            <span class=\"token comment\">// 执行n(n+1)次</span>\n        c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>                                       <span class=\"token comment\">// 执行n*n次</span>\n        <span class=\"token keyword control-flow keyword-for\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword keyword-let\">let</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> n <span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>                       <span class=\"token comment\">// 执行n*n*(n+1)次</span>\n            c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> b<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>          <span class=\"token comment\">// 执行 n*n*n次</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>上述代码总执行次数为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>2</mn><msup><mi>n</mi><mn>3</mn></msup><mo>+</mo><mn>3</mn><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mn>3</mn><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">T(n)=2n^3+3n^2+3n+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\">2</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\">3</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">3</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>, 该算法的时间复杂度为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p>\n<p><strong>例【1-3】</strong><br>\n程序，实现用一元人民币换成一分、两分、五分的硬币<br>\n分析：假设一分、两分、五分的硬币各为为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow></mrow><annotation encoding=\"application/x-tex\">%x, y,z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"></span></span>则有<br>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.36em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>+</mo><mi>z</mi><mo>=</mo><mn>50</mn><mspace width=\"1em\"></mspace><mover accent=\"true\"><mn>1</mn><mo>◯</mo></mover></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>x</mi><mo>+</mo><mn>2</mn><mi>y</mi><mo>+</mo><mn>5</mn><mi>z</mi><mo>=</mo><mn>100</mn><mspace width=\"1em\"></mspace><mover accent=\"true\"><mn>2</mn><mo>◯</mo></mover></mrow></mstyle></mtd></mtr></mtable></mrow><mspace width=\"1em\"></mspace><mtext>1-1</mtext></mrow><annotation encoding=\"application/x-tex\">\\begin{cases}\nx + y +z = 50 \\quad \\textcircled 1\\\\\nx + 2y + 5z = 100 \\quad\\textcircled 2\n\\end{cases}\n\\quad\\text{1-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:3em;vertical-align:-1.25em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">{</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">50</span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8889em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\">1</span></span><span style=\"top:-3.1944em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body accent-full\" style=\"left:0em;top:.2em;\"><span class=\"mord\">◯</span></span></span></span></span></span></span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">5</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">100</span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8889em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\">2</span></span><span style=\"top:-3.1944em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body accent-full\" style=\"left:0em;top:.2em;\"><span class=\"mord\">◯</span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord text\"><span class=\"mord\">1-1</span></span></span></span></span></span></p>\n<p>代码实现<strong>三重循换</strong></p>\n<pre data-role=\"codeBlock\" data-info=\"js\" class=\"language-javascript js\"><code><span class=\"token keyword keyword-function\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow keyword-for\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword keyword-let\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow keyword-for\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword keyword-let\">let</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword control-flow keyword-for\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword keyword-let\">let</span> z <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> z <span class=\"token operator\">&lt;=</span><span class=\"token number\">50</span> <span class=\"token punctuation\">;</span> z<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword control-flow keyword-if\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> y <span class=\"token operator\">+</span> z <span class=\"token operator\">===</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>y <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token operator\">*</span>z <span class=\"token operator\">===</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">一分</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>x<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">个 二分</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>y<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">个 五分</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>z<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">个</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>代码实现<strong>二重循换</strong></p>\n<pre data-role=\"codeBlock\" data-info=\"js\" class=\"language-javascript js\"><code><span class=\"token keyword keyword-function\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow keyword-for\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword keyword-let\">let</span> z <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> z <span class=\"token operator\">&lt;=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span> z<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow keyword-for\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword keyword-let\">let</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            x <span class=\"token operator\">=</span> <span class=\"token number\">50</span> <span class=\"token operator\">-</span> y <span class=\"token operator\">-</span> z<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword control-flow keyword-if\">if</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>y <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token operator\">*</span>z <span class=\"token operator\">===</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">一分</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>x<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">个 二分</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>y<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">个 五分</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>z<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">个</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>代码实现<strong>改进的二重循换</strong></p>\n<pre data-role=\"codeBlock\" data-info=\"js\" class=\"language-javascript js\"><code><span class=\"token keyword keyword-function\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow keyword-for\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword keyword-let\">let</span> z <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> z <span class=\"token operator\">&lt;=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> z<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow keyword-for\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword keyword-let\">let</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            x <span class=\"token operator\">=</span> <span class=\"token number\">50</span> <span class=\"token operator\">-</span> y <span class=\"token operator\">-</span> z<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword control-flow keyword-if\">if</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>y <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token operator\">*</span>z <span class=\"token operator\">===</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">一分</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>x<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">个 二分</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>y<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">个 五分</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>z<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">个</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>代码实现<strong>一重循换</strong><br>\n由式1-1中的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mn>2</mn><mo>◯</mo></mover><mo>−</mo><mover accent=\"true\"><mn>1</mn><mo>◯</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\textcircled{2}-\\textcircled{1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9722em;vertical-align:-0.0833em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8889em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.1944em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body accent-full\" style=\"left:0em;top:.2em;\"><span class=\"mord\">◯</span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8889em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span><span style=\"top:-3.1944em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body accent-full\" style=\"left:0em;top:.2em;\"><span class=\"mord\">◯</span></span></span></span></span></span></span></span></span></span>消除未知数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>得到<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><mo>+</mo><mn>4</mn><mi>z</mi><mo>=</mo><mn>50</mn></mrow><annotation encoding=\"application/x-tex\">y + 4z = 50</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">4</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">50</span></span></span></span>, 由与<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><mtext>和</mtext><mi>z</mi><mtext>为整数，由此可知</mtext><mi>z</mi><mtext>最大为</mtext><mn>12</mn></mrow><annotation encoding=\"application/x-tex\">y和z为整数，由此可知z最大为12</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord cjk_fallback\">和</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord cjk_fallback\">为整数，由此可知</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord cjk_fallback\">最大为</span><span class=\"mord\">12</span></span></span></span></p>\n<pre data-role=\"codeBlock\" data-info=\"js\" class=\"language-javascript js\"><code><span class=\"token keyword keyword-function\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow keyword-for\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword keyword-let\">let</span> z <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> z <span class=\"token operator\">&lt;</span> <span class=\"token number\">13</span> <span class=\"token punctuation\">;</span> z<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword keyword-let\">let</span> y <span class=\"token operator\">=</span> <span class=\"token number\">50</span> <span class=\"token operator\">-</span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> z<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword keyword-let\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">50</span> <span class=\"token operator\">-</span> y <span class=\"token operator\">-</span> z<span class=\"token punctuation\">;</span>\n        <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">一分</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>x<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">个 二分</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>y<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">个 五分</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>z<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">个</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p><strong>三重循环</strong>：循环次数51 <em>51</em> 51 = 132651 时间复杂度为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span><br>\n<strong>二重循环</strong>：循环次数51 <em>51 = 2601 时间复杂度为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span><br>\n<strong>改进二重循环</strong>：循环次数21</em> 51 = 1071 时间复杂度为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span><br>\n<strong>单重循环</strong>：循环次数12 时间复杂度为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></p>\n<h4 id=\"空间复杂度\">空间复杂度 </h4>\n<p>空间复杂度是指算法在计算机内执行时所需存储空间，记作<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">S(n) = O(f(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">))</span></span></span></span></p>\n<p>算法执行期间所需要的存储空间包括三部分</p>\n<ol>\n<li>算法程序所占用的空间</li>\n<li>输入的初始数据所占的存储空间</li>\n<li>算法执行过程中所需要的额外空间</li>\n</ol>\n<h4 id=\"事前分析估算法的相关因素\">事前分析估算法的相关因素 </h4>\n<ul>\n<li>算法采用的策略</li>\n<li>算法解决问题的规模</li>\n<li>编程采用的语言</li>\n<li>编译程序产生的机器代码的质量</li>\n<li>执行算法的计算机速度</li>\n</ul>\n<p><a href=\"https://ebook.hep.com.cn/index.html#/reader?bookId=1061913534566236161\">原文地址</a></p>\n\n      </div>\n      <div class=\"md-sidebar-toc\">\n<div class=\"md-toc\">\n<details style=\"padding:0;;padding-left:0px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#引言\" class=\"md-toc-link\"><p>引言</p>\n</a>\n          </summary>\n        <div>\n          <details style=\"padding:0;;padding-left:24px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#数据结构的概念\" class=\"md-toc-link\"><p>数据结构的概念</p>\n</a>\n          </summary>\n        <div>\n          <details style=\"padding:0;;padding-left:24px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#抽象数据类型\" class=\"md-toc-link\"><p>抽象数据类型</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#定义格式\" class=\"md-toc-link\">\n            <p>定义格式</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#基本操作的定义格式\" class=\"md-toc-link\">\n            <p>基本操作的定义格式</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#实现\" class=\"md-toc-link\">\n            <p>实现</p>\n\n          </a></div>\n        </div>\n      </details>\n    \n        </div>\n      </details>\n    <details style=\"padding:0;;padding-left:24px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#数据结构的内容\" class=\"md-toc-link\"><p>数据结构的内容</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#数据的逻辑结构\" class=\"md-toc-link\">\n            <p>数据的逻辑结构</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#数据的存储结构\" class=\"md-toc-link\">\n            <p>数据的存储结构</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#数据的运算\" class=\"md-toc-link\">\n            <p>数据的运算</p>\n\n          </a></div>\n        </div>\n      </details>\n    <details style=\"padding:0;;padding-left:24px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#算法\" class=\"md-toc-link\"><p>算法</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#特性\" class=\"md-toc-link\">\n            <p>特性</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#评价标准\" class=\"md-toc-link\">\n            <p>评价标准</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#描述\" class=\"md-toc-link\">\n            <p>描述</p>\n\n          </a></div><details style=\"padding:0;;padding-left:24px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#性能分析\" class=\"md-toc-link\"><p>性能分析</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#时间复杂性\" class=\"md-toc-link\">\n            <p>时间复杂性</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#空间复杂度\" class=\"md-toc-link\">\n            <p>空间复杂度</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#事前分析估算法的相关因素\" class=\"md-toc-link\">\n            <p>事前分析估算法的相关因素</p>\n\n          </a></div>\n        </div>\n      </details>\n    \n        </div>\n      </details>\n    \n        </div>\n      </details>\n    \n</div>\n</div>\n      <a id=\"sidebar-toc-btn\">≡</a>\n    \n    \n    \n    \n    \n    \n<script>\n\nvar sidebarTOCBtn = document.getElementById('sidebar-toc-btn')\nsidebarTOCBtn.addEventListener('click', function(event) {\n  event.stopPropagation()\n  if (document.body.hasAttribute('html-show-sidebar-toc')) {\n    document.body.removeAttribute('html-show-sidebar-toc')\n  } else {\n    document.body.setAttribute('html-show-sidebar-toc', true)\n  }\n})\n</script>\n      \n  \n    "},{"id":"10023_100001","type":"chapter","name":"线性表","fullPath":"F:\\passerby\\algorithm\\数据结构与算法\\02线性表.md","url":"/chapter/10023_100001","content":"\n    \n    \n      <div class=\"crossnote markdown-preview  \">\n      \n<h1 id=\"线性表\">线性表 </h1>\n<h2 id=\"逻辑结构\">逻辑结构 </h2>\n<p>线性表是n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≤</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">n \\leq 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>个数据元素的有限序列，在表中，元素之间存在着线性的逻辑关系；<em>表中有且仅有一个开始结点；有且仅有一个终端结点；除开始结点外，表中的每个结点均只有一个前驱结点，除终端结点外，表中的每个结点均只有一个后继结点</em>。根据它们之间的关系可以排成一个线性序列,记作<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mo>⋯</mo><mtext> </mtext><mo separator=\"true\">,</mo><msub><mi>a</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(a_0,a_1,a_2,\\cdots, a_n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p>\n<p>线性表中数据元素的个数定义为线性表的长度，称为<strong>表长</strong></p>\n<h2 id=\"特点\">特点 </h2>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mn>1</mn><mo>◯</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\textcircled 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8889em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\">1</span></span><span style=\"top:-3.1944em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body accent-full\" style=\"left:0em;top:.2em;\"><span class=\"mord\">◯</span></span></span></span></span></span></span></span></span></span>同一性。线性表由同类数据元素组成，每一个<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>必须属于同一数<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mn>2</mn><mo>◯</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\textcircled 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8889em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\">2</span></span><span style=\"top:-3.1944em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body accent-full\" style=\"left:0em;top:.2em;\"><span class=\"mord\">◯</span></span></span></span></span></span></span></span></span></span>有穷性。线性表由有限个数据元素组成，表长度就是表中数据元素的个数<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mn>3</mn><mo>◯</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\textcircled 3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8889em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\">3</span></span><span style=\"top:-3.1944em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body accent-full\" style=\"left:0em;top:.2em;\"><span class=\"mord\">◯</span></span></span></span></span></span></span></span></span></span>线性表中相邻数据元素之间存在着序偶关系</p>\n<h2 id=\"运算\">运算 </h2>\n<ul>\n<li><strong>InitList(L)</strong> 线性表初始化</li>\n<li><strong>ListLength(L)</strong> 求线性表的长度</li>\n<li><strong>GetElem(L, i, x)</strong> 用x返回线性表中的第i个元素的值</li>\n<li><strong>LocationElem(L,x)</strong> 按值查找</li>\n<li><strong>ListInsert(L,i,x)</strong> 插入元素</li>\n<li><strong>ListDelete(L,i)</strong> 删除元素</li>\n<li><strong>ListEmpty(L)</strong> 判断线性表是为空</li>\n<li><strong>ClearList(L)</strong> 将已知的线性表清空</li>\n<li><strong>DestroryList(L)</strong> 销毁已知的线性表</li>\n</ul>\n<h2 id=\"顺序存储\">顺序存储 </h2>\n<p>在计算机内可以用不同的方法来存储数据信息，最常用的方法就是顺序存储。顺序存储是指在内存中用一块地址连续的存储空间按顺序存储线性表的各个数据元素。采用顺序存储结构的线性表称为<strong>顺序表</strong>表顺序表中逻辑上相邻的数据元素在物理存储位置上也是相邻的。</p>\n<p><img src=\"/assets/100000095.png\" alt=\"如图所示\"></p>\n<p>设第一个元素存放地址为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mi>C</mi><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mn>0</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">OC(a_0)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">OC</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>, 每个元素占用的空间大小为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span>个字节，则元素<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>的存放地址为<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>L</mi><mi>O</mi><mi>C</mi><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mo>=</mo><mi>L</mi><mi>O</mi><mi>C</mi><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mn>0</mn></msub><mo stretchy=\"false\">)</mo><mo>+</mo><mi>d</mi><mo>∗</mo><mo stretchy=\"false\">(</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">LOC(a_i) = LOC(a_0) + d * (i - 1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">OC</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">OC</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>**特点：**是用物理位置上的相邻来表示数据元素之间逻辑相邻的关系，存储密度高，且能随机存取数据元素。但线性表在进行插入、删除时需要移动大量数据元素，运行效率低，而且顺序表需要预先分配存储空间，若表长*变化较大，则存储规模难以事先确定，估算过大会造成存储空间的浪费</p>\n<h2 id=\"链式存储\">链式存储 </h2>\n<p>链表是通过一组任意的存储单元来存储线性表中的数据元素。这组存储单元可以是连续的，也可以是不连续的。为建立起数据元素之间的线性关系，对于每个数据元素()，除了存放数据元素自身的信息外，还必须有包含指示该元素直接后继元素存储位置的信息，这两部分信息组成一个结点。也就是说，链表中的每个结点都至少包括两个域，一个域存储数据元素信息，称为<strong>数据域</strong>；另一个域存储直接后继元素的地址，称为<strong>指针域</strong></p>\n<p>n个元素的线性表通过每个结点的指针域连接成了一条“链子”，故形象地称之为“链表”。因为每个结点中只有一个指向其直接后继的指针，所以称其为<strong>单链表</strong></p>\n<p>在单链表的基础上，将其最后一个结点的指针域指向该链表头结点，使得链表头尾结点相连，就构成了<strong>单循环链表</strong></p>\n<p>在单链表中的每个结点中再加一个指向直接前驱的指针域，用这种结点组成的链表称为<strong>双向链表</strong></p>\n<p><strong>静态链表</strong>是用数组实现的，每个数据元素除了存储数据信息外，还要存储逻辑相邻的下一个数据元素在数组中的位置。</p>\n<p>实现参考<a href=\"https://github.com/usernameisregistered/algorithm/blob/master/javascript/LinkedList.js\">动态数组</a></p>\n<h2 id=\"顺序表和链表的比较\">顺序表和链表的比较 </h2>\n<h3 id=\"顺序表有点\">顺序表有点 </h3>\n<ul>\n<li>用数组存储数据元素，操作方法简单，容易实现</li>\n<li>无须为表示结点间的逻辑关系而增加额外的存储开销。#</li>\n<li>存储密度高</li>\n<li>顺序表可按元素位序随机存取结点</li>\n</ul>\n<h3 id=\"顺序表缺点\">顺序表缺点 </h3>\n<ul>\n<li>做插入、删除操作时，须大量地移动数据元素，效率比较低</li>\n<li>要占用连续的存储空间，存储分配只能预先进行。如果估计过大，可能导致后部大量空间闲置；如果预先分配过小，又会造成数据溢出</li>\n</ul>\n<p><strong>链表的优缺点刚好和顺序表相反</strong></p>\n\n      </div>\n      <div class=\"md-sidebar-toc\">\n<div class=\"md-toc\">\n<details style=\"padding:0;;padding-left:0px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#线性表\" class=\"md-toc-link\"><p>线性表</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#逻辑结构\" class=\"md-toc-link\">\n            <p>逻辑结构</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#特点\" class=\"md-toc-link\">\n            <p>特点</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#运算\" class=\"md-toc-link\">\n            <p>运算</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#顺序存储\" class=\"md-toc-link\">\n            <p>顺序存储</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#链式存储\" class=\"md-toc-link\">\n            <p>链式存储</p>\n\n          </a></div><details style=\"padding:0;;padding-left:24px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#顺序表和链表的比较\" class=\"md-toc-link\"><p>顺序表和链表的比较</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#顺序表有点\" class=\"md-toc-link\">\n            <p>顺序表有点</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#顺序表缺点\" class=\"md-toc-link\">\n            <p>顺序表缺点</p>\n\n          </a></div>\n        </div>\n      </details>\n    \n        </div>\n      </details>\n    \n</div>\n</div>\n      <a id=\"sidebar-toc-btn\">≡</a>\n    \n    \n    \n    \n    \n    \n<script>\n\nvar sidebarTOCBtn = document.getElementById('sidebar-toc-btn')\nsidebarTOCBtn.addEventListener('click', function(event) {\n  event.stopPropagation()\n  if (document.body.hasAttribute('html-show-sidebar-toc')) {\n    document.body.removeAttribute('html-show-sidebar-toc')\n  } else {\n    document.body.setAttribute('html-show-sidebar-toc', true)\n  }\n})\n</script>\n      \n  \n    "},{"id":"10023_100002","type":"chapter","name":"栈和队列","fullPath":"F:\\passerby\\algorithm\\数据结构与算法\\03栈和队列.md","url":"/chapter/10023_100002","content":"\n    \n    \n      <div class=\"crossnote markdown-preview  \">\n      \n<h1 id=\"栈和队列\">栈和队列 </h1>\n<blockquote>\n<p>栈只允许在表的一端进行插入或删除操作，而队列只允许在表的一端进行插入操作、在另一端进行删除操作。因而，栈和队列也可以被称为操作受限的线性表</p>\n</blockquote>\n<h2 id=\"栈\">栈 </h2>\n<p>栈(stack)是一种只允许在一端进行插入和删除操作的线性表，它是一种操作受限的线性表。在表中允许进行插入和删除的一端称为<strong>栈顶</strong>，另一端称为<strong>栈底</strong>。栈的插入操作通常称为<strong>入栈</strong>或<strong>进栈</strong>而栈的删除操作则称为<strong>出栈</strong>或<strong>退栈</strong>当栈中无数据元素时，称为<strong>空栈</strong></p>\n<p>根据栈的定义，每次进栈的元素都被放在原栈顶元素之上而成为新的栈顶，而每次出栈的总是当前栈中“最新”的元素，即最后进栈的元素;<strong>后进先出</strong></p>\n<h3 id=\"多栈共享邻接空间\">多栈共享邻接空间 </h3>\n<p>G在计算机系统软件中，各种高级语言的编译系统都离不开栈的使用。常常一个程序中要用到多个栈，若采用顺序栈，会因为所需的栈空间大小难以准确估计，导致出现有的栈空间溢出、有的栈空间空闲的情况。为了不发生上溢错误，就必须给每个栈预先分配一个足够大的存储空间，但实际中很难准确地估计。另一方面，若每个栈都预分配过大的存储空间，势必会造成系统空间紧张。紧张。若让多个栈共用一个足够大的连续存储空间，则可利用栈的动态特性使其存储空间互补。这就是栈的共享邻接空间。</p>\n<h2 id=\"应用\">应用 </h2>\n<ol>\n<li>算术表达式求值</li>\n</ol>\n<p>计值的实现可以通过设置两个栈来完成。<br>\n<strong>操作数栈(OPRD)</strong>: 用来存放处理表达是过程中的操作数<br>\n<strong>运算符栈(OPTR)</strong>: 存放处理表达式过程中的运算符，开始时，先在运算符栈栈底压入一个表达式的结束符*#*<br>\n计算机系统在处理表达式时，从左到右依次读出表达式中的各个符号（操作数或运算符），每读出一个符号后，根据运算规则做如下的处理。假如是操作数，则将其压入操作数栈，并依次读下一个符号。假如是运算符，则与运算符栈的栈顶运算符进行优先级比较，并做以以下处理</p>\n<ul>\n<li>假如读出的运算符的优先级高于运算符栈栈顶运算符的优先级，则将其压入运算符栈，并依次读下一个符号</li>\n<li>假如读出的运算符的优先级等于运算符栈栈顶运算符的优先级，说明左右括号相遇，只需将栈顶运算符退栈即可</li>\n<li>#假如读出的运算符的优先级低于运算符栈栈顶运算符的优先级，则从操作数栈连续退出两个操作数，从运算符栈中退出一个运算符，然后做相应的运算，并将运算结果压入操作数栈</li>\n<li>假如读出的是表达式结束符*#<em>，且运算符栈栈顶的运算符也为</em>#*，则表达式处理结束，最后的表达式的计算结果在操作数栈的栈顶位置</li>\n</ul>\n<p>表1 表达式3+4*2计算过程栈区变化表</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>操作数栈</th>\n<th>运算符栈</th>\n<th>尚待读入的表达式</th>\n<th>注释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td></td>\n<td>#</td>\n<td>3+4*2#</td>\n<td>初始状态</td>\n</tr>\n<tr>\n<td>2</td>\n<td>3</td>\n<td>#</td>\n<td>+4*2#</td>\n<td>读入3</td>\n</tr>\n<tr>\n<td>3</td>\n<td>3</td>\n<td>#+</td>\n<td>4*2#</td>\n<td>读入+</td>\n</tr>\n<tr>\n<td>4</td>\n<td>3,4</td>\n<td>#+</td>\n<td>*2#</td>\n<td>读入4</td>\n</tr>\n<tr>\n<td>5</td>\n<td>3,4</td>\n<td>#+*</td>\n<td>2#</td>\n<td>读入2#</td>\n</tr>\n<tr>\n<td>6</td>\n<td>3,4，2</td>\n<td>#+*</td>\n<td>#</td>\n<td>读入2</td>\n</tr>\n<tr>\n<td>7</td>\n<td>3， 8</td>\n<td>#+</td>\n<td>#</td>\n<td>计算4*2</td>\n</tr>\n<tr>\n<td>8</td>\n<td>11</td>\n<td>#</td>\n<td>#</td>\n<td>计算3+8</td>\n</tr>\n<tr>\n<td>9</td>\n<td></td>\n<td></td>\n<td></td>\n<td>结束</td>\n</tr>\n</tbody>\n</table>\n<p><strong>栈与递归过程</strong></p>\n<p>栈的一个重要应用是在程序设计语言中实现递归过程。递归即在定义自身的同时又出现了对自身的调用。如果一个函数在其定义体内直接调用自己，则称其为“直接递归函数”。如果一个函数经过一系列中间调用语句，通过其他函数间接调用自己，则称其为“间接递函数归”</p>\n<p>有很多数学函数是递归定义的，如阶乘函数的定义<br>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>n</mi><mo stretchy=\"false\">!</mo><mo>=</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.36em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mn>1</mn><mspace width=\"2em\"></mspace><mi>n</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>×</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mspace width=\"2em\"></mspace><mi>n</mi><mo mathvariant=\"normal\">≠</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"application/x-tex\">n! = \\begin{cases}\n1 \\qquad n = 0 \\\\\nn \\times (n - 1) \\qquad n \\neq 0\n\\end{cases}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">!</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3em;vertical-align:-1.25em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">{</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">0</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<pre data-role=\"codeBlock\" data-info=\"c#\" class=\"language-c# c#\"><code>long fact(int n)\n{\n    if(n == 0)\n    {\n        return 1;\n    } else {\n        return (n * fact(n -1));\n    }\n}\n</code></pre><p>递归算法的设计步骤如下</p>\n<ol>\n<li>将规模较大的原问题分解为一个或多个规模更小，但具有类似于原问题特性的子问题，即较大的问题递归地用较小的子问题来描述，解原问题的方法同样可用来解这些子问题</li>\n<li>确定一个或多个无须分解，可直接求解的最小子问题（称为“递归的终止条件”）</li>\n</ol>\n<p>递归算法有两个基本的特征：递归归纳和递归终止。首先能将问题转化为比原问题规模小的同类问题，归纳出一般递推公式，故所处理的对象要有规律地递增或递减；当规模小到一定的程度应结束递归调用，逐层返回</p>\n<h2 id=\"队列\">队列 </h2>\n<p>它只允许插入在表的一端进行，而删除在表的另一端进行，允许插入的一端叫队尾（rear），而允许删除的一端叫队头（front）。队列的插入操作通常称为“入队”或“进队”，而队列的删除操作则称为“出队”或“退队”;队”。当队列中无数据元素时，称为“空队列”。根据队列的定义可知，队头元素总是最先进队列，也总是最先出队列；队尾元素总是最后进队列，因而也是最后出队列。这种表是按照先进先出（first in first out FIFO）的原则组织数据的，因此，队列也被称为“先进先出”表</p>\n<h2 id=\"分治法\">分治法 </h2>\n<p>在计算机科学中，分治法是一种很重要的算法。字面上的解释是“分而治之”，就是把一个复杂的问题分成两个或更多相同或相似的子问题，再把子问题分成更小的子问题……直到最后子问题可以简单地直接求解，原问题的解即子问题的解的合并</p>\n<p>任何一个可以用计算机求解的问题，其所需的计算时间都与规模有关。问题的规模越小，越容易直接求解，解题所需的计算时间也越少</p>\n<p>分治法所能解决的问题一般具有以下几个特征。</p>\n<ul>\n<li>该问题的规模缩小到一定的程度就可以容易地解决。</li>\n<li>该问题可以分解为若干个规模较小的相同问题，即该问题具有最优子结构性质。</li>\n<li>利用该问题分解出的子问题的解可以合并为该问题的解。</li>\n<li>该问题所分解出的各个子问题是相互独立的，即子问题之间不包含公共的子问题</li>\n</ul>\n<p>分治法在每一层递归上都有如下三个步骤</p>\n<ol>\n<li>分解：将原问题分解为若干个规模较小、相互独立，且与原问题形式相同的子问题。</li>\n<li>解决：若子问题规模较小且容易被解决则直接解，否则递归地解各个子问题。</li>\n<li>合并：将各个子问题的解合并为原问题的解。</li>\n</ol>\n<p><a href=\"https://ebook.hep.com.cn/index.html#/reader?bookId=1061913534566236161\">原文地址</a></p>\n\n      </div>\n      <div class=\"md-sidebar-toc\">\n<div class=\"md-toc\">\n<details style=\"padding:0;;padding-left:0px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#栈和队列\" class=\"md-toc-link\"><p>栈和队列</p>\n</a>\n          </summary>\n        <div>\n          <details style=\"padding:0;;padding-left:24px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#栈\" class=\"md-toc-link\"><p>栈</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#多栈共享邻接空间\" class=\"md-toc-link\">\n            <p>多栈共享邻接空间</p>\n\n          </a></div>\n        </div>\n      </details>\n    <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#应用\" class=\"md-toc-link\">\n            <p>应用</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#队列\" class=\"md-toc-link\">\n            <p>队列</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#分治法\" class=\"md-toc-link\">\n            <p>分治法</p>\n\n          </a></div>\n        </div>\n      </details>\n    \n</div>\n</div>\n      <a id=\"sidebar-toc-btn\">≡</a>\n    \n    \n    \n    \n    \n    \n<script>\n\nvar sidebarTOCBtn = document.getElementById('sidebar-toc-btn')\nsidebarTOCBtn.addEventListener('click', function(event) {\n  event.stopPropagation()\n  if (document.body.hasAttribute('html-show-sidebar-toc')) {\n    document.body.removeAttribute('html-show-sidebar-toc')\n  } else {\n    document.body.setAttribute('html-show-sidebar-toc', true)\n  }\n})\n</script>\n      \n  \n    "},{"id":"10023_100003","type":"chapter","name":"串","fullPath":"F:\\passerby\\algorithm\\数据结构与算法\\04串.md","url":"/chapter/10023_100003","content":"\n    \n    \n      <div class=\"crossnote markdown-preview  \">\n      \n<h1 id=\"串\">串 </h1>\n<p>字符串是一种特殊的线性表，其特殊性在于线性表的数据元素限定为字符串；理。字符串一般简称为“串”，并具有自身的特征，通常把一个串作为一个整体来处理。</p>\n<h2 id=\"应用实例\">应用实例 </h2>\n<p><strong>例文本编辑软件</strong></p>\n<p>文本编辑程序是利用计算机进行文字加工的基本软件工具，实现对文本文件的插入、删除、修改等操作，甚至用于报刊和书籍的编辑排版。常用的简单文本编辑程序，1,(和文字处理软件机VJ、机*)1等，究其实质，都是修改字符数据的形式或格式。可用于文本编辑的程序很多，功能不同且强弱差别很大，但基本操作是一样的，一般都包含串的查找、插入和删除等基本</p>\n<p>例如，对于下面的一段源程序，一个文本编辑软件首先必须解决的问题就是文本串在内存中如何存储，其次需要解决的问题是基于存储方式实现对文本串的实际操作</p>\n<pre data-role=\"codeBlock\" data-info=\"c\" class=\"language-c c\"><code><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-int\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>max<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-if\">if</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">&gt;</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        max <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-else\">else</span> <span class=\"token punctuation\">{</span>\n        max <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>    \n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"max = %d\"</span><span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><h2 id=\"串及其运算\">串及其运算 </h2>\n<p>串（string）是由零个或多个字符组成的有限序列，一般记作 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>=</mo><mi mathvariant=\"normal\">\"</mi><msub><mi>a</mi><mn>1</mn></msub><msub><mi>a</mi><mn>2</mn></msub><msub><mi>a</mi><mn>3</mn></msub><msub><mi>a</mi><mn>4</mn></msub><msub><mi>a</mi><mn>5</mn></msub><mo>⋯</mo><msub><mi>a</mi><mi>n</mi></msub><mi mathvariant=\"normal\">\"</mi></mrow><annotation encoding=\"application/x-tex\">S = \"a_1 a_2 a_3 a_4 a_5 \\cdots a_n\"</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord\">\"</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">\"</span></span></span></span></p>\n<p>空串（null string）：长度为零的串，它不包含任何字符<br>\n空格串（blank string）: 仅由一个或多个空格组成的串，长度大于等于1<br>\n子串（sub string）：串中任意个连续字符组成的子序列称为该串的“子串”<br>\n主串（master string）：包含子串的串相应地称为“主串”。因此子串是主串的一部分<br>\n位置：通常将字符在串中的序号称为该字符在串中的“位置”<br>\n串相等：当且仅当两个串的值相等时，称这两个串是相等的。即只有当两个串的长度相等，并且每个对应位置的字符都相等时才相等<br>\n模式匹配：确定子串从主串的某个位置开始后，在主串中首次出现的位置的运算。在串的模式匹配中，一般将主串称为“目标串”，子串称为“模式串”</p>\n<h3 id=\"基本运算\">基本运算 </h3>\n<p>串的基本操作中，则通常以“串的整体”或“串的一部分”作为操作对象，例如在串中查找某个子串，在某个位置上插入一个子串或删除一个子串等。</p>\n<p>拷贝<br>\n获取长度<br>\n删除子串<br>\n插入子串<br>\n比较串<br>\n串拼接<br>\n查找子串<br>\n替换子串<br>\n串存在判断<br>\n清空串<br>\n销毁串</p>\n<h2 id=\"串的存储结构及其实现\">串的存储结构及其实现 </h2>\n<p>串的实现方法有定长顺序串、堆串和块链串，分别介绍如下</p>\n<h3 id=\"顺序串\">顺序串 </h3>\n<p>串的定长顺序存储结构，与前面线性表的顺序存储结构类似，是用一组地址连续的存储单元存储串的字符序列，也称为“静态存储分配的顺序串”。所谓定长顺序存储是直接使用定长的字符数组来定义，为每个定义的串变量分配一个固定长度的存储区，存储分配是在编译时完成的</p>\n<h4 id=\"存储结构\">存储结构 </h4>\n<pre data-role=\"codeBlock\" data-info=\"c\" class=\"language-c c\"><code><span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXLEN</span> <span class=\"token expression\"><span class=\"token number\">50</span></span></span>\n<span class=\"token keyword keyword-typedef\">typedef</span> <span class=\"token keyword keyword-struct\">struct</span> \n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-char\">char</span> ch<span class=\"token punctuation\">[</span>MAXLEN <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//存储字符串的一堆数组，每个分量存储一个字符，第0号单元不使用</span>\n    <span class=\"token keyword keyword-int\">int</span> len<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> SString<span class=\"token punctuation\">;</span>\n</code></pre><p>串的实际长度可在预定义长度）5<sup>S，3的范围内随意变动，超过）5</sup>S，3，串值被舍去，称为“截断”。</p>\n<p>字符串的长度可以采用以上描述的定长顺序串类型定义中的成员&amp;%+表示，此时的号单元不使用（浪费一个空间）；也可以在串值后设特殊标记，隐含串长，例如6语言中f的表示串的结束。</p>\n<h3 id=\"堆串\">堆串 </h3>\n<p>串的堆存储结构，与定长顺序串的存储结构类似，都是用一组地址连续的存储单元存储串的字符序列，不同的是堆串的存储空间是在程序执行过程中动态分配的。在系统中存在一个称为“堆”的自由存储区，每当建立一个新串时，可以通过动态分配函数从这个空间中分配一块实际串所需的存储空间，来存储新串的串值。只要存储空间能分配成功，则在操作的过程中就不会发生“截断”的情况</p>\n<h4 id=\"存储结构-1\">存储结构 </h4>\n<pre data-role=\"codeBlock\" data-info=\"c\" class=\"language-c c\"><code><span class=\"token keyword keyword-typedef\">typedef</span> <span class=\"token keyword keyword-struct\">struct</span> \n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-char\">char</span> <span class=\"token operator\">*</span>ch<span class=\"token punctuation\">;</span> <span class=\"token comment\">//若是非空串，则指向串的起始地址否则ch是null</span>\n    <span class=\"token keyword keyword-int\">int</span> len<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> HString<span class=\"token punctuation\">;</span>\n</code></pre><h3 id=\"块链串\">块链串 </h3>\n<p>在串的链式存储结构中，链表的每个结点既可以存放一个字符，也可以存放多个字符。每个结点称为“块”，整个链表称为“块链结构</p>\n<h4 id=\"存储结构-2\">存储结构 </h4>\n<pre data-role=\"codeBlock\" data-info=\"c\" class=\"language-c c\"><code><span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">BLOCK_SIZE</span> <span class=\"token expression\"><span class=\"token number\">4</span></span></span>\n<span class=\"token keyword keyword-typedef\">typedef</span> <span class=\"token keyword keyword-struct\">struct</span> <span class=\"token class-name\">block</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-char\">char</span> ch<span class=\"token punctuation\">[</span>BLOCK_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword keyword-struct\">struct</span> <span class=\"token class-name\">block</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> Block<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword keyword-typedef\">typedef</span> <span class=\"token keyword keyword-struct\">struct</span> \n<span class=\"token punctuation\">{</span>\n    Block <span class=\"token operator\">*</span>head<span class=\"token punctuation\">;</span>\n    Block <span class=\"token operator\">*</span>tail<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-int\">int</span> len<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>LString\n</code></pre><p>在一般情况下，对串进行操作时，只需要从头向尾顺序扫描即可，则对串值不必建立双向链表。但当进行串的连接操作时，就要在第一个串的尾部进行连接，因此在块链存储中设置尾指针可以便于其操作。在连接时需要注意处理第一个串的最后一个结点中的无效字符。</p>\n<p>块大小是指块链表中结点存放字符的个数。假设链表结点的链域next所需的存储空间大小为?字节。在块链串的存储方式中，块大小直接影响到串处理的效率。这就要求考虑串值的存储密度。存储密度定义为<br>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>存储密度</mtext><mo>=</mo><mfrac><mtext>度法串值所占的存储位</mtext><mtext>实际分配的存储位</mtext></mfrac></mrow><annotation encoding=\"application/x-tex\">存储密度  = \\frac{度法串值所占的存储位}{实际分配的存储位}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\">存储密度</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.0463em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3603em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord cjk_fallback\">实际分配的存储位</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord cjk_fallback\">度法串值所占的存储位</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>当BLOCK_SIZE大于1：由于串长不一定是块大小的整倍数，则链表中的最后一个结点不一定全被串值占满，此时通常补上“Z”或其他的非串值字符（通常“Z”不属于串的字符集，是一个特殊的符号）</p>\n<p>当BLOCK_SIZE等于1：此时块链表结构同线性链表，插入、删除等处理方法和线性链表一样</p>\n<h2 id=\"串的模式匹配\">串的模式匹配 </h2>\n<p><a href=\"https://ebook.hep.com.cn/index.html#/reader?bookId=1061913534566236161\">原文地址</a></p>\n\n      </div>\n      <div class=\"md-sidebar-toc\">\n<div class=\"md-toc\">\n<details style=\"padding:0;;padding-left:0px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#串\" class=\"md-toc-link\"><p>串</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#应用实例\" class=\"md-toc-link\">\n            <p>应用实例</p>\n\n          </a></div><details style=\"padding:0;;padding-left:24px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#串及其运算\" class=\"md-toc-link\"><p>串及其运算</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#基本运算\" class=\"md-toc-link\">\n            <p>基本运算</p>\n\n          </a></div>\n        </div>\n      </details>\n    <details style=\"padding:0;;padding-left:24px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#串的存储结构及其实现\" class=\"md-toc-link\"><p>串的存储结构及其实现</p>\n</a>\n          </summary>\n        <div>\n          <details style=\"padding:0;;padding-left:24px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#顺序串\" class=\"md-toc-link\"><p>顺序串</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#存储结构\" class=\"md-toc-link\">\n            <p>存储结构</p>\n\n          </a></div>\n        </div>\n      </details>\n    <details style=\"padding:0;;padding-left:24px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#堆串\" class=\"md-toc-link\"><p>堆串</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#存储结构-1\" class=\"md-toc-link\">\n            <p>存储结构</p>\n\n          </a></div>\n        </div>\n      </details>\n    <details style=\"padding:0;;padding-left:24px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#块链串\" class=\"md-toc-link\"><p>块链串</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#存储结构-2\" class=\"md-toc-link\">\n            <p>存储结构</p>\n\n          </a></div>\n        </div>\n      </details>\n    \n        </div>\n      </details>\n    <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#串的模式匹配\" class=\"md-toc-link\">\n            <p>串的模式匹配</p>\n\n          </a></div>\n        </div>\n      </details>\n    \n</div>\n</div>\n      <a id=\"sidebar-toc-btn\">≡</a>\n    \n    \n    \n    \n    \n    \n<script>\n\nvar sidebarTOCBtn = document.getElementById('sidebar-toc-btn')\nsidebarTOCBtn.addEventListener('click', function(event) {\n  event.stopPropagation()\n  if (document.body.hasAttribute('html-show-sidebar-toc')) {\n    document.body.removeAttribute('html-show-sidebar-toc')\n  } else {\n    document.body.setAttribute('html-show-sidebar-toc', true)\n  }\n})\n</script>\n      \n  \n    "},{"id":"10023_100004","type":"chapter","name":"扩展","fullPath":"F:\\passerby\\algorithm\\数据结构与算法\\05扩展.md","url":"/chapter/10023_100004","content":"\n    \n    \n      <div class=\"crossnote markdown-preview  \">\n      \n<h1 id=\"概述\">概述 </h1>\n<h2 id=\"静态数组\">静态数组 </h2>\n<blockquote>\n<p>「静态数组」就是一块连续的内存空间，我们可以通过索引来访问这块内存空间中的元素，这才是数组的原始形态</p>\n</blockquote>\n<p><strong>为什么数组的索引从0开始？</strong></p>\n<blockquote>\n<p>就是方便取地址。arr[0] 就是 arr 的首地址，从这个地址往后的 4 个字节存储着第一个元素的值；arr[1] 就是 arr 的首地址加上 1 * 4 字节，也就是第二个元素的首地址，这个地址往后的 4 个字节存储着第二个元素的值。arr[2], arr[3] 以此类推</p>\n</blockquote>\n<h3 id=\"时间复杂度\">时间复杂度 </h3>\n<p>增：<br>\n在末尾追加元素：O(1)<br>\n在中间（非末尾）插入元素：O(N)<br>\n删：<br>\n删除末尾元素：O(1)<br>\n删除中间（非末尾）元素：O(N)<br>\n查：给定指定索引，查询索引对应的元素的值，时间复杂度O(1)<br>\n改：给定指定索引，修改索引对应的元素的值，时间复杂度O(1)</p>\n<h3 id=\"扩缩容\">扩缩容 </h3>\n<p>在实际使用动态数组时，缩容也是重要的优化手段。比方说一个动态数组开辟了能够存储 1000 个元素的连续内存空间，但是实际只存了 10 个元素，那就有 990 个空间是空闲的。为了避免资源浪费，我们其实可以适当缩小存储空间，这就是缩容</p>\n<p>实现参考<a href=\"https://github.com/usernameisregistered/algorithm/blob/master/javascript/DynamicArray.js\">动态数组</a></p>\n\n      </div>\n      <div class=\"md-sidebar-toc\">\n<div class=\"md-toc\">\n<details style=\"padding:0;;padding-left:0px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#概述\" class=\"md-toc-link\"><p>概述</p>\n</a>\n          </summary>\n        <div>\n          <details style=\"padding:0;;padding-left:24px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#静态数组\" class=\"md-toc-link\"><p>静态数组</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#时间复杂度\" class=\"md-toc-link\">\n            <p>时间复杂度</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#扩缩容\" class=\"md-toc-link\">\n            <p>扩缩容</p>\n\n          </a></div>\n        </div>\n      </details>\n    \n        </div>\n      </details>\n    \n</div>\n</div>\n      <a id=\"sidebar-toc-btn\">≡</a>\n    \n    \n    \n    \n    \n    \n<script>\n\nvar sidebarTOCBtn = document.getElementById('sidebar-toc-btn')\nsidebarTOCBtn.addEventListener('click', function(event) {\n  event.stopPropagation()\n  if (document.body.hasAttribute('html-show-sidebar-toc')) {\n    document.body.removeAttribute('html-show-sidebar-toc')\n  } else {\n    document.body.setAttribute('html-show-sidebar-toc', true)\n  }\n})\n</script>\n      \n  \n    "}],"type":"book","url":"/chapter/10023_100000"},"chapterInfo":{"id":"10023_100001","type":"chapter","name":"线性表","fullPath":"F:\\passerby\\algorithm\\数据结构与算法\\02线性表.md","url":"/chapter/10023_100001","content":"\n    \n    \n      <div class=\"crossnote markdown-preview  \">\n      \n<h1 id=\"线性表\">线性表 </h1>\n<h2 id=\"逻辑结构\">逻辑结构 </h2>\n<p>线性表是n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≤</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">n \\leq 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>个数据元素的有限序列，在表中，元素之间存在着线性的逻辑关系；<em>表中有且仅有一个开始结点；有且仅有一个终端结点；除开始结点外，表中的每个结点均只有一个前驱结点，除终端结点外，表中的每个结点均只有一个后继结点</em>。根据它们之间的关系可以排成一个线性序列,记作<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mo>⋯</mo><mtext> </mtext><mo separator=\"true\">,</mo><msub><mi>a</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(a_0,a_1,a_2,\\cdots, a_n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p>\n<p>线性表中数据元素的个数定义为线性表的长度，称为<strong>表长</strong></p>\n<h2 id=\"特点\">特点 </h2>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mn>1</mn><mo>◯</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\textcircled 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8889em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\">1</span></span><span style=\"top:-3.1944em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body accent-full\" style=\"left:0em;top:.2em;\"><span class=\"mord\">◯</span></span></span></span></span></span></span></span></span></span>同一性。线性表由同类数据元素组成，每一个<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>必须属于同一数<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mn>2</mn><mo>◯</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\textcircled 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8889em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\">2</span></span><span style=\"top:-3.1944em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body accent-full\" style=\"left:0em;top:.2em;\"><span class=\"mord\">◯</span></span></span></span></span></span></span></span></span></span>有穷性。线性表由有限个数据元素组成，表长度就是表中数据元素的个数<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mn>3</mn><mo>◯</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\textcircled 3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8889em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\">3</span></span><span style=\"top:-3.1944em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body accent-full\" style=\"left:0em;top:.2em;\"><span class=\"mord\">◯</span></span></span></span></span></span></span></span></span></span>线性表中相邻数据元素之间存在着序偶关系</p>\n<h2 id=\"运算\">运算 </h2>\n<ul>\n<li><strong>InitList(L)</strong> 线性表初始化</li>\n<li><strong>ListLength(L)</strong> 求线性表的长度</li>\n<li><strong>GetElem(L, i, x)</strong> 用x返回线性表中的第i个元素的值</li>\n<li><strong>LocationElem(L,x)</strong> 按值查找</li>\n<li><strong>ListInsert(L,i,x)</strong> 插入元素</li>\n<li><strong>ListDelete(L,i)</strong> 删除元素</li>\n<li><strong>ListEmpty(L)</strong> 判断线性表是为空</li>\n<li><strong>ClearList(L)</strong> 将已知的线性表清空</li>\n<li><strong>DestroryList(L)</strong> 销毁已知的线性表</li>\n</ul>\n<h2 id=\"顺序存储\">顺序存储 </h2>\n<p>在计算机内可以用不同的方法来存储数据信息，最常用的方法就是顺序存储。顺序存储是指在内存中用一块地址连续的存储空间按顺序存储线性表的各个数据元素。采用顺序存储结构的线性表称为<strong>顺序表</strong>表顺序表中逻辑上相邻的数据元素在物理存储位置上也是相邻的。</p>\n<p><img src=\"/assets/100000095.png\" alt=\"如图所示\"></p>\n<p>设第一个元素存放地址为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mi>C</mi><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mn>0</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">OC(a_0)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">OC</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>, 每个元素占用的空间大小为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span>个字节，则元素<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>的存放地址为<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>L</mi><mi>O</mi><mi>C</mi><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mo>=</mo><mi>L</mi><mi>O</mi><mi>C</mi><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mn>0</mn></msub><mo stretchy=\"false\">)</mo><mo>+</mo><mi>d</mi><mo>∗</mo><mo stretchy=\"false\">(</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">LOC(a_i) = LOC(a_0) + d * (i - 1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">OC</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">OC</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>**特点：**是用物理位置上的相邻来表示数据元素之间逻辑相邻的关系，存储密度高，且能随机存取数据元素。但线性表在进行插入、删除时需要移动大量数据元素，运行效率低，而且顺序表需要预先分配存储空间，若表长*变化较大，则存储规模难以事先确定，估算过大会造成存储空间的浪费</p>\n<h2 id=\"链式存储\">链式存储 </h2>\n<p>链表是通过一组任意的存储单元来存储线性表中的数据元素。这组存储单元可以是连续的，也可以是不连续的。为建立起数据元素之间的线性关系，对于每个数据元素()，除了存放数据元素自身的信息外，还必须有包含指示该元素直接后继元素存储位置的信息，这两部分信息组成一个结点。也就是说，链表中的每个结点都至少包括两个域，一个域存储数据元素信息，称为<strong>数据域</strong>；另一个域存储直接后继元素的地址，称为<strong>指针域</strong></p>\n<p>n个元素的线性表通过每个结点的指针域连接成了一条“链子”，故形象地称之为“链表”。因为每个结点中只有一个指向其直接后继的指针，所以称其为<strong>单链表</strong></p>\n<p>在单链表的基础上，将其最后一个结点的指针域指向该链表头结点，使得链表头尾结点相连，就构成了<strong>单循环链表</strong></p>\n<p>在单链表中的每个结点中再加一个指向直接前驱的指针域，用这种结点组成的链表称为<strong>双向链表</strong></p>\n<p><strong>静态链表</strong>是用数组实现的，每个数据元素除了存储数据信息外，还要存储逻辑相邻的下一个数据元素在数组中的位置。</p>\n<p>实现参考<a href=\"https://github.com/usernameisregistered/algorithm/blob/master/javascript/LinkedList.js\">动态数组</a></p>\n<h2 id=\"顺序表和链表的比较\">顺序表和链表的比较 </h2>\n<h3 id=\"顺序表有点\">顺序表有点 </h3>\n<ul>\n<li>用数组存储数据元素，操作方法简单，容易实现</li>\n<li>无须为表示结点间的逻辑关系而增加额外的存储开销。#</li>\n<li>存储密度高</li>\n<li>顺序表可按元素位序随机存取结点</li>\n</ul>\n<h3 id=\"顺序表缺点\">顺序表缺点 </h3>\n<ul>\n<li>做插入、删除操作时，须大量地移动数据元素，效率比较低</li>\n<li>要占用连续的存储空间，存储分配只能预先进行。如果估计过大，可能导致后部大量空间闲置；如果预先分配过小，又会造成数据溢出</li>\n</ul>\n<p><strong>链表的优缺点刚好和顺序表相反</strong></p>\n\n      </div>\n      <div class=\"md-sidebar-toc\">\n<div class=\"md-toc\">\n<details style=\"padding:0;;padding-left:0px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#线性表\" class=\"md-toc-link\"><p>线性表</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#逻辑结构\" class=\"md-toc-link\">\n            <p>逻辑结构</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#特点\" class=\"md-toc-link\">\n            <p>特点</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#运算\" class=\"md-toc-link\">\n            <p>运算</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#顺序存储\" class=\"md-toc-link\">\n            <p>顺序存储</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#链式存储\" class=\"md-toc-link\">\n            <p>链式存储</p>\n\n          </a></div><details style=\"padding:0;;padding-left:24px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#顺序表和链表的比较\" class=\"md-toc-link\"><p>顺序表和链表的比较</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#顺序表有点\" class=\"md-toc-link\">\n            <p>顺序表有点</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#顺序表缺点\" class=\"md-toc-link\">\n            <p>顺序表缺点</p>\n\n          </a></div>\n        </div>\n      </details>\n    \n        </div>\n      </details>\n    \n</div>\n</div>\n      <a id=\"sidebar-toc-btn\">≡</a>\n    \n    \n    \n    \n    \n    \n<script>\n\nvar sidebarTOCBtn = document.getElementById('sidebar-toc-btn')\nsidebarTOCBtn.addEventListener('click', function(event) {\n  event.stopPropagation()\n  if (document.body.hasAttribute('html-show-sidebar-toc')) {\n    document.body.removeAttribute('html-show-sidebar-toc')\n  } else {\n    document.body.setAttribute('html-show-sidebar-toc', true)\n  }\n})\n</script>\n      \n  \n    "}},"__N_SSG":true}