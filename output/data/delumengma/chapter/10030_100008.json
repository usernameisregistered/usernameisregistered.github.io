{"pageProps":{"bookInfo":{"id":"10030","name":"Web性能","fullPath":"D:\\personal\\文档\\passerby\\web\\Web性能","chapterList":[{"id":"10030_100000","type":"chapter","name":"概述","fullPath":"D:\\personal\\文档\\passerby\\web\\Web性能\\01概述.md","url":"/chapter/10030_100000.html","content":"\n    \n    \n      <div class=\"crossnote markdown-preview  \">\n      \n<h1 id=\"web性能\">web性能 </h1>\n<p>Web性能是客观的衡量标准，是用户对加载时间和运行时的直观体验。Web 性能指页面加载到可交互和可响应所消耗的时间</p>\n<p>主要包括以下内容</p>\n<ul>\n<li><strong>减少总体负载时间</strong> 需要多长时间才能将渲染网站所需的文件下载到用户的计算机上？这往往受到延迟、文件大小、文件数量以及其他因素的影响。一般策略是使文件尽可能小，尽可能减少 HTTP 请求的次数，并采用巧妙的加载技术（例如 preload）使文件更快可用。</li>\n<li><strong>尽快使网站可用</strong> 简单来说就是以合理的顺序加载你的网站资源，以便用户能够更快地开始使用。在用户继续执行主要任务的同时，任何其他资源都可以在后台继续加载。有时我们也会在实际需要时才加载资源（这被称为懒加载）。网站从开始加载，到达到可用状态为止所需的时间被称为交互等待时间</li>\n<li><strong>流畅性和交互性</strong> 应用程序是否可靠，使用起来是否愉快？滚动是否流畅？按钮是否可点击？弹出窗口是否能够快速打开，并且在打开时动画是否流畅？在制作流畅的应用程序时，有很多优秀实践可以参考。例如使用 CSS 动画而不是 JavaScript 来制作动画，并尽量减少由于 DOM 变化而引起重绘 UI 的次数。</li>\n<li><strong>感知性能</strong> 用户所体验到的，是网站看起来有多快，而不是网站实际有多快。用户感受到的性能与任何客观统计数据一样重要，甚至可能更重要。但这种主观的感受不容易测量。感知性能是用户的感受，而不是度量标准。即使操作将花费很长时间（因为延迟或其他原因），也可以通过显示“加载中”的旋转指示器或一系列有用的提示和技巧（或笑话，以及其他你认为合适的内容）来保持用户在等待期间的参与度。这种方法比什么都不显示要好得多<a href=\"./08%E6%84%9F%E7%9F%A5%E6%80%A7%E8%83%BD.md\">感知性能</a></li>\n<li><strong>性能测量</strong> Web 性能包括测量应用程序的实际速度和感知速度，在可能的情况下进行优化，然后监视性能，以确保已经优化过的内容保持优化状态</li>\n</ul>\n<h2 id=\"关键性能指南\">关键性能指南 </h2>\n<ul>\n<li><a href=\"./04CSS%E5%8A%A8%E7%94%BB%E4%B8%8EJavaScript%E5%8A%A8%E7%94%BB%E7%9A%84%E6%80%A7%E8%83%BD.md\">CSS动画与JavaScript动画的性能</a></li>\n<li><a href=\"./05%E4%BC%98%E5%8C%96%E5%90%AF%E5%8A%A8%E6%80%A7%E8%83%BD.md\">优化启动性能</a></li>\n<li><a href=\"./06%E4%BD%BF%E7%94%A8dns-prefetch.md\">使用dns-prefetch</a></li>\n<li><a href=\"./03%E5%85%B3%E9%94%AE%E6%B8%B2%E6%9F%93%E8%B7%AF%E5%BE%84.md\">关键渲染路径</a></li>\n<li><a href=\"./07%E6%87%92%E5%8A%A0%E8%BD%BD.md\">懒加载</a></li>\n<li><a href=\"./02%E6%B8%B2%E6%9F%93%E9%A1%B5%E9%9D%A2%EF%BC%9A%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.md\">渲染页面：浏览器的工作原理</a></li>\n<li><a href=\"./09JavaScript%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.md\">JavaScript性能优化</a></li>\n<li><a href=\"./10css%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.md\">css性能优化</a></li>\n<li><a href=\"./11HTML%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.md\">HTML性能优化</a></li>\n</ul>\n\n      </div>\n      <div class=\"md-sidebar-toc\">\n<div class=\"md-toc\">\n<details style=\"padding:0;;padding-left:0px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#web性能\" class=\"md-toc-link\"><p>web性能</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#关键性能指南\" class=\"md-toc-link\">\n            <p>关键性能指南</p>\n\n          </a></div>\n        </div>\n      </details>\n    \n</div>\n</div>\n      <a id=\"sidebar-toc-btn\">≡</a>\n    \n    \n    \n    \n    \n    \n<script>\n\nvar sidebarTOCBtn = document.getElementById('sidebar-toc-btn')\nsidebarTOCBtn.addEventListener('click', function(event) {\n  event.stopPropagation()\n  if (document.body.hasAttribute('html-show-sidebar-toc')) {\n    document.body.removeAttribute('html-show-sidebar-toc')\n  } else {\n    document.body.setAttribute('html-show-sidebar-toc', true)\n  }\n})\n</script>\n      \n  \n    "},{"id":"10030_100001","type":"chapter","name":"渲染页面：浏览器的工作原理","fullPath":"D:\\personal\\文档\\passerby\\web\\Web性能\\02渲染页面：浏览器的工作原理.md","url":"/chapter/10030_100001.html","content":"\n    \n    \n      <div class=\"crossnote markdown-preview  \">\n      \n<h1 id=\"渲染页面浏览器的工作原理\">渲染页面：浏览器的工作原理 </h1>\n<p>大部分情况下，浏览器被认为是单线程的。也就是说，它们在执行一个任务之前会从头到尾完成一个任务，然后才会接受另一个任务。为了实现流畅的交互，开发者的目标是确保网站的交互性能良好，从流畅的滚动到对触摸的响应。渲染时间非常关键，我们需要确保主线程能够完成交给它的所有工作，并且始终能够处理用户交互。通过理解浏览器的单线程特性，并尽可能和适当地减少主线程的责任，可以提高网页性能，以确保渲染流畅，并且对交互的响应是即时的</p>\n<h2 id=\"一导航\">一：导航 </h2>\n<p>导航是加载 web 页面的第一步。它发生在以下情形：用户通过在地址栏输入一个 URL、点击一个链接、提交表单或者是其他的行为。</p>\n<h2 id=\"二dns-查询\">二：DNS 查询 </h2>\n<p>对于一个 web 页面来说导航的第一步是要去寻找页面资源的位置。如果导航到 <a href=\"https://example.com\">https://example.com</a>，HTML 页面被定位到 IP 地址为 93.184.216.34 的服务器。如果以前没有访问过这个网站，就需要进行 DNS 查询<br>\n浏览器向域名服务器发起 DNS 查询请求，最终得到一个 IP 地址。第一次请求之后，这个 IP 地址可能会被缓存一段时间，这样可以通过从缓存里面检索 IP 地址而不是再通过域名服务器进行查询来加速后续的请求。<br>\n每个主机名 (hostname) 在页面加载时通常只需要进行一次 DNS 查询。但是，对于页面指向的不同的主机名，则需要多次 DNS 查询。如果字体（font）、图像（image）、脚本（script）、广告（ads）和网站统计（metric）都有不同的主机名，则需要对每一个主机名进行 DNS 查询<br>\n但是对于移动网络，DNS 查询可能存在性能问题。当一个用户使用移动网络时，所有 DNS 查询必须从手机发送到基站，然后到达一个权威 DNS 服务器。手机、信号塔、域名服务器之间的距离会显著增加延迟。</p>\n<h2 id=\"三tcp握手\">三：TCP握手 </h2>\n<p>一旦获取到服务器 IP 地址，浏览器就会通过TCP“三次握手”与服务器建立连接。这个机制的是用来让两端尝试进行通信——在浏览器和服务器通过上层协议 HTTPS 发送数据之前，可以协商网络 TCP 套接字连接的一些参数</p>\n<p>TCP 的“三次握手”技术经常被称为“SYN-SYN-ACK”——更确切的说是 SYN、SYN-ACK、ACK——因为通过 TCP 首先发送了三个消息进行协商，然后在两台电脑之间开始一个 TCP 会话。是的，这意味着当请求尚未发出的时候，终端与每台服务器之间还要来回多发送三条消息。</p>\n<h2 id=\"四tls协商\">四：TLS协商 </h2>\n<p>对于通过 HTTPS 建立的安全连接，还需要另一次 \"握手\"。这种握手，或者说 TLS 协商，决定使用哪种密码对通信进行加密，验证服务器，并在开始实际数据传输前建立安全连接。这就需要在实际发送内容请求之前，再往返服务器五次。</p>\n<p>虽然建立安全连接的步骤增加了等待加载页面的时间，但是为了建立一个安全的连接而增加延迟是值得的，因为在浏览器和 web 服务器之间传输的数据不可以被第三方解密。</p>\n<p>如此经过 8 次往返，浏览器终于可以发出请求。</p>\n<h2 id=\"五响应\">五：响应 </h2>\n<p>一旦我们建立了和 web 服务器的连接，浏览器就会代表用户发送一个初始的 HTTP GET 请求，对于网站来说，这个请求通常是一个 HTML 文件。一旦服务器收到请求，它将使用相关的响应头和 HTML 的内容进行回复</p>\n<p>初始请求的响应包含所接收数据的第一个字节。首字节时间（TTFB）是用户通过点击链接进行请求与收到第一个 HTML 数据包之间的时间。第一个内容分块通常是 14KB 的数据。</p>\n<h3 id=\"五一拥塞控制--tcp-慢启动\">五（一）：拥塞控制 / TCP 慢启动 </h3>\n<p>在传输过程中，TCP 包被分割成段。由于 TCP 保证了数据包的顺序，因此服务器在发送一定数量的分段后，必须从客户端接收一个 ACK 包的确认。</p>\n<p>如果服务器在发送每个分段之后都等待 ACK，那么客户端将频繁地发送 ACK，并且可能会增加传输时间，即使在网络负载较低的情况下也是如此。</p>\n<p>另一方面，一次发送过多的分段会导致在繁忙的网络中客户端无法接收分段并且长时间地只会持续发送 ACK，服务器必须不断重新发送分段的问题。</p>\n<p>为了平衡传输分段的数量，TCP 慢启动算法用于逐渐增加传输数据量，直到确定最大网络带宽，并在网络负载较高时减少传输数据量。</p>\n<p>传输段的数量由拥塞窗口（CWND）的值控制，该值可初始化为 1、2、4 或 10 MSS（以太网协议中的 MSS 为 1500 字节）。该值是发送的字节数，客户端收到后必须发送 ACK。</p>\n<p>如果收到 ACK，那么 CWND 值将加倍，这样服务器下次就能发送更多的数据分段。相反，如果没有收到 ACK，那么 CWND 值将减半。因此，这种机制在发送过多分段和过少分段之间取得了平衡。</p>\n<h3 id=\"五二-解析\">五（二）： 解析 </h3>\n<p>一旦浏览器收到第一个数据分块，它就可以开始解析收到的信息。“解析”是浏览器将通过网络接收的数据转换为 DOM 和 CSSOM 的步骤，通过渲染器在屏幕上将它们绘制成页面。</p>\n<p>虽然 DOM 是浏览器标记的内部表示，但是它也被暴露出来，可以通过 JavaScript 中的各种 API 进行操作。</p>\n<p>即使请求页面的 HTML 大于初始的 14KB 数据包，浏览器也将根据其拥有的数据开始解析并尝试渲染。这就是为什么在前 14KB 中包含浏览器开始渲染页面所需的所有内容，或者至少包含页面模板（第一次渲染所需的 CSS 和 HTML）对于 web 性能优化来说是重要的。但是在渲染到屏幕上面之前，HTML、CSS、JavaScript 必须被解析完成。</p>\n<h3 id=\"五三构建-dom-树\">五（三）：构建 DOM 树 </h3>\n<p>第一步是处理 HTML 标记并构造 DOM 树。HTML 解析涉及到符号化和树的构造。HTML 标记包括开始和结束标记，以及属性名和值。如果文档格式良好，则解析它会简单而快速。解析器将标记化的输入解析到文档中，构建文档树</p>\n<p>当解析器发现非阻塞资源，例如一张图片，浏览器会请求这些资源并且继续解析。当遇到一个 CSS 文件时，解析也可以继续进行，但是对于script标签（特别是没有 async 或者 defer 属性的）会阻塞渲染并停止 HTML 的解析。尽管浏览器的预加载扫描器加速了这个过程，但过多的脚本仍然是一个重要的瓶颈</p>\n<h3 id=\"五四预加载扫描器\">五（四）：预加载扫描器 </h3>\n<p>浏览器构建 DOM 树时，这个过程占用了主线程。同时，预加载扫描器会解析可用的内容并请求高优先级的资源，如 CSS、JavaScript 和 web 字体。多亏了预加载扫描器，我们不必等到解析器找到对外部资源的引用时才去请求。它将在后台检索资源，而当主 HTML 解析器解析到要请求的资源时，它们可能已经下载中了，或者已经被下载。预加载扫描器提供的优化减少了阻塞。</p>\n<h3 id=\"五五构建-cssom-树\">五（五）：构建 CSSOM 树 </h3>\n<p>处理 CSS 并构建 CSSOM 树。CSS 对象模型和 DOM 是相似的。DOM 和 CSSOM 是两棵树。它们是独立的数据结构。浏览器将 CSS 规则转换为可以理解和使用的样式映射。浏览器遍历 CSS 中的每个规则集，根据 CSS 选择器创建具有父、子和兄弟关系的节点树。</p>\n<h3 id=\"五六-javascript-编译\">五（六）： JavaScript 编译 </h3>\n<p>在解析 CSS 和创建 CSSOM 的同时，包括 JavaScript 文件在内的其他资源也在下载（这要归功于预加载扫描器）。JavaScript 会被解析、编译和解释。脚本被解析为抽象语法树。有些浏览器引擎会将抽象语法树输入编译器，输出字节码。这就是所谓的 JavaScript 编译。大部分代码都是在主线程上解释的，但也有例外，例如在 web worker 中运行的代码。</p>\n<h3 id=\"五七-构建无障碍树\">五（七）： 构建无障碍树 </h3>\n<p>浏览器还构建辅助设备用于分析和解释内容的无障碍树。无障碍对象模型（AOM）类似于 DOM 的语义版本。当 DOM 更新时，浏览器会更新辅助功能树。辅助技术本身无法修改无障碍树。</p>\n<h2 id=\"六渲染\">六：渲染 </h2>\n<p>渲染步骤包括样式、布局、绘制，在某些情况下还包括合成。在解析步骤中创建的 CSSOM 树和 DOM 树组合成一个渲染树，然后用于计算每个可见元素的布局，然后将其绘制到屏幕上。在某些情况下，可以将内容提升到它们自己的层并进行合成，通过在 GPU 而不是 CPU 上绘制屏幕的一部分来提高性能，从而释放主线程。</p>\n<h3 id=\"六一样式\">六（一）：样式 </h3>\n<p>关键呈现路径的第三步是将 DOM 和 CSSOM 组合成渲染树。计算样式树或渲染树的构建从 DOM 树的根开始，遍历每个可见节点。</p>\n<p>不会被显示的元素，如 <strong>head</strong> 元素及其子元素，以及任何带有 display: none 的节点，如用户代理样式表中的 script { display: none; }，都不会包含在渲染树中，因为它们不会出现在渲染输出中。应用了 visibility: hidden 的节点会包含在渲染树中，因为它们会占用空间。由于我们没有给出任何指令来覆盖用户代理默认值，因此上述代码示例中的 script 节点不会包含在渲染树中。</p>\n<p>每个可见节点都应用了 CSSOM 规则。渲染树包含所有可见节点的内容和计算样式，将所有相关样式与 DOM 树中的每个可见节点匹配起来，并根据 CSS 级联，确定每个节点的计算样式。</p>\n<h3 id=\"六二布局\">六（二）：布局 </h3>\n<p>在渲染树上运行布局以计算每个节点的几何体。布局是确定呈现树中所有节点的尺寸和位置，以及确定页面上每个对象的大小和位置的过程。重排是后续过程中对页面的任意部分或整个文档的大小和位置的重新计算</p>\n<p>渲染树构建完毕后，浏览器就开始布局。渲染树标识了哪些节点会显示（即使不可见）及其计算样式，但不标识每个节点的尺寸或位置。为了确定每个对象的确切大小和位置，浏览器会从渲染树的根开始遍历。</p>\n<p>在网页上，大多数东西都是一个盒子。不同的设备和不同的桌面设置意味着无限数量的不同视区大小。在此阶段，根据视口大小，浏览器将确定屏幕上所有盒子的大小。以视口大小为基础，布局通常从 body 开始，设置所有 body 后代的大小，同时给不知道其尺寸的替换元素（例如图像）提供占位符空间，空间大小以相应元素盒模型的属性为准。</p>\n<p>第一次确定每个节点的大小和位置称为布局。随后对节点大小和位置的重新计算称为重排。在我们的示例中，假设初始布局发生在返回图像之前。由于我们没有声明图像的尺寸，因此一旦知道图像的尺寸，就会出现重排。</p>\n<h2 id=\"七-绘制\">七： 绘制 </h2>\n<p>将各个节点绘制到屏幕上，其中第一次的绘制被称为首次有意义的绘制。在绘制或光栅化阶段，浏览器将在布局阶段计算的每个盒子转换为屏幕上的实际像素。绘制涉及将元素的每个可见部分绘制到屏幕上，包括文本、颜色、边框、阴影以及按钮和图像等替换元素。浏览器需要以超快的速度执行这个过程。</p>\n<p>为了确保平滑滚动和动画效果，包括计算样式、回流和绘制等占用主线程的所有操作，必须在不超过 16.67 毫秒的时间内完成。在 2048 x 1536 分辨率下，iPad 需要将超过 314.5 万个像素绘制到屏幕上。这是非常多的像素，必须要非常快速地绘制出来。为了确保重绘能够比初始绘制更快地完成，绘制到屏幕的操作通常被分解成几个图层。如果发生这种情况，浏览器则需要进行合成。</p>\n<p>绘制可以将布局树中的元素分解为多个层。将内容提升到 GPU 上的层（而不是 CPU 上的主线程）可以提高绘制和重新绘制性能。有一些特定的属性和元素可以实例化一个层，包括 <strong>video</strong> 和 <strong>canvas</strong>，任何 CSS 属性为 opacity 、3D transform、will-change 的元素，还有一些其他元素。这些节点将与子节点一起绘制到它们自己的层上，除非子节点由于上述一个（或多个）原因需要自己的层。</p>\n<p>分层确实可以提高性能，但在内存管理方面成本较高，因此不应作为 Web 性能优化策略的过度使用。</p>\n<h3 id=\"七一-合成\">七（一）: 合成 </h3>\n<p>当文档的各个部分以不同的层绘制，相互重叠时，必须进行合成，以确保它们以正确的顺序绘制到屏幕上，并正确显示内容</p>\n<p>当页面继续加载资源时，可能会发生回流（回想一下我们迟到的示例图像），回流会触发重新绘制和重新合成。如果我们定义了图像的大小，就不需要重新绘制，只需要绘制需要重新绘制的层，并在必要时进行合成。但我们并没有定义图像大小！所以从服务器获取图像后，渲染过程将返回到布局步骤并从那里重新开始</p>\n<h2 id=\"八-交互\">八： 交互 </h2>\n<p>一旦主线程绘制页面完成，你会认为我们已经“准备好了”，但事实并非如此。如果加载包括正确延迟加载的 JavaScript，并且仅在 onload 事件触发后执行，那么主线程可能会忙于执行脚本，无法用于滚动、触摸和其他交互操作。</p>\n<p>可交互时间（TTI）是测量从第一个请求导致 DNS 查询和 SSL 连接到页面可交互时所用的时间——可交互是在首次内容绘制之后页面在 50ms 内响应用户的交互。如果主线程正在解析、编译和执行 JavaScript，则无法及时（小于 50ms）响应用户交互。</p>\n\n      </div>\n      <div class=\"md-sidebar-toc\">\n<div class=\"md-toc\">\n<details style=\"padding:0;;padding-left:0px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#渲染页面浏览器的工作原理\" class=\"md-toc-link\"><p>渲染页面：浏览器的工作原理</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#一导航\" class=\"md-toc-link\">\n            <p>一：导航</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#二dns-查询\" class=\"md-toc-link\">\n            <p>二：DNS 查询</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#三tcp握手\" class=\"md-toc-link\">\n            <p>三：TCP握手</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#四tls协商\" class=\"md-toc-link\">\n            <p>四：TLS协商</p>\n\n          </a></div><details style=\"padding:0;;padding-left:24px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#五响应\" class=\"md-toc-link\"><p>五：响应</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#五一拥塞控制--tcp-慢启动\" class=\"md-toc-link\">\n            <p>五（一）：拥塞控制 / TCP 慢启动</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#五二-解析\" class=\"md-toc-link\">\n            <p>五（二）： 解析</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#五三构建-dom-树\" class=\"md-toc-link\">\n            <p>五（三）：构建 DOM 树</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#五四预加载扫描器\" class=\"md-toc-link\">\n            <p>五（四）：预加载扫描器</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#五五构建-cssom-树\" class=\"md-toc-link\">\n            <p>五（五）：构建 CSSOM 树</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#五六-javascript-编译\" class=\"md-toc-link\">\n            <p>五（六）： JavaScript 编译</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#五七-构建无障碍树\" class=\"md-toc-link\">\n            <p>五（七）： 构建无障碍树</p>\n\n          </a></div>\n        </div>\n      </details>\n    <details style=\"padding:0;;padding-left:24px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#六渲染\" class=\"md-toc-link\"><p>六：渲染</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#六一样式\" class=\"md-toc-link\">\n            <p>六（一）：样式</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#六二布局\" class=\"md-toc-link\">\n            <p>六（二）：布局</p>\n\n          </a></div>\n        </div>\n      </details>\n    <details style=\"padding:0;;padding-left:24px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#七-绘制\" class=\"md-toc-link\"><p>七： 绘制</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#七一-合成\" class=\"md-toc-link\">\n            <p>七（一）: 合成</p>\n\n          </a></div>\n        </div>\n      </details>\n    <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#八-交互\" class=\"md-toc-link\">\n            <p>八： 交互</p>\n\n          </a></div>\n        </div>\n      </details>\n    \n</div>\n</div>\n      <a id=\"sidebar-toc-btn\">≡</a>\n    \n    \n    \n    \n    \n    \n<script>\n\nvar sidebarTOCBtn = document.getElementById('sidebar-toc-btn')\nsidebarTOCBtn.addEventListener('click', function(event) {\n  event.stopPropagation()\n  if (document.body.hasAttribute('html-show-sidebar-toc')) {\n    document.body.removeAttribute('html-show-sidebar-toc')\n  } else {\n    document.body.setAttribute('html-show-sidebar-toc', true)\n  }\n})\n</script>\n      \n  \n    "},{"id":"10030_100002","type":"chapter","name":"关键渲染路径","fullPath":"D:\\personal\\文档\\passerby\\web\\Web性能\\03关键渲染路径.md","url":"/chapter/10030_100002.html","content":"\n    \n    \n      <div class=\"crossnote markdown-preview  \">\n      \n<h1 id=\"关键渲染路径\">关键渲染路径 </h1>\n<p>关键渲染路径是浏览器将 HTML，CSS 和 JavaScript 转换为屏幕上的像素所经历的步骤序列。优化关键渲染路径可提高渲染性能。关键渲染路径包含了文档对象模型（DOM）、CSS 对象模型（CSSOM）、渲染树和布局。</p>\n<p>在解析 HTML 时会创建文档对象模型。HTML 可以请求 JavaScript，而 JavaScript 反过来，又可以更改 DOM。HTML 包含或请求样式，依次来构建 CSS 对象模型。浏览器引擎将两者结合起来以创建渲染树。布局确定页面上所有内容的大小和位置。确定布局后，将像素绘制到屏幕上。<br>\n优化关键渲染路径可以缩短首次渲染的时间。了解和优化关键渲染路径对于确保重排和重绘可以每秒 60 帧的速度进行，以确保高效的用户交互并避免卡顿是很重要的。</p>\n<h2 id=\"理解-crp\">理解 CRP </h2>\n<p>Web 性能包含了服务器请求和响应、加载、执行脚本、渲染、布局和绘制每个像素到屏幕上。</p>\n<p>网页请求从 HTML 文件请求开始。服务器返回 HTML——响应头和数据。然后浏览器开始解析 HTML，转换收到的数据为 DOM 树。浏览器每次发现外部资源就初始化请求，无论是样式、脚本或者嵌入的图片引用。有时请求会阻塞，这意味着解析剩下的 HTML 会被终止直到重要的资源被处理。浏览器接着解析 HTML，发请求和构造 DOM 直到文件结尾，这时开始构造 CSS 对象模型。等到 DOM 和 CSSOM 完成之后，浏览器构造渲染树，计算所有可见内容的样式。一旦渲染树完成布局开始，定义所有渲染树元素的位置和大小。完成之后，页面被渲染完成，或者说是绘制到屏幕上。</p>\n<h3 id=\"文档对象模型\">文档对象模型 </h3>\n<p>DOM 构建是增量的。HTML 响应变成令牌（token），令牌变成节点，而节点又变成 DOM 树。单个 DOM 节点以 startTag 令牌开始，以 endTag 令牌结束。节点包含有关 HTML 元素的所有相关信息。该信息是使用令牌描述的。节点根据令牌层次结构连接到 DOM 树中。如果另一组 startTag 和 endTag 令牌位于一组 startTag 和 endTag 之间，则你在节点内有一个节点，这就是我们定义 DOM 树层次结构的方式。</p>\n<p>节点数量越多，关键渲染路径中的后续事件将花费的时间就越长</p>\n<h3 id=\"css-对象模型\">CSS 对象模型 </h3>\n<p>DOM 包含页面所有的内容。CSSOM 包含了页面所有的样式，也就是如何展示 DOM 的信息。CSSOM 跟 DOM 很像，但是不同。DOM 构造是增量的，CSSOM 却不是。CSS 是渲染阻塞的：浏览器会阻塞页面渲染直到它接收和执行了所有的 CSS。CSS 是渲染阻塞是因为规则可以被覆盖，所以内容不能被渲染直到 CSSOM 的完成。</p>\n<p>CSS 有其自身的规则集合用来定义标识。注意 CSS 中的 C 代表的是“层叠”。CSS 规则是级联的。随着解析器转换标识为节点，节点的后代继承了样式。像处理 HTML 那样的增量处理功能没有被应用到 CSS 上，因为后续规则可能被之前的所覆盖。CSS 对象模型随着 CSS 的解析而被构建，但是直到完成都不能被用来构建渲染树，因为样式将会被之后的解析所覆盖而不应该被渲染到屏幕上。</p>\n<p>从选择器性能的角度，更少的特定选择器是比更多的要快。例如，.foo {} 是比 .bar .foo {} 更快的因为当浏览器发现 .foo ，接下来必须沿着 DOM 向上走来检查 .foo 是不是有一个祖先 .bar。越是具体的标签浏览器就需要更多的工作，但这样的弊端未必值得优化。</p>\n<h3 id=\"渲染树\">渲染树 </h3>\n<p>渲染树包括了内容和样式：DOM 和 CSSOM 树结合为渲染树。为了构造渲染树，浏览器检查每个节点，从 DOM 树的根节点开始，并且决定哪些 CSS 规则被添加。</p>\n<p>渲染树只包含了可见内容。头部（通常）不包含任何可见信息，因此不会被包含在渲染树中。如果有元素上有 display: none;，它本身和其后代都不会出现在渲染树中。</p>\n<h3 id=\"布局\">布局 </h3>\n<p>一旦渲染树被构建，布局变成了可能。布局取决于屏幕的尺寸。布局这个步骤决定了在哪里和如何在页面上放置元素，决定了每个元素的宽和高，以及他们之间的相关性。</p>\n<p>什么是一个元素的宽？块级元素，根据定义，默认有父级宽度的 100%。一个宽度 50% 的元素，将占据父级宽度的一半。除非另外定义，body 有 100% 的宽，意味着它占据视窗的 100%。设备的宽度影响布局。</p>\n<p>视窗的元标签定义了布局视窗的宽度，从而影响布局。没有的话，浏览器使用视窗的默认宽度，默认全屏浏览器通常是 960px。在默认情况下像你的手机浏览器的全屏浏览器，通过设置 &lt;meta name=\"viewport\" content=\"width=device-width\"&gt;，宽度将会是设备的宽度而不是默认的视窗宽度。设备宽度当用户在横向和纵向模式旋转他们的手机时将会改变。布局发生在每次设备旋转或浏览器缩放时。</p>\n<p>布局性能受 DOM 影响——节点数越多，布局就需要更长的时间。布局将会变成瓶颈，如果期间需要滚动或者其他动画将会导致迟滞。20ms 的延迟在加载或者方向改变时或许还可以接受，但在动画或滚动时就会迟滞。任何渲染树改变的时候，像添加节点、改变内容或者在一个节点更新盒模型样式的时候布局就会发生</p>\n<h3 id=\"绘制\">绘制 </h3>\n<p>将像素绘制在屏幕上。一旦渲染树创建并且布局完成，像素就可以被绘制在屏幕上。加载时，整个屏幕被绘制出来。之后，只有受影响的屏幕区域会被重绘，浏览器被优化为只重绘需要绘制的最小区域。绘制时间取决于何种类型的更新被附加在渲染树上。绘制是一个非常快的过程，所以聚焦在提升性能时这大概不是最有效的部分，重点要记住的是当测量一个动画帧需要的时间需要考虑到布局和重绘时间。添加到节点的样式会增加渲染时间，</p>\n<h3 id=\"优化-crp\">优化 CRP </h3>\n<p>提升页面加载速度需要通过被加载资源的优先级、控制它们加载的顺序和减小这些资源的体积</p>\n<ol>\n<li>通过异步、延迟加载或者消除非关键资源来减少关键资源的请求数量</li>\n<li>优化必须的请求数量和每个请求的文件体积</li>\n<li>通过区分关键资源的优先级来优化被加载关键资源的顺序，来缩短关键路径长度。</li>\n</ol>\n\n      </div>\n      <div class=\"md-sidebar-toc\">\n<div class=\"md-toc\">\n<details style=\"padding:0;;padding-left:0px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#关键渲染路径\" class=\"md-toc-link\"><p>关键渲染路径</p>\n</a>\n          </summary>\n        <div>\n          <details style=\"padding:0;;padding-left:24px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#理解-crp\" class=\"md-toc-link\"><p>理解 CRP</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#文档对象模型\" class=\"md-toc-link\">\n            <p>文档对象模型</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#css-对象模型\" class=\"md-toc-link\">\n            <p>CSS 对象模型</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#渲染树\" class=\"md-toc-link\">\n            <p>渲染树</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#布局\" class=\"md-toc-link\">\n            <p>布局</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#绘制\" class=\"md-toc-link\">\n            <p>绘制</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#优化-crp\" class=\"md-toc-link\">\n            <p>优化 CRP</p>\n\n          </a></div>\n        </div>\n      </details>\n    \n        </div>\n      </details>\n    \n</div>\n</div>\n      <a id=\"sidebar-toc-btn\">≡</a>\n    \n    \n    \n    \n    \n    \n<script>\n\nvar sidebarTOCBtn = document.getElementById('sidebar-toc-btn')\nsidebarTOCBtn.addEventListener('click', function(event) {\n  event.stopPropagation()\n  if (document.body.hasAttribute('html-show-sidebar-toc')) {\n    document.body.removeAttribute('html-show-sidebar-toc')\n  } else {\n    document.body.setAttribute('html-show-sidebar-toc', true)\n  }\n})\n</script>\n      \n  \n    "},{"id":"10030_100003","type":"chapter","name":"CSS动画与JavaScript动画的性能","fullPath":"D:\\personal\\文档\\passerby\\web\\Web性能\\04CSS动画与JavaScript动画的性能.md","url":"/chapter/10030_100003.html","content":"\n    \n    \n      <div class=\"crossnote markdown-preview  \">\n      \n<h1 id=\"css-动画与-javascript-动画的性能\">CSS 动画与 JavaScript 动画的性能 </h1>\n<p>对众多应用程序而言，动画对提供友好的用户体验有着关键的作用。我们有很多方式生成 web 动画，比如 CSS transition 和 animation 或者基于 JavaScript 的动画（使用 requestAnimationFrame()）。</p>\n<h2 id=\"css-过渡和动画\">CSS 过渡和动画 </h2>\n<ul>\n<li><strong>CSS transition</strong> 提供了一个简单的方式去创造当前样式与结束状态样式之间的动画，比如一个 button 的普通状态和 hover 状态。</li>\n<li><strong>CSS animation</strong> 许开发者去通过一个初始状态属性值集合与最终状态属性值集合创造动画，而不是单单的初始和最终状态。CSS animations 由两部分组成：描述 CSS 动画的样式，以及一组关键帧，表示动画样式的开始和结束状态，以及可能的中间状态。</li>\n</ul>\n<p>就性能方面来说，无论通过 CSS animation 还是 transition 创造动画，</p>\n<h2 id=\"requestanimationframe\">requestAnimationFrame </h2>\n<p>提供了一种用 JavaScript 代码制作动画的高效方式。本方法的回调函数在绘制下一帧之前由浏览器调用。与需要一个延迟参数的 setTimeout() 或 setInterval() 相比，requestAnimationFrame() 效率高得多。开发人员可以在 requestAnimationFrame() 回调函数中通过简单地改变元素的样式（或者更新画布绘制，等等）来创建动画。</p>\n<h2 id=\"性能对比transitions-vs-requestanimationframe\">性能对比：transitions vs requestAnimationFrame </h2>\n<p>事实上，大多数场景下，基于 CSS 的动画几乎是跟 JavaScript 动画表现一致，</p>\n<p>一些基于 Javascript 的动画库，像GSAP和Velocity.JS，甚至声称他们在性能上可以做得比原生 CSS transition/animation 更好。这是可能的，因为在重绘事件发生之前，CSS transition 和 animation 在主的 UI 线程仅仅是重新采集元素的样式，这跟通过 requestAnimationFrame() 回调获取重新采集元素样式是一样的，也是在下一次重绘之前触发。假如二者都是在主 UI 线程创建的动画，那它们在性能方面没有差异。</p>\n<p>虽然他们在性能之间没有差异，但是仍然认为 CSS 动画是更好的选择。为什么？关键是只要动画涉及的属性不引起 reflow（重新布局），我们可以把采样操作移出主线程。最常见的属性是 CSS transform。如果一个元素被提升为一个 layer，transform 属性动画就可以在 GPU中进行。这意味着更好地性能，特别是在移动设备上。</p>\n\n      </div>\n      <div class=\"md-sidebar-toc\">\n<div class=\"md-toc\">\n<details style=\"padding:0;;padding-left:0px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#css-动画与-javascript-动画的性能\" class=\"md-toc-link\"><p>CSS 动画与 JavaScript 动画的性能</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#css-过渡和动画\" class=\"md-toc-link\">\n            <p>CSS 过渡和动画</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#requestanimationframe\" class=\"md-toc-link\">\n            <p>requestAnimationFrame</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#性能对比transitions-vs-requestanimationframe\" class=\"md-toc-link\">\n            <p>性能对比：transitions vs requestAnimationFrame</p>\n\n          </a></div>\n        </div>\n      </details>\n    \n</div>\n</div>\n      <a id=\"sidebar-toc-btn\">≡</a>\n    \n    \n    \n    \n    \n    \n<script>\n\nvar sidebarTOCBtn = document.getElementById('sidebar-toc-btn')\nsidebarTOCBtn.addEventListener('click', function(event) {\n  event.stopPropagation()\n  if (document.body.hasAttribute('html-show-sidebar-toc')) {\n    document.body.removeAttribute('html-show-sidebar-toc')\n  } else {\n    document.body.setAttribute('html-show-sidebar-toc', true)\n  }\n})\n</script>\n      \n  \n    "},{"id":"10030_100004","type":"chapter","name":"优化启动性能","fullPath":"D:\\personal\\文档\\passerby\\web\\Web性能\\05优化启动性能.md","url":"/chapter/10030_100004.html","content":"\n    \n    \n      <div class=\"crossnote markdown-preview  \">\n      \n<h1 id=\"优化启动性能\">优化启动性能 </h1>\n<h2 id=\"更好地启动\">更好地启动 </h2>\n<p>不论在什么平台上，尽可能快地启动总是一个好主意。因为这是个很宽泛的问题，在这里我们不会着重关注。相反我们会关注构建 Web 应用时更重要的一个问题：尽可能异步地启动。这意味着不要将你所有的启动代码在应用主线程中的唯一一个事件处理函数中运行。</p>\n<p>相反，你应该这样写你的代码，让你的应用在后台线程创建一个 Web worker ，做尽可能多的工作（比如，获取和处理数据）。然后，所有必须在主线程中完成的事情（比如用户事件和渲染用户界面）应该被分成小的片段，这样，当应用启动时，应用的事件循环就可以持续地运行下去。这可以避免应用、浏览器以及/或者设备出现锁死。</p>\n<h2 id=\"如果打算重构\">如果打算重构 </h2>\n<p>如果你从头开始你的项目，通常很容易把所有的东西都写成“正确的方式”，使得代码片段具有合适的异步性。所有纯粹在启动时的计算应该在后台线程中执行，同时使主线程事件的运行时间尽可能缩短。应包含进度指示器，以便用户知道发生了什么以及他们将要等待多久。从理论上来说，无论如何，设计新的应用程序并能很好地启动应该很容易。</p>\n<p>但是，另一方面，当你将现有应用程序移植到 Web 上时，问题会变得棘手。桌面应用程序不需要以异步方式编写，因为通常操作系统会为你处理该问题；或者应用程序当前是唯一正在运行的主要任务，而这具体取决于操作环境。源程序可能有一个主循环，可以被轻松地改成异步操作（通过分别运行每个主循环）；启动通常只是一个持续的整体过程，过程中可能会定期更新进度表。</p>\n<p>虽然你可以使用 Web workers 异步运行体积巨大，持续时间长的 JavaScript 代码块，但还是要给出一个重大警告：workers 不具备访问 WebGL 或音频的能力，亦不能向主线程发送同步消息，所以你甚至不能将这些 API 代理到主线程中。所有的这一切意味着，除非你够轻松地抽取启动过程中的“纯计算”代码块，加入到 workers 中，否则你最后还是得在主线程上运行大部分或全部的启动代码。</p>\n<h2 id=\"异步化\">异步化 </h2>\n<ul>\n<li>启动时，在需要异步执行的脚本标签上使用 defer 或 async 属性。这会允许 HTML 解析器更高效地处理文档</li>\n<li>如果你需要解码资源文件（比如，解码 JPEG 文件并将其转换为原始纹理数据，以便随后在 WebGL 中使用），最好在 workers 里做这件事。</li>\n<li>当处理浏览器支持的数据格式时（例如，解析图像数据），使用设备或浏览器内置的解码器而不是运行你自己的或者使用 or using one from the original codebase。预先提供的那个基本上一定会快得多，并且能够减小你的应用的启动体积。另外，浏览器可以自动并行化这些解码器的工作。</li>\n<li>所有能并行的数据处理都应该并行化。不要一团接一团地处理数据，如果可能的话，同时处理它们！</li>\n<li>在你启动的HTML文件中，不要包含不会在关键路径下出现的脚本或样式表。只在需要时加载他们</li>\n<li>不要强迫 Web 引擎构建不需要的 DOM，一种简单的“hack”的方式是把你的 HTML 留在文档里，但是在外层包裹注释，如下</li>\n</ul>\n<pre data-role=\"codeBlock\" data-info=\"html\" class=\"language-html html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>foo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token comment\">&lt;!--\n    &lt;div&gt; ...\n  --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre><pre data-role=\"codeBlock\" data-info=\"js\" class=\"language-javascript js\"><code><span class=\"token comment\">// 当文档的一部分需要被渲染时，加载被注释的 HTML</span>\nfoo<span class=\"token punctuation\">.</span><span class=\"token property-access\">innerHTML</span> <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">.</span><span class=\"token property-access\">firstChild</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">nodeValue</span><span class=\"token punctuation\">;</span>\n</code></pre><h2 id=\"其他\">其他 </h2>\n<ol>\n<li>下载时间：使用托管服务器，压缩数据</li>\n<li>GPU 因素</li>\n<li>数据大小</li>\n<li>主观因素：在启动过程中做一些事情来使用户专注于其上，这会让时间看起来过得更快些</li>\n</ol>\n\n      </div>\n      <div class=\"md-sidebar-toc\">\n<div class=\"md-toc\">\n<details style=\"padding:0;;padding-left:0px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#优化启动性能\" class=\"md-toc-link\"><p>优化启动性能</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#更好地启动\" class=\"md-toc-link\">\n            <p>更好地启动</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#如果打算重构\" class=\"md-toc-link\">\n            <p>如果打算重构</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#异步化\" class=\"md-toc-link\">\n            <p>异步化</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#其他\" class=\"md-toc-link\">\n            <p>其他</p>\n\n          </a></div>\n        </div>\n      </details>\n    \n</div>\n</div>\n      <a id=\"sidebar-toc-btn\">≡</a>\n    \n    \n    \n    \n    \n    \n<script>\n\nvar sidebarTOCBtn = document.getElementById('sidebar-toc-btn')\nsidebarTOCBtn.addEventListener('click', function(event) {\n  event.stopPropagation()\n  if (document.body.hasAttribute('html-show-sidebar-toc')) {\n    document.body.removeAttribute('html-show-sidebar-toc')\n  } else {\n    document.body.setAttribute('html-show-sidebar-toc', true)\n  }\n})\n</script>\n      \n  \n    "},{"id":"10030_100005","type":"chapter","name":"使用dns-prefetch","fullPath":"D:\\personal\\文档\\passerby\\web\\Web性能\\06使用dns-prefetch.md","url":"/chapter/10030_100005.html","content":"\n    \n    \n      <div class=\"crossnote markdown-preview  \">\n      \n<h1 id=\"使用dns-prefetch\">使用dns-prefetch </h1>\n<p>DNS-prefetch 尝试在请求资源之前解析域名。这可能是后面要加载的文件，也可能是用户尝试打开的链接目标。</p>\n<h2 id=\"为什么要使用-dns-prefetch\">为什么要使用 dns-prefetch？ </h2>\n<p>当浏览器从（第三方）服务器请求资源时，必须先将该跨源域名解析为 IP 地址，然后浏览器才能发出请求。此过程称为 DNS 解析。虽然 DNS 缓存可以帮助减少此延迟，但 DNS 解析可能会给请求增加明显的延迟。对于打开了与许多第三方的连接的网站，此延迟可能会大大降低加载性能。</p>\n<p>dns-prefetch 可帮助开发人员掩盖 DNS 解析延迟</p>\n<pre data-role=\"codeBlock\" data-info=\"html\" class=\"language-html html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dns-prefetch<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://fonts.googleapis.com/<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n</code></pre>\n      </div>\n      <div class=\"md-sidebar-toc\">\n<div class=\"md-toc\">\n<details style=\"padding:0;;padding-left:0px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#使用dns-prefetch\" class=\"md-toc-link\"><p>使用dns-prefetch</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#为什么要使用-dns-prefetch\" class=\"md-toc-link\">\n            <p>为什么要使用 dns-prefetch？</p>\n\n          </a></div>\n        </div>\n      </details>\n    \n</div>\n</div>\n      <a id=\"sidebar-toc-btn\">≡</a>\n    \n    \n    \n    \n    \n    \n<script>\n\nvar sidebarTOCBtn = document.getElementById('sidebar-toc-btn')\nsidebarTOCBtn.addEventListener('click', function(event) {\n  event.stopPropagation()\n  if (document.body.hasAttribute('html-show-sidebar-toc')) {\n    document.body.removeAttribute('html-show-sidebar-toc')\n  } else {\n    document.body.setAttribute('html-show-sidebar-toc', true)\n  }\n})\n</script>\n      \n  \n    "},{"id":"10030_100006","type":"chapter","name":"懒加载","fullPath":"D:\\personal\\文档\\passerby\\web\\Web性能\\07懒加载.md","url":"/chapter/10030_100006.html","content":"\n    \n    \n      <div class=\"crossnote markdown-preview  \">\n      \n<h1 id=\"懒加载\">懒加载 </h1>\n<p>延迟加载（懒加载）是一种将资源标识为非阻塞（非关键）资源并仅在需要时加载它们的策略。这是一种缩短关键渲染路径长度的方法，可以缩短页面加载时间。</p>\n<h2 id=\"策略\">策略 </h2>\n<p>延迟加载可以通过多种策略应用于多个资源。</p>\n<h3 id=\"常规\">常规 </h3>\n<ul>\n<li>代码拆分： JavaScript、CSS 和 HTML 可以被分割成较小的代码块。这样就可以在前期发送所需的最小代码，改善页面加载时间。其余的可以按需加载</li>\n<li>JavaScript: 任何类型为 type=\"module\" 的脚本标签都被视为一个 JavaScript 模块，并且默认情况下会被延迟。</li>\n<li>css：默认情况下，CSS 被视为渲染阻塞资源，因此，在 CSSOM 构造完成之前，浏览器不会渲染任何已处理的内容。CSS 必须尽量小，才能尽快送达，建议使用媒体类型和查询实现非阻塞渲染。</li>\n<li>字体：字体请求会延迟到构造渲染树之前，这可能会导致文本渲染延迟。可以使用 &lt;link rel=\"preload\"&gt;、CSS font-display属性和字体加载API来覆盖默认行为并预加载网络字体资源。</li>\n<li>图片和iframe:很多时候，网页包含许多图片，这些图片会影响数据的使用和网页的加载速度。这些图片大部分都在屏幕之外（非关键），需要用户互动，如滚动，才能看到它们</li>\n<li>loading: 可用于指示浏览器推迟加载屏幕外的图像/iframe，直到用户滚动到其附近</li>\n<li>Intersection Observer API:允许用户得知被观察的元素何时进入或退出浏览器的视口。</li>\n</ul>\n\n      </div>\n      <div class=\"md-sidebar-toc\">\n<div class=\"md-toc\">\n<details style=\"padding:0;;padding-left:0px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#懒加载\" class=\"md-toc-link\"><p>懒加载</p>\n</a>\n          </summary>\n        <div>\n          <details style=\"padding:0;;padding-left:24px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#策略\" class=\"md-toc-link\"><p>策略</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#常规\" class=\"md-toc-link\">\n            <p>常规</p>\n\n          </a></div>\n        </div>\n      </details>\n    \n        </div>\n      </details>\n    \n</div>\n</div>\n      <a id=\"sidebar-toc-btn\">≡</a>\n    \n    \n    \n    \n    \n    \n<script>\n\nvar sidebarTOCBtn = document.getElementById('sidebar-toc-btn')\nsidebarTOCBtn.addEventListener('click', function(event) {\n  event.stopPropagation()\n  if (document.body.hasAttribute('html-show-sidebar-toc')) {\n    document.body.removeAttribute('html-show-sidebar-toc')\n  } else {\n    document.body.setAttribute('html-show-sidebar-toc', true)\n  }\n})\n</script>\n      \n  \n    "},{"id":"10030_100007","type":"chapter","name":"感知性能","fullPath":"D:\\personal\\文档\\passerby\\web\\Web性能\\08感知性能.md","url":"/chapter/10030_100007.html","content":"\n    \n    \n      <div class=\"crossnote markdown-preview  \">\n      \n<h1 id=\"感知性能\">感知性能 </h1>\n<p>感知性能是用户对网站速度的感受。用户如何看待性能与任何客观统计数据一样重要，甚至更重要，但它是主观的，并且不易测量。感知性能是用户视角，而不是指标。</p>\n<h2 id=\"性能指标\">性能指标 </h2>\n<p>目前没有一种单一的指标或测试可以量化用户的“感受”。但是，有一些指标可以作为“有用的指示”：</p>\n<ul>\n<li>首次绘制:第一次绘制运算开始的时间</li>\n<li>首次有内容绘制（FCP）:第一次重要渲染（例如文本、前景或背景图像、画布或 SVG 等）开始的时间。注意，这些内容不一定是有用或有意义的</li>\n<li>首次有意义绘制（FMP）:有用的内容渲染到屏幕上的时间。</li>\n<li>最大内容绘制（LCP）:视口中可见的最大内容元素的渲染时间。</li>\n<li>速度指数: 测量可见屏幕上像素绘制的平均时间。</li>\n<li>可交互时间:UI可用于用户交互的时间（即加载过程中最后一个长任务完成的时间）。</li>\n</ul>\n<h2 id=\"提升感知性能\">提升感知性能 </h2>\n<ul>\n<li>最小化初始加载: 首先下载用户将立即与之交互的内容，然后在“后台”下载其余内容。实际下载的内容总量可能会增加，但用户只需等待非常少的内容，因此会感觉下载更快了</li>\n<li>防止内容跳转和其他重排: 图片或其他资源导致内容下移或跳转到不同位置（例如第三方广告的加载），会让页面感觉仍在加载中，这对感知性能是不利的。若内容重排不是由用户交互触发，则尤其会损害用户体验。如果某些资源的加载速度比其他资源慢，在其他内容已经显示在屏幕上之后才加载这些元素，那么就需要提前规划，在布局中为它们留出空间，以便内容不会跳动或改变大小，尤其是在网站已变得可交互之后。</li>\n<li>避免字体文件延迟: 字体的选择相当重要。选择合适的字体可以极大地改善用户体验。从感知性能的角度来看，“字体导入不佳”可能会导致文本在样式化或回退到其他字体时出现闪烁</li>\n<li>可交互元素是可交互的:确保可见的可交互元素始终可交换且可响应。如果输入元素是可见的，用户应该能够无延迟地与它们交互。当响应时间超过 50 毫秒时，用户会感受到延迟。当内容重绘速度慢于 16.67 毫秒（或每秒 60 帧），或者重绘间隔不均匀时，他们会感觉页面卡顿不流畅。</li>\n<li>使任务启动器显得更具交互性:</li>\n</ul>\n\n      </div>\n      <div class=\"md-sidebar-toc\">\n<div class=\"md-toc\">\n<details style=\"padding:0;;padding-left:0px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#感知性能\" class=\"md-toc-link\"><p>感知性能</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#性能指标\" class=\"md-toc-link\">\n            <p>性能指标</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#提升感知性能\" class=\"md-toc-link\">\n            <p>提升感知性能</p>\n\n          </a></div>\n        </div>\n      </details>\n    \n</div>\n</div>\n      <a id=\"sidebar-toc-btn\">≡</a>\n    \n    \n    \n    \n    \n    \n<script>\n\nvar sidebarTOCBtn = document.getElementById('sidebar-toc-btn')\nsidebarTOCBtn.addEventListener('click', function(event) {\n  event.stopPropagation()\n  if (document.body.hasAttribute('html-show-sidebar-toc')) {\n    document.body.removeAttribute('html-show-sidebar-toc')\n  } else {\n    document.body.setAttribute('html-show-sidebar-toc', true)\n  }\n})\n</script>\n      \n  \n    "},{"id":"10030_100008","type":"chapter","name":"JavaScript性能优化","fullPath":"D:\\personal\\文档\\passerby\\web\\Web性能\\09JavaScript性能优化.md","url":"/chapter/10030_100008.html","content":"\n    \n    \n      <div class=\"crossnote markdown-preview  \">\n      \n<h1 id=\"javascript性能优化\">JavaScript性能优化 </h1>\n<h2 id=\"优化-javascript-的下载\">优化 JavaScript 的下载 </h2>\n<p>最高效、最不阻塞的JavaScript是根本不使用JavaScript。你应该尽量少使用JavaScript</p>\n<p><strong>并非总是需要框架</strong>：你可能熟悉使用某个 JavaScript 框架。如果你对使用该框架有经验和信心，并且喜欢它提供的所有工具，那么它可能是你构建大多数项目的首选。然而，框架会增加 JavaScript 的负担。如果你创建的是一个相对静态的体验，对 JavaScript 的要求很少，那么你可能不需要那个框架。也许你可以使用几行标准 JavaScript 来实现你需要的功能。<br>\n<strong>考虑更简单的解决方案</strong>：你可能有一个华丽、有趣的解决方案要实现，但请考虑用户是否会喜欢它。他们是否更喜欢简单的东西？<br>\n<strong>删除未使用的代码</strong>：这听起来很明显，但令人惊讶的是很多开发者忘记清除在开发过程中添加的不会被用到的功能。你需要谨慎并有意识地添加和删除代码。所有脚本都会被解析，无论它是否被使用；因此，加快下载速度的一个快速方法是摆脱任何不会被使用的功能。此外，要考虑通常只会使用框架中的一小部分功能。是否有可能创建一个仅包含你所需部分的框架的自定义构建版本？<br>\n<strong>考虑使用浏览器内置特性</strong>：也许你可以使用浏览器已经具备的特性，而不是通过 JavaScript 自己创建</p>\n<h2 id=\"处理解析和执行\">处理解析和执行 </h2>\n<ol>\n<li>通常首先解析 HTML，按照页面上出现的顺序进行解析。</li>\n<li>遇到 CSS 时，解析 CSS 以了解需要应用于页面的样式。在此期间，开始获取链接的资源，如图像和网络字体。</li>\n<li>遇到 JavaScript 时，浏览器解析、评估并执行它。</li>\n<li>稍后，浏览器根据应用于每个 HTML 元素的 CSS 来确定每个元素的样式。</li>\n<li>然后将经过样式处理的结果绘制到屏幕上。</li>\n</ol>\n<p>这里关键的步骤是第 3 步。默认情况下，JavaScript 的解析和执行会阻塞渲染。这意味着浏览器在遇到 JavaScript 之后，会阻塞解析任何出现在其后的 HTML 代码，直到脚本处理完成。因此，样式和绘制也会被阻塞。因此，你不仅需要仔细考虑你要下载的内容，还要考虑代码何时以及以何种方式执行</p>\n<ul>\n<li>尽早加载关键资源</li>\n<li>推迟非关键 JavaScript 的执行</li>\n<li>分解长任务</li>\n<li>处理 JavaScript 动画</li>\n<li>优化事件性能</li>\n<li>编写更高效代码的技巧\n<ul>\n<li>减少 DOM 操作</li>\n<li>批量进行 DOM 更改</li>\n<li>简化 HTML 代码</li>\n<li>减少循环代码的数量</li>\n<li>将计算任务移到主线程之外</li>\n</ul>\n</li>\n</ul>\n\n      </div>\n      <div class=\"md-sidebar-toc\">\n<div class=\"md-toc\">\n<details style=\"padding:0;;padding-left:0px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#javascript性能优化\" class=\"md-toc-link\"><p>JavaScript性能优化</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#优化-javascript-的下载\" class=\"md-toc-link\">\n            <p>优化 JavaScript 的下载</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#处理解析和执行\" class=\"md-toc-link\">\n            <p>处理解析和执行</p>\n\n          </a></div>\n        </div>\n      </details>\n    \n</div>\n</div>\n      <a id=\"sidebar-toc-btn\">≡</a>\n    \n    \n    \n    \n    \n    \n<script>\n\nvar sidebarTOCBtn = document.getElementById('sidebar-toc-btn')\nsidebarTOCBtn.addEventListener('click', function(event) {\n  event.stopPropagation()\n  if (document.body.hasAttribute('html-show-sidebar-toc')) {\n    document.body.removeAttribute('html-show-sidebar-toc')\n  } else {\n    document.body.setAttribute('html-show-sidebar-toc', true)\n  }\n})\n</script>\n      \n  \n    "},{"id":"10030_100009","type":"chapter","name":"css性能优化","fullPath":"D:\\personal\\文档\\passerby\\web\\Web性能\\10css性能优化.md","url":"/chapter/10030_100009.html","content":"\n    \n    \n      <div class=\"crossnote markdown-preview  \">\n      \n<h1 id=\"css性能优化\">css性能优化 </h1>\n<h2 id=\"优化渲染\">优化渲染 </h2>\n<p>浏览器有一个固定的渲染流程——只有在布局（layout）完成后才能绘制（paint）页面，而布局的前提是要生成渲染树（render tree），而渲染树的生成则需要 DOM 和 CSSOM 树的配合</p>\n<ol>\n<li><strong>删除不必要的样式</strong></li>\n<li><strong>将 CSS 拆分为独立模块</strong></li>\n<li><strong>最小化和压缩你的 CSS</strong></li>\n<li><strong>简化选择器</strong></li>\n<li><strong>不要将样式应用于不需要的元素</strong></li>\n<li><strong>使用 CSS 精灵图减少图像相关的 HTTP 请求</strong></li>\n<li><strong>预加载重要资源</strong></li>\n</ol>\n<h2 id=\"优化渲染阻塞\">优化渲染阻塞 </h2>\n<p>CSS 可以使用媒体查询将样式限定在特定条件下。媒体查询对于响应式网页设计非常重要，并且可以帮助我们优化关键渲染流程。浏览器会阻塞渲染直到解析完所有的样式，但不会阻塞不会使用的样式，例如打印样式表。通过根据媒体查询将 CSS 拆分为多个文件，可以防止在下载未使用的 CSS 时阻塞渲染。要创建一个非阻塞的 CSS 链接，将不立即使用的样式（例如打印样式）移动到单独的文件中，在 HTML 标记中添加一个 <link>，并添加一个媒体查询，</p>\n\n      </div>\n      <div class=\"md-sidebar-toc\">\n<div class=\"md-toc\">\n<details style=\"padding:0;;padding-left:0px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#css性能优化\" class=\"md-toc-link\"><p>css性能优化</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#优化渲染\" class=\"md-toc-link\">\n            <p>优化渲染</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#优化渲染阻塞\" class=\"md-toc-link\">\n            <p>优化渲染阻塞</p>\n\n          </a></div>\n        </div>\n      </details>\n    \n</div>\n</div>\n      <a id=\"sidebar-toc-btn\">≡</a>\n    \n    \n    \n    \n    \n    \n<script>\n\nvar sidebarTOCBtn = document.getElementById('sidebar-toc-btn')\nsidebarTOCBtn.addEventListener('click', function(event) {\n  event.stopPropagation()\n  if (document.body.hasAttribute('html-show-sidebar-toc')) {\n    document.body.removeAttribute('html-show-sidebar-toc')\n  } else {\n    document.body.setAttribute('html-show-sidebar-toc', true)\n  }\n})\n</script>\n      \n  \n    "},{"id":"10030_100010","type":"chapter","name":"HTML性能优化","fullPath":"D:\\personal\\文档\\passerby\\web\\Web性能\\11HTML性能优化.md","url":"/chapter/10030_100010.html","content":"\n    \n    \n      <div class=\"crossnote markdown-preview  \">\n      \n<h1 id=\"html性能优化\">HTML性能优化 </h1>\n<h2 id=\"html-性能关键问题\">HTML 性能关键问题 </h2>\n<p>就性能而言，HTML 非常简单，它主要是文本，文本大小较小，因此下载和渲染速度通常很快。影响网页性能的关键问题包括：</p>\n<p><strong>图像和视频文件的大小</strong>：需要考虑如何处理替换元素（例如 &lt;img&gt; 和 &lt;video&gt;）。图像和视频文件较大，可能会显著增加页面的大小。因此，需要尽量减少下载到用户设备的字节数（例如，为移动设备提供较小的图像）。还需要考虑仅在需要时加载页面上的图像和视频，以改善感知性能。<br>\n<strong>嵌入内容的交付</strong>：通常是嵌入在 &lt;iframe&gt; 元素中的内容。将内容加载到 &lt;iframe&gt; 中可能会显著影响性能，因此应该仔细考虑。<br>\n<strong>资源加载顺序</strong>：为了最大化感知性能和实际性能，HTML 应该首先按照在页面上出现的顺序加载。然后，你可以利用各种特性来影响资源加载顺序以获得更好的性能。例如，你可以提前预加载关键的 CSS 和字体，但将非关键的 JavaScript 推迟到稍后加载。</p>\n<h3 id=\"响应式处理替代元素\">响应式处理替代元素 </h3>\n<p>响应式设计彻底改变了在不同设备上处理网页内容布局的方式。它的一个关键优势是可以动态切换根据不同的屏幕尺寸优化后的布局，例如宽屏布局与窄屏（移动设备）布局之间的切换。它还可以根据其他设备属性，如分辨率或亮色或暗色配色方案的偏好，来处理内容的动态切换。</p>\n<h3 id=\"通过-srcset-提供不同的图像分辨率\">通过 srcset 提供不同的图像分辨率 </h3>\n<pre data-role=\"codeBlock\" data-info=\"html\" class=\"language-html html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span>\n  <span class=\"token attr-name\">srcset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>480w.jpg 480w, 800w.jpg 800w<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">sizes</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>(max-width: 600px) 480px,\n         800px<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>800w.jpg<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>家庭照<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n</code></pre><h3 id=\"为图像和视频提供不同来源\">为图像和视频提供不同来源 </h3>\n<pre data-role=\"codeBlock\" data-info=\"html\" class=\"language-html html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>picture</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span> <span class=\"token attr-name\">media</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>(max-width: 799px)<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">srcset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>narrow-banner-480w.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span> <span class=\"token attr-name\">media</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>(min-width: 800px)<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">srcset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wide-banner-800w.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>large-banner-800w.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>茂密森林景观<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>picture</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre><h3 id=\"使用-relpreload-预加载内容\">使用 rel=\"preload\" 预加载内容 </h3>\n<pre data-role=\"codeBlock\" data-info=\"html\" class=\"language-html html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>preload<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sintel-short.mp4<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">as</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>video<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>video/mp4<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n</code></pre>\n      </div>\n      <div class=\"md-sidebar-toc\">\n<div class=\"md-toc\">\n<details style=\"padding:0;;padding-left:0px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#html性能优化\" class=\"md-toc-link\"><p>HTML性能优化</p>\n</a>\n          </summary>\n        <div>\n          <details style=\"padding:0;;padding-left:24px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#html-性能关键问题\" class=\"md-toc-link\"><p>HTML 性能关键问题</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#响应式处理替代元素\" class=\"md-toc-link\">\n            <p>响应式处理替代元素</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#通过-srcset-提供不同的图像分辨率\" class=\"md-toc-link\">\n            <p>通过 srcset 提供不同的图像分辨率</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#为图像和视频提供不同来源\" class=\"md-toc-link\">\n            <p>为图像和视频提供不同来源</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#使用-relpreload-预加载内容\" class=\"md-toc-link\">\n            <p>使用 rel=\"preload\" 预加载内容</p>\n\n          </a></div>\n        </div>\n      </details>\n    \n        </div>\n      </details>\n    \n</div>\n</div>\n      <a id=\"sidebar-toc-btn\">≡</a>\n    \n    \n    \n    \n    \n    \n<script>\n\nvar sidebarTOCBtn = document.getElementById('sidebar-toc-btn')\nsidebarTOCBtn.addEventListener('click', function(event) {\n  event.stopPropagation()\n  if (document.body.hasAttribute('html-show-sidebar-toc')) {\n    document.body.removeAttribute('html-show-sidebar-toc')\n  } else {\n    document.body.setAttribute('html-show-sidebar-toc', true)\n  }\n})\n</script>\n      \n  \n    "}],"type":"book","url":"/chapter/10030_100000.html"},"chapterInfo":{"id":"10030_100008","type":"chapter","name":"JavaScript性能优化","fullPath":"D:\\personal\\文档\\passerby\\web\\Web性能\\09JavaScript性能优化.md","url":"/chapter/10030_100008.html","content":"\n    \n    \n      <div class=\"crossnote markdown-preview  \">\n      \n<h1 id=\"javascript性能优化\">JavaScript性能优化 </h1>\n<h2 id=\"优化-javascript-的下载\">优化 JavaScript 的下载 </h2>\n<p>最高效、最不阻塞的JavaScript是根本不使用JavaScript。你应该尽量少使用JavaScript</p>\n<p><strong>并非总是需要框架</strong>：你可能熟悉使用某个 JavaScript 框架。如果你对使用该框架有经验和信心，并且喜欢它提供的所有工具，那么它可能是你构建大多数项目的首选。然而，框架会增加 JavaScript 的负担。如果你创建的是一个相对静态的体验，对 JavaScript 的要求很少，那么你可能不需要那个框架。也许你可以使用几行标准 JavaScript 来实现你需要的功能。<br>\n<strong>考虑更简单的解决方案</strong>：你可能有一个华丽、有趣的解决方案要实现，但请考虑用户是否会喜欢它。他们是否更喜欢简单的东西？<br>\n<strong>删除未使用的代码</strong>：这听起来很明显，但令人惊讶的是很多开发者忘记清除在开发过程中添加的不会被用到的功能。你需要谨慎并有意识地添加和删除代码。所有脚本都会被解析，无论它是否被使用；因此，加快下载速度的一个快速方法是摆脱任何不会被使用的功能。此外，要考虑通常只会使用框架中的一小部分功能。是否有可能创建一个仅包含你所需部分的框架的自定义构建版本？<br>\n<strong>考虑使用浏览器内置特性</strong>：也许你可以使用浏览器已经具备的特性，而不是通过 JavaScript 自己创建</p>\n<h2 id=\"处理解析和执行\">处理解析和执行 </h2>\n<ol>\n<li>通常首先解析 HTML，按照页面上出现的顺序进行解析。</li>\n<li>遇到 CSS 时，解析 CSS 以了解需要应用于页面的样式。在此期间，开始获取链接的资源，如图像和网络字体。</li>\n<li>遇到 JavaScript 时，浏览器解析、评估并执行它。</li>\n<li>稍后，浏览器根据应用于每个 HTML 元素的 CSS 来确定每个元素的样式。</li>\n<li>然后将经过样式处理的结果绘制到屏幕上。</li>\n</ol>\n<p>这里关键的步骤是第 3 步。默认情况下，JavaScript 的解析和执行会阻塞渲染。这意味着浏览器在遇到 JavaScript 之后，会阻塞解析任何出现在其后的 HTML 代码，直到脚本处理完成。因此，样式和绘制也会被阻塞。因此，你不仅需要仔细考虑你要下载的内容，还要考虑代码何时以及以何种方式执行</p>\n<ul>\n<li>尽早加载关键资源</li>\n<li>推迟非关键 JavaScript 的执行</li>\n<li>分解长任务</li>\n<li>处理 JavaScript 动画</li>\n<li>优化事件性能</li>\n<li>编写更高效代码的技巧\n<ul>\n<li>减少 DOM 操作</li>\n<li>批量进行 DOM 更改</li>\n<li>简化 HTML 代码</li>\n<li>减少循环代码的数量</li>\n<li>将计算任务移到主线程之外</li>\n</ul>\n</li>\n</ul>\n\n      </div>\n      <div class=\"md-sidebar-toc\">\n<div class=\"md-toc\">\n<details style=\"padding:0;;padding-left:0px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#javascript性能优化\" class=\"md-toc-link\"><p>JavaScript性能优化</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#优化-javascript-的下载\" class=\"md-toc-link\">\n            <p>优化 JavaScript 的下载</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#处理解析和执行\" class=\"md-toc-link\">\n            <p>处理解析和执行</p>\n\n          </a></div>\n        </div>\n      </details>\n    \n</div>\n</div>\n      <a id=\"sidebar-toc-btn\">≡</a>\n    \n    \n    \n    \n    \n    \n<script>\n\nvar sidebarTOCBtn = document.getElementById('sidebar-toc-btn')\nsidebarTOCBtn.addEventListener('click', function(event) {\n  event.stopPropagation()\n  if (document.body.hasAttribute('html-show-sidebar-toc')) {\n    document.body.removeAttribute('html-show-sidebar-toc')\n  } else {\n    document.body.setAttribute('html-show-sidebar-toc', true)\n  }\n})\n</script>\n      \n  \n    "}},"__N_SSG":true}