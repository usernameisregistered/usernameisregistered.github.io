{"pageProps":{"bookInfo":{"id":"10042","name":"marked源码解析","fullPath":"F:\\passerby\\source\\marked源码解析","chapterList":[{"id":"10042_100000","type":"chapter","name":"前置","fullPath":"F:\\passerby\\source\\marked源码解析\\00前置.md","url":"/chapter/10042_100000","content":"\n    \n    \n      <div class=\"crossnote markdown-preview  \">\n      \n<h1 id=\"前置需要\">前置需要 </h1>\n<h2 id=\"语法介绍\">语法介绍 </h2>\n<p>markdown 的语法请参考<a href=\"http://markdown.p2hp.com/\">markdown 中文网</a></p>\n<ol>\n<li>允许您通过将行缩进四个空格或一个制表符来创建代码块</li>\n<li>要创建水平线***，请单独在一行上使用三个或更多的星号（），破折号（---）或下划线（___）</li>\n</ol>\n<h2 id=\"cst-树\">CST 树 </h2>\n<p>具象语法树（Concret Syntax Tree） 简称 CST 树，是包含代码所有语法信息的树型结构，它是代码的直接翻译，有时也被成为<strong>解析树</strong></p>\n<h2 id=\"ast-树\">AST 树 </h2>\n<p>抽象语法树 (Abstract Syntax Tree)简称 AST 树, 是源代码语法结构的一种抽象表示。它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构<br>\n忽略了一些具象语法树包含的一些语法信息，剥离掉一些不重要的细节</p>\n<h3 id=\"如何生成\">如何生成 </h3>\n<ol>\n<li><strong>词法分析</strong>：从左到右扫描文本，把文本拆成一些单词。然后，这些单词传入分词器，经过一系列的识别器，确定这些单词的词性，这一过程的产物是<strong>token 序列</strong></li>\n<li><strong>语法分析</strong>：token 序列会经过我们的解析器，由解析器识别出代码中的各类短语，会根据语言的文法规则输出解析树，同时，验证语法，语法如果有错的话，抛出语法错误</li>\n<li><strong>构建抽象语法树</strong>：在语法分析的过程中，递归下降分析器的每个函数都会返回一个 AST 子树。通过在这些函数中构造和连接这些子树，最终形成整个源代码的 AST</li>\n<li><strong>语义分析</strong>：也就是生成可执行的代码</li>\n</ol>\n<h2 id=\"marked-配置\">marked 配置 </h2>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>pedantic</td>\n<td>boolean</td>\n<td>是否将 tab 制表符更换为 4 个空格以及删除多个空行</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"特殊正则注解\">特殊正则注解 </h2>\n<h3 id=\"空格或者制表符创建代码块\">空格或者制表符创建代码块 </h3>\n<blockquote>\n<p>markdown 基本语法允许您通过将行缩进四个空格或一个制表符来创建代码块<br>\n<code>/^((?: {4}| {0,3}\\t)[^\\n]+(?:\\n(?:[ \\t]*(?:\\n|$))*)?)+/</code><br>\n<code>/^(?: {4}| {0,3}\\t)/</code> 匹配空格缩进或者制表符<br>\n<code>/[^\\n]+/</code> 匹配代码块的内容<br>\n<code>/(?:\\n|$)/</code> 匹配结束或者换行<br>\n<code>/?:[ \\t]*(?:\\n|$))*/</code> 匹配结束或者换行可以存在任意个空格或者制表符<br>\n<code>/(?:\\n(?:[ \\t]*(?:\\n|$))*)/</code> 代码块结束匹配支持换行但是只能是空白或者制表符</p>\n</blockquote>\n<h3 id=\"围栏代码块\">围栏代码块 </h3>\n<p><code>/^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/</code><br>\n<code>/^ {0,3}/</code> 围栏代码块可以有空白缩进<br>\n<code>/(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})/</code> 匹配围栏代码块的代码开始行<br>\n<code>/(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})/</code> 匹配围栏代码块的代码开始行<br>\n<code>([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))</code> 匹配代码正文<br>\n<code>(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/</code>匹配围栏代码块的代码结束行</p>\n<h2 id=\"个人感觉\">个人感觉 </h2>\n<p>marked的正则对空白的匹配是宽松的</p>\n<h2 id=\"日志\">日志 </h2>\n<ul>\n<li>2025-1-3  解析正则 blockCode</li>\n<li>2025-1-7  解析正则 blockquote</li>\n</ul>\n\n      </div>\n      <div class=\"md-sidebar-toc\">\n<div class=\"md-toc\">\n<details style=\"padding:0;;padding-left:0px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#前置需要\" class=\"md-toc-link\"><p>前置需要</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#语法介绍\" class=\"md-toc-link\">\n            <p>语法介绍</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#cst-树\" class=\"md-toc-link\">\n            <p>CST 树</p>\n\n          </a></div><details style=\"padding:0;;padding-left:24px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#ast-树\" class=\"md-toc-link\"><p>AST 树</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#如何生成\" class=\"md-toc-link\">\n            <p>如何生成</p>\n\n          </a></div>\n        </div>\n      </details>\n    <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#marked-配置\" class=\"md-toc-link\">\n            <p>marked 配置</p>\n\n          </a></div><details style=\"padding:0;;padding-left:24px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#特殊正则注解\" class=\"md-toc-link\"><p>特殊正则注解</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#空格或者制表符创建代码块\" class=\"md-toc-link\">\n            <p>空格或者制表符创建代码块</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#围栏代码块\" class=\"md-toc-link\">\n            <p>围栏代码块</p>\n\n          </a></div>\n        </div>\n      </details>\n    <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#个人感觉\" class=\"md-toc-link\">\n            <p>个人感觉</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#日志\" class=\"md-toc-link\">\n            <p>日志</p>\n\n          </a></div>\n        </div>\n      </details>\n    \n</div>\n</div>\n      <a id=\"sidebar-toc-btn\">≡</a>\n    \n    \n    \n    \n    \n    \n<script>\n\nvar sidebarTOCBtn = document.getElementById('sidebar-toc-btn')\nsidebarTOCBtn.addEventListener('click', function(event) {\n  event.stopPropagation()\n  if (document.body.hasAttribute('html-show-sidebar-toc')) {\n    document.body.removeAttribute('html-show-sidebar-toc')\n  } else {\n    document.body.setAttribute('html-show-sidebar-toc', true)\n  }\n})\n</script>\n      \n  \n    "},{"id":"10042_100001","type":"chapter","name":"单例Marked","fullPath":"F:\\passerby\\source\\marked源码解析\\01单例Marked.md","url":"/chapter/10042_100001","content":"\n    \n    \n      <div class=\"crossnote markdown-preview  \">\n      \n<h1 id=\"marked\">marked </h1>\n<p>marked 使用了单例模式<br>\nmarked 提供了一个插件式开发的基座，</p>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code><span class=\"token keyword keyword-function\">function</span> <span class=\"token function\">marked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword keyword-const\">const</span> markedInstance <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token class-name\">Marked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmarked<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">use</span> <span class=\"token operator\">=</span><span class=\"token keyword keyword-function\">function</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> MarkedExtension<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    markedInstance<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><h2 id=\"use-方法\">use 方法 </h2>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Marked</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> MarkedExtension<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> MarkedExtension<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword keyword-const\">const</span> extensions<span class=\"token operator\">:</span> MarkedOptions<span class=\"token punctuation\">[</span><span class=\"token string\">'extensions'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>extensions <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span> renderers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> childTokens<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        args<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pack<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword keyword-const\">const</span> opts <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>pack <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-as\">as</span> MarkedOptions<span class=\"token punctuation\">;</span>\n            opts<span class=\"token punctuation\">.</span>async <span class=\"token operator\">=</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>async <span class=\"token operator\">||</span> opts<span class=\"token punctuation\">.</span>async <span class=\"token operator\">||</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword keyword-if\">if</span><span class=\"token punctuation\">(</span>pack<span class=\"token punctuation\">.</span>extensions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                pack<span class=\"token punctuation\">.</span>extensions<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ext<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ext<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword keyword-throw\">throw</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'extension name required'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword keyword-if\">if</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"renderer\"</span> <span class=\"token keyword keyword-in\">in</span> ext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword keyword-const\">const</span> prevRenderer <span class=\"token operator\">=</span> extensions<span class=\"token punctuation\">.</span>renderers<span class=\"token punctuation\">[</span>ext<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword keyword-if\">if</span><span class=\"token punctuation\">(</span>prevRenderer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                           extensions<span class=\"token punctuation\">.</span>renderers<span class=\"token punctuation\">[</span>ext<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword keyword-function\">function</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                                <span class=\"token keyword keyword-let\">let</span> ret <span class=\"token operator\">=</span> ext<span class=\"token punctuation\">.</span><span class=\"token function\">renderer</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token keyword keyword-if\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">===</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                                    ret <span class=\"token operator\">=</span> <span class=\"token function\">prevRenderer</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token punctuation\">}</span>\n                                <span class=\"token keyword keyword-return\">return</span> ret<span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n                        <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-else\">else</span> <span class=\"token punctuation\">{</span>\n                            extensions<span class=\"token punctuation\">.</span>renderers<span class=\"token punctuation\">[</span>ext<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ext<span class=\"token punctuation\">.</span>renderer\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><h2 id=\"parse-文档解析处理\">parse 文档解析处理 </h2>\n<ol>\n<li>词法分析可以分为2中类型，一种是仅有行内的规则，一种是包含块级规则的</li>\n<li>如果hooks存在，则优先从hooks中获取词法分析函数</li>\n<li>如果是异步的则返回promise</li>\n</ol>\n<h3 id=\"执行顺序\">执行顺序 </h3>\n<ol>\n<li>优先执行钩子函数中的pregrocess</li>\n<li>进行词法分析Lexer</li>\n<li>对词法分析后的token执行钩子函数中的processAllTokens</li>\n<li>对词法分析后的token执行walkTokens函数处理</li>\n<li>进行语法解析parse</li>\n<li>对语法分析后的结果进行钩子中的postprocess函数</li>\n</ol>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code><span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Marked</span> <span class=\"token punctuation\">{</span>\n    parse <span class=\"token operator\">=</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseMarkdown</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    parseInline <span class=\"token operator\">=</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseMarkdown</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword keyword-private\">private</span> <span class=\"token function\">parseMarkdown</span><span class=\"token punctuation\">(</span>blockType<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword keyword-type\">type</span> <span class=\"token class-name\">overloadedParse</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">(</span>src<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> options<span class=\"token operator\">:</span> MarkedOptions <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span> async<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">(</span>src<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> options<span class=\"token operator\">:</span> MarkedOptions <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span> async<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">(</span>src<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> options<span class=\"token operator\">?</span><span class=\"token operator\">:</span> MarkedOptions <span class=\"token operator\">|</span> <span class=\"token keyword keyword-null\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword keyword-const\">const</span> parse<span class=\"token operator\">:</span> overloadedParse <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>src<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> options<span class=\"token operator\">:</span> MarkedOptions <span class=\"token operator\">|</span> <span class=\"token keyword keyword-null\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword keyword-const\">const</span> origOpt <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>options <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword keyword-const\">const</span> opt <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span><span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>origOpt <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword keyword-const\">const</span> throwError <span class=\"token operator\">=</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onError</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span>opt<span class=\"token punctuation\">.</span>silent<span class=\"token punctuation\">,</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>opt<span class=\"token punctuation\">.</span>async<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>async <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">&amp;&amp;</span> origOpt<span class=\"token punctuation\">.</span>async <span class=\"token operator\">===</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword keyword-return\">return</span> <span class=\"token function\">throwError</span><span class=\"token punctuation\">(</span><span class=\"token keyword keyword-new\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword keyword-typeof\">typeof</span> src <span class=\"token operator\">===</span> <span class=\"token string\">'undefined'</span> <span class=\"token operator\">||</span> src <span class=\"token operator\">===</span> <span class=\"token keyword keyword-null\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword keyword-return\">return</span> <span class=\"token function\">throwError</span><span class=\"token punctuation\">(</span><span class=\"token keyword keyword-new\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'marked(): input parameter is undefined or null'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword keyword-typeof\">typeof</span> src <span class=\"token operator\">!==</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword keyword-return\">return</span> <span class=\"token function\">throwError</span><span class=\"token punctuation\">(</span><span class=\"token keyword keyword-new\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'marked(): input parameter is of type '</span>\n                <span class=\"token operator\">+</span> Object<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">', string expected'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            \n            <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                opt<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>options <span class=\"token operator\">=</span> opt<span class=\"token punctuation\">;</span>\n                opt<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>block <span class=\"token operator\">=</span> blockType<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword keyword-const\">const</span> lexer <span class=\"token operator\">=</span> opt<span class=\"token punctuation\">.</span>hooks <span class=\"token operator\">?</span> opt<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span><span class=\"token function\">provideLexer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>blockType <span class=\"token operator\">?</span> _Lexer<span class=\"token punctuation\">.</span>lex <span class=\"token operator\">:</span> _Lexer<span class=\"token punctuation\">.</span>lexInline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword keyword-const\">const</span> parser <span class=\"token operator\">=</span> opt<span class=\"token punctuation\">.</span>hooks <span class=\"token operator\">?</span> opt<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span><span class=\"token function\">provideParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>blockType <span class=\"token operator\">?</span> _Parser<span class=\"token punctuation\">.</span>parse <span class=\"token operator\">:</span> _Parser<span class=\"token punctuation\">.</span>parseInline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>async<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword keyword-return\">return</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>hooks <span class=\"token operator\">?</span> opt<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span><span class=\"token function\">preprocess</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> src<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>src <span class=\"token operator\">=&gt;</span> <span class=\"token function\">lexer</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>tokens <span class=\"token operator\">=&gt;</span> opt<span class=\"token punctuation\">.</span>hooks <span class=\"token operator\">?</span> opt<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span><span class=\"token function\">processAllTokens</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> tokens<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>tokens <span class=\"token operator\">=&gt;</span> opt<span class=\"token punctuation\">.</span>walkTokens <span class=\"token operator\">?</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">walkTokens</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>walkTokens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> tokens<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> tokens<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>tokens <span class=\"token operator\">=&gt;</span> <span class=\"token function\">parser</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>html <span class=\"token operator\">=&gt;</span> opt<span class=\"token punctuation\">.</span>hooks <span class=\"token operator\">?</span> opt<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span><span class=\"token function\">postprocess</span><span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> html<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>throwError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword keyword-try\">try</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                src <span class=\"token operator\">=</span> opt<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span><span class=\"token function\">preprocess</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-as\">as</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword keyword-let\">let</span> tokens <span class=\"token operator\">=</span> <span class=\"token function\">lexer</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                tokens <span class=\"token operator\">=</span> opt<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span><span class=\"token function\">processAllTokens</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>walkTokens<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">walkTokens</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">.</span>walkTokens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword keyword-let\">let</span> html <span class=\"token operator\">=</span> <span class=\"token function\">parser</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                html <span class=\"token operator\">=</span> opt<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span><span class=\"token function\">postprocess</span><span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span> <span class=\"token keyword keyword-as\">as</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword keyword-return\">return</span> html<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-catch\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword keyword-return\">return</span> <span class=\"token function\">throwError</span><span class=\"token punctuation\">(</span>e <span class=\"token keyword keyword-as\">as</span> Error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword keyword-return\">return</span> parse<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword keyword-private\">private</span> <span class=\"token function\">onError</span><span class=\"token punctuation\">(</span>silent<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">,</span> async<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> Error<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        e<span class=\"token punctuation\">.</span>message <span class=\"token operator\">+=</span> <span class=\"token string\">'\\nPlease report this to https://github.com/markedjs/marked.'</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>silent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword keyword-const\">const</span> msg <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;p&gt;An error occurred:&lt;/p&gt;&lt;pre&gt;'</span>\n            <span class=\"token operator\">+</span> <span class=\"token function\">escape</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>message <span class=\"token operator\">+</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;/pre&gt;'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>async<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword keyword-return\">return</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword keyword-return\">return</span> msg<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>async<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword keyword-return\">return</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword keyword-throw\">throw</span> e<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n      </div>\n      <div class=\"md-sidebar-toc\">\n<div class=\"md-toc\">\n<details style=\"padding:0;;padding-left:0px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#marked\" class=\"md-toc-link\"><p>marked</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#use-方法\" class=\"md-toc-link\">\n            <p>use 方法</p>\n\n          </a></div><details style=\"padding:0;;padding-left:24px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#parse-文档解析处理\" class=\"md-toc-link\"><p>parse 文档解析处理</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#执行顺序\" class=\"md-toc-link\">\n            <p>执行顺序</p>\n\n          </a></div>\n        </div>\n      </details>\n    \n        </div>\n      </details>\n    \n</div>\n</div>\n      <a id=\"sidebar-toc-btn\">≡</a>\n    \n    \n    \n    \n    \n    \n<script>\n\nvar sidebarTOCBtn = document.getElementById('sidebar-toc-btn')\nsidebarTOCBtn.addEventListener('click', function(event) {\n  event.stopPropagation()\n  if (document.body.hasAttribute('html-show-sidebar-toc')) {\n    document.body.removeAttribute('html-show-sidebar-toc')\n  } else {\n    document.body.setAttribute('html-show-sidebar-toc', true)\n  }\n})\n</script>\n      \n  \n    "},{"id":"10042_100002","type":"chapter","name":"词法分析latex","fullPath":"F:\\passerby\\source\\marked源码解析\\02词法分析latex.md","url":"/chapter/10042_100002","content":"\n    \n    \n      <div class=\"crossnote markdown-preview  \">\n      \n<h1 id=\"lexer-词法分析\">Lexer 词法分析 </h1>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code></code></pre><h2 id=\"初始化\">初始化 </h2>\n<ol>\n<li>初始化基础数据和分词器Tokenizer</li>\n<li>初始化markword文档的<a href=\"/chapter/\">解析规则</a></li>\n</ol>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code><span class=\"token function\">consstructor</span><span class=\"token punctuation\">(</span>options<span class=\"token operator\">?</span><span class=\"token operator\">:</span> MarkedOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>tokens <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword keyword-as\">as</span> <span class=\"token builtin\">unknown</span> <span class=\"token keyword keyword-as\">as</span> TokensList<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>tokens<span class=\"token punctuation\">.</span>links <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword keyword-null\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>options <span class=\"token operator\">=</span> options <span class=\"token operator\">||</span> _defaults<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>tokenizer <span class=\"token operator\">=</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>tokenizer <span class=\"token operator\">||</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token class-name\">_Tokenizer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>tokenizer <span class=\"token operator\">=</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>tokenizer<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>tokenizer<span class=\"token punctuation\">.</span>options <span class=\"token operator\">=</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>tokenizer<span class=\"token punctuation\">.</span>lexer <span class=\"token operator\">=</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>inlineQueue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        inLink<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        inRawBlock<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        top<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword keyword-const\">const</span> rules <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        other<span class=\"token punctuation\">,</span>\n        block<span class=\"token operator\">:</span> block<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">,</span>\n        inline<span class=\"token operator\">:</span> inline<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>pedantic<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        rules<span class=\"token punctuation\">.</span>block <span class=\"token operator\">=</span> block<span class=\"token punctuation\">.</span>pedantic<span class=\"token punctuation\">;</span>\n        rules<span class=\"token punctuation\">.</span>inline <span class=\"token operator\">=</span> inline<span class=\"token punctuation\">.</span>pedantic<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-else\">else</span> <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>gfm<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        rules<span class=\"token punctuation\">.</span>block <span class=\"token operator\">=</span> block<span class=\"token punctuation\">.</span>gfm<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>breaks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            rules<span class=\"token punctuation\">.</span>inline <span class=\"token operator\">=</span> inline<span class=\"token punctuation\">.</span>breaks<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-else\">else</span> <span class=\"token punctuation\">{</span>\n            rules<span class=\"token punctuation\">.</span>inline <span class=\"token operator\">=</span> inline<span class=\"token punctuation\">.</span>gfm<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>tokenizer<span class=\"token punctuation\">.</span>rules <span class=\"token operator\">=</span> rules<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><h2 id=\"lex-分解词汇\">lex 分解词汇 </h2>\n<ol>\n<li>将文档中的回车换行统一为<code>\\n</code></li>\n<li>处理块级的词汇凭证Token</li>\n<li>在处理行内的词汇凭证Token</li>\n<li>返回获取到的AST树</li>\n</ol>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code><span class=\"token function\">lex</span><span class=\"token punctuation\">(</span>src<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    src <span class=\"token operator\">=</span> src<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>carriageReturn<span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">blockTokens</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>tokens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword keyword-for\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword keyword-let\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>inlineQueue<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword keyword-const\">const</span> next <span class=\"token operator\">=</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>inlineQueue<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">inlineTokens</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">.</span>tokens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>inlineQueue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword keyword-return\">return</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>tokens<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><h3 id=\"blocktokens-块级\">blockTokens 块级 </h3>\n<ol>\n<li>优先块级扩展中的词法分析器</li>\n<li>执行空白的词法分析器</li>\n<li>执行空白缩进或者制表符格式的代码行的词法分析器</li>\n<li>执行围栏代码块的词法分析器</li>\n<li>执行标题的词法分析器</li>\n<li>执行水平线的词法分析器</li>\n<li>执行块引用的词法分析器</li>\n</ol>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code><span class=\"token function\">blockTokens</span><span class=\"token punctuation\">(</span>src<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> tokens<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Token<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> lastParagraphClipped<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Token<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">blockTokens</span><span class=\"token punctuation\">(</span>src<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> tokens<span class=\"token operator\">?</span><span class=\"token operator\">:</span> TokensList<span class=\"token punctuation\">,</span> lastParagraphClipped<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> TokensList<span class=\"token punctuation\">;</span>\n<span class=\"token function\">blockTokens</span><span class=\"token punctuation\">(</span>src<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> tokens<span class=\"token operator\">:</span> Token<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> lastParagraphClipped <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>pedantic<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      src <span class=\"token operator\">=</span> src<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>tabCharGlobal<span class=\"token punctuation\">,</span> <span class=\"token string\">'    '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>spaceLine<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword keyword-while\">while</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword keyword-let\">let</span> token<span class=\"token operator\">:</span> Tokens<span class=\"token punctuation\">.</span>Generic <span class=\"token operator\">|</span> <span class=\"token keyword keyword-undefined\">undefined</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>extensions<span class=\"token operator\">?.</span>block<span class=\"token operator\">?.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>extTokenizer<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>token <span class=\"token operator\">=</span> <span class=\"token function\">extTokenizer</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> lexer<span class=\"token operator\">:</span> <span class=\"token keyword keyword-this\">this</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">,</span> tokens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                src <span class=\"token operator\">=</span> src<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                tokens<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword keyword-continue\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>token <span class=\"token operator\">=</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>tokenizer<span class=\"token punctuation\">.</span><span class=\"token function\">space</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                src <span class=\"token operator\">=</span> src<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword keyword-const\">const</span> lastToken <span class=\"token operator\">=</span> tokens<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> lastToken <span class=\"token operator\">!==</span> <span class=\"token keyword keyword-undefined\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// if there's a single \\n as a spacer, it's terminating the last line,</span>\n            <span class=\"token comment\">// so move it there so that we don't get unnecessary paragraph tags</span>\n                lastToken<span class=\"token punctuation\">.</span>raw <span class=\"token operator\">+=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-else\">else</span> <span class=\"token punctuation\">{</span>\n                tokens<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword keyword-continue\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>token <span class=\"token operator\">=</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>tokenizer<span class=\"token punctuation\">.</span><span class=\"token function\">code</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                src <span class=\"token operator\">=</span> src<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword keyword-const\">const</span> lastToken <span class=\"token operator\">=</span> tokens<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// An indented code block cannot interrupt a paragraph.</span>\n            <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>lastToken<span class=\"token operator\">?.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'paragraph'</span> <span class=\"token operator\">||</span> lastToken<span class=\"token operator\">?.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                lastToken<span class=\"token punctuation\">.</span>raw <span class=\"token operator\">+=</span> <span class=\"token string\">'\\n'</span> <span class=\"token operator\">+</span> token<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">;</span>\n                lastToken<span class=\"token punctuation\">.</span>text <span class=\"token operator\">+=</span> <span class=\"token string\">'\\n'</span> <span class=\"token operator\">+</span> token<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>inlineQueue<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> lastToken<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-else\">else</span> <span class=\"token punctuation\">{</span>\n                tokens<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword keyword-continue\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>token <span class=\"token operator\">=</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>tokenizer<span class=\"token punctuation\">.</span><span class=\"token function\">fences</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            src <span class=\"token operator\">=</span> src<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            tokens<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword keyword-continue\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>token <span class=\"token operator\">=</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>tokenizer<span class=\"token punctuation\">.</span><span class=\"token function\">heading</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            src <span class=\"token operator\">=</span> src<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            tokens<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword keyword-continue\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>token <span class=\"token operator\">=</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>tokenizer<span class=\"token punctuation\">.</span><span class=\"token function\">hr</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            src <span class=\"token operator\">=</span> src<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            tokens<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword keyword-continue\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>token <span class=\"token operator\">=</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>tokenizer<span class=\"token punctuation\">.</span><span class=\"token function\">blockquote</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            src <span class=\"token operator\">=</span> src<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            tokens<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword keyword-continue\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><h3 id=\"inlinetokens-行内\">inlineTokens 行内 </h3>\n\n      </div>\n      <div class=\"md-sidebar-toc\">\n<div class=\"md-toc\">\n<details style=\"padding:0;;padding-left:0px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#lexer-词法分析\" class=\"md-toc-link\"><p>Lexer 词法分析</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#初始化\" class=\"md-toc-link\">\n            <p>初始化</p>\n\n          </a></div><details style=\"padding:0;;padding-left:24px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#lex-分解词汇\" class=\"md-toc-link\"><p>lex 分解词汇</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#blocktokens-块级\" class=\"md-toc-link\">\n            <p>blockTokens 块级</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#inlinetokens-行内\" class=\"md-toc-link\">\n            <p>inlineTokens 行内</p>\n\n          </a></div>\n        </div>\n      </details>\n    \n        </div>\n      </details>\n    \n</div>\n</div>\n      <a id=\"sidebar-toc-btn\">≡</a>\n    \n    \n    \n    \n    \n    \n<script>\n\nvar sidebarTOCBtn = document.getElementById('sidebar-toc-btn')\nsidebarTOCBtn.addEventListener('click', function(event) {\n  event.stopPropagation()\n  if (document.body.hasAttribute('html-show-sidebar-toc')) {\n    document.body.removeAttribute('html-show-sidebar-toc')\n  } else {\n    document.body.setAttribute('html-show-sidebar-toc', true)\n  }\n})\n</script>\n      \n  \n    "},{"id":"10042_100003","type":"chapter","name":"分词器Tokenizer","fullPath":"F:\\passerby\\source\\marked源码解析\\03分词器Tokenizer.md","url":"/chapter/10042_100003","content":"\n    \n    \n      <div class=\"crossnote markdown-preview  \">\n      \n<h1 id=\"分词器-tokenizer\">分词器 Tokenizer </h1>\n<pre data-role=\"codeBlock\" data-info=\"\" class=\"language-text\"><code>{\n    options: {},\n    rules: {\n        other: {},\n        block: {},\n        inline: {}\n    },\n    lexer: {}\n}\n\n</code></pre><h2 id=\"规则\">规则 </h2>\n<p>具体正则参考<a href=\"/chapter/10042_100004\">规则rules</a><br>\n生成的词法凭证参考<a href=\"/chapter/10042_100005\">Token</a></p>\n<h3 id=\"块级类型-block\">块级类型 block </h3>\n<h4 id=\"新行\">新行 </h4>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code><span class=\"token function\">space</span><span class=\"token punctuation\">(</span>src<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Tokens<span class=\"token punctuation\">.</span>Space <span class=\"token operator\">|</span> <span class=\"token keyword keyword-undefined\">undefined</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-const\">const</span> cap <span class=\"token operator\">=</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>rules<span class=\"token punctuation\">.</span>block<span class=\"token punctuation\">.</span>newline<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>cap <span class=\"token operator\">&amp;&amp;</span> cap<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token punctuation\">{</span>\n            type<span class=\"token operator\">:</span> <span class=\"token string\">'space'</span><span class=\"token punctuation\">,</span>\n            raw<span class=\"token operator\">:</span> cap<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><h4 id=\"code\">code </h4>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code><span class=\"token function\">code</span><span class=\"token punctuation\">(</span>src<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Tokens<span class=\"token punctuation\">.</span>Code <span class=\"token operator\">|</span> <span class=\"token keyword keyword-undefined\">undefined</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-const\">const</span> cap <span class=\"token operator\">=</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>rules<span class=\"token punctuation\">.</span>block<span class=\"token punctuation\">.</span>code<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>cap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword keyword-const\">const</span> text <span class=\"token operator\">=</span> cap<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>rules<span class=\"token punctuation\">.</span>other<span class=\"token punctuation\">.</span>codeRemoveIndent<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token punctuation\">{</span>\n            type<span class=\"token operator\">:</span> <span class=\"token string\">'code'</span><span class=\"token punctuation\">,</span>\n            raw<span class=\"token operator\">:</span> cap<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            codeBlockStyle<span class=\"token operator\">:</span> <span class=\"token string\">'indented'</span><span class=\"token punctuation\">,</span>\n            text<span class=\"token operator\">:</span> <span class=\"token operator\">!</span><span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>pedantic\n            <span class=\"token operator\">?</span> <span class=\"token function\">rtrim</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">:</span> text<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><h4 id=\"fences-代码块\">fences 代码块 </h4>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code><span class=\"token function\">fences</span><span class=\"token punctuation\">(</span>src<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Tokens<span class=\"token punctuation\">.</span>Code <span class=\"token operator\">|</span> <span class=\"token keyword keyword-undefined\">undefined</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-const\">const</span> cap <span class=\"token operator\">=</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>rules<span class=\"token punctuation\">.</span>block<span class=\"token punctuation\">.</span>fences<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>cap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword keyword-const\">const</span> raw <span class=\"token operator\">=</span> cap<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword keyword-const\">const</span> text <span class=\"token operator\">=</span> <span class=\"token function\">indentCodeCompensation</span><span class=\"token punctuation\">(</span>raw<span class=\"token punctuation\">,</span> cap<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>rules<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token punctuation\">{</span>\n            type<span class=\"token operator\">:</span> <span class=\"token string\">'code'</span><span class=\"token punctuation\">,</span>\n            raw<span class=\"token punctuation\">,</span>\n            lang<span class=\"token operator\">:</span> cap<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> cap<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>rules<span class=\"token punctuation\">.</span>inline<span class=\"token punctuation\">.</span>anyPunctuation<span class=\"token punctuation\">,</span> <span class=\"token string\">'$1'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> cap<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            text<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><h4 id=\"headingheading-标题\">heading/heading 标题 </h4>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code><span class=\"token function\">heading</span><span class=\"token punctuation\">(</span>src<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Tokens<span class=\"token punctuation\">.</span>Heading <span class=\"token operator\">|</span> <span class=\"token keyword keyword-undefined\">undefined</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-const\">const</span> cap <span class=\"token operator\">=</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>rules<span class=\"token punctuation\">.</span>block<span class=\"token punctuation\">.</span>heading<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>cap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword keyword-let\">let</span> text <span class=\"token operator\">=</span> cap<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>rules<span class=\"token punctuation\">.</span>other<span class=\"token punctuation\">.</span>endingHash<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword keyword-const\">const</span> trimmed <span class=\"token operator\">=</span> <span class=\"token function\">rtrim</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">,</span> <span class=\"token string\">'#'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>pedantic<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            text <span class=\"token operator\">=</span> trimmed<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-else\">else</span> <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>trimmed <span class=\"token operator\">||</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>rules<span class=\"token punctuation\">.</span>other<span class=\"token punctuation\">.</span>endingSpaceChar<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>trimmed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            text <span class=\"token operator\">=</span> trimmed<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token punctuation\">{</span>\n            type<span class=\"token operator\">:</span> <span class=\"token string\">'heading'</span><span class=\"token punctuation\">,</span>\n            raw<span class=\"token operator\">:</span> cap<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            depth<span class=\"token operator\">:</span> cap<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>\n            text<span class=\"token punctuation\">,</span>\n            tokens<span class=\"token operator\">:</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>lexer<span class=\"token punctuation\">.</span><span class=\"token function\">inline</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><h4 id=\"hr-水平线\">hr 水平线 </h4>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code><span class=\"token function\">hr</span><span class=\"token punctuation\">(</span>src<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Tokens<span class=\"token punctuation\">.</span>Hr <span class=\"token operator\">|</span> <span class=\"token keyword keyword-undefined\">undefined</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-const\">const</span> cap <span class=\"token operator\">=</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>rules<span class=\"token punctuation\">.</span>block<span class=\"token punctuation\">.</span>hr<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>cap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword keyword-return\">return</span> <span class=\"token punctuation\">{</span>\n            type<span class=\"token operator\">:</span> <span class=\"token string\">'hr'</span><span class=\"token punctuation\">,</span>\n            raw<span class=\"token operator\">:</span> <span class=\"token function\">rtrim</span><span class=\"token punctuation\">(</span>cap<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><h4 id=\"blockquote-块引用\">blockquote 块引用 </h4>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code><span class=\"token function\">blockquote</span><span class=\"token punctuation\">(</span>src<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Tokens<span class=\"token punctuation\">.</span>Blockquote <span class=\"token operator\">|</span> <span class=\"token keyword keyword-undefined\">undefined</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-const\">const</span> cap <span class=\"token operator\">=</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>rules<span class=\"token punctuation\">.</span>block<span class=\"token punctuation\">.</span>blockquote<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>cap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-let\">let</span> lines <span class=\"token operator\">=</span> <span class=\"token function\">rtrim</span><span class=\"token punctuation\">(</span>cap<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-let\">let</span> raw <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-let\">let</span> text <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-const\">const</span> tokens<span class=\"token operator\">:</span> Token<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword keyword-while\">while</span> <span class=\"token punctuation\">(</span>lines<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword keyword-let\">let</span> inBlockquote <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword keyword-const\">const</span> currentLines <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword keyword-let\">let</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword keyword-for\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> lines<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>rules<span class=\"token punctuation\">.</span>other<span class=\"token punctuation\">.</span>blockquoteStart<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>lines<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                currentLines<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>lines<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                inBlockquote <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-else\">else</span> <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>inBlockquote<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                currentLines<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>lines<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-else\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword keyword-break\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        lines <span class=\"token operator\">=</span> lines<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword keyword-const\">const</span> currentRaw <span class=\"token operator\">=</span> currentLines<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword keyword-const\">const</span> currentText <span class=\"token operator\">=</span> currentRaw\n        <span class=\"token comment\">// precede setext continuation with 4 spaces so it isn't a setext</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>rules<span class=\"token punctuation\">.</span>other<span class=\"token punctuation\">.</span>blockquoteSetextReplace<span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n    $1'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>rules<span class=\"token punctuation\">.</span>other<span class=\"token punctuation\">.</span>blockquoteSetextReplace2<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        raw <span class=\"token operator\">=</span> raw <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>raw<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>currentRaw<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">:</span> currentRaw<span class=\"token punctuation\">;</span>\n        text <span class=\"token operator\">=</span> text <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>text<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>currentText<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">:</span> currentText<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// parse blockquote lines as top level tokens</span>\n        <span class=\"token comment\">// merge paragraphs if this is a continuation</span>\n        <span class=\"token keyword keyword-const\">const</span> top <span class=\"token operator\">=</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>lexer<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>lexer<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>top <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>lexer<span class=\"token punctuation\">.</span><span class=\"token function\">blockTokens</span><span class=\"token punctuation\">(</span>currentText<span class=\"token punctuation\">,</span> tokens<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>lexer<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>top <span class=\"token operator\">=</span> top<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// if there is no continuation then we are done</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>lines<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword keyword-break\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword keyword-const\">const</span> lastToken <span class=\"token operator\">=</span> tokens<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>lastToken<span class=\"token operator\">?.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'code'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// blockquote continuation cannot be preceded by a code block</span>\n            <span class=\"token keyword keyword-break\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-else\">else</span> <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>lastToken<span class=\"token operator\">?.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'blockquote'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// include continuation in nested blockquote</span>\n            <span class=\"token keyword keyword-const\">const</span> oldToken <span class=\"token operator\">=</span> lastToken <span class=\"token keyword keyword-as\">as</span> Tokens<span class=\"token punctuation\">.</span>Blockquote<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword keyword-const\">const</span> newText <span class=\"token operator\">=</span> oldToken<span class=\"token punctuation\">.</span>raw <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span> <span class=\"token operator\">+</span> lines<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword keyword-const\">const</span> newToken <span class=\"token operator\">=</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">blockquote</span><span class=\"token punctuation\">(</span>newText<span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">;</span>\n            tokens<span class=\"token punctuation\">[</span>tokens<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> newToken<span class=\"token punctuation\">;</span>\n\n            raw <span class=\"token operator\">=</span> raw<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> raw<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> oldToken<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> newToken<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">;</span>\n            text <span class=\"token operator\">=</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> oldToken<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> newToken<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword keyword-break\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-else\">else</span> <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>lastToken<span class=\"token operator\">?.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'list'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// include continuation in nested list</span>\n            <span class=\"token keyword keyword-const\">const</span> oldToken <span class=\"token operator\">=</span> lastToken <span class=\"token keyword keyword-as\">as</span> Tokens<span class=\"token punctuation\">.</span>List<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword keyword-const\">const</span> newText <span class=\"token operator\">=</span> oldToken<span class=\"token punctuation\">.</span>raw <span class=\"token operator\">+</span> <span class=\"token string\">'\\n'</span> <span class=\"token operator\">+</span> lines<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword keyword-const\">const</span> newToken <span class=\"token operator\">=</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span>newText<span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">;</span>\n            tokens<span class=\"token punctuation\">[</span>tokens<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> newToken<span class=\"token punctuation\">;</span>\n            raw <span class=\"token operator\">=</span> raw<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> raw<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> lastToken<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> newToken<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">;</span>\n            text <span class=\"token operator\">=</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> oldToken<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> newToken<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">;</span>\n            lines <span class=\"token operator\">=</span> newText<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword keyword-continue\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword keyword-return\">return</span> <span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> <span class=\"token string\">'blockquote'</span><span class=\"token punctuation\">,</span>\n        raw<span class=\"token punctuation\">,</span>\n        tokens<span class=\"token punctuation\">,</span>\n        text<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><h4 id=\"list-列表\">list 列表 </h4>\n<pre data-role=\"codeBlock\" data-info=\"js\" class=\"language-javascript js\"><code><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'list'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">raw</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> ordered： <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">start</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">loose</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">item</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n</code></pre><h4 id=\"html\">html </h4>\n<pre data-role=\"codeBlock\" data-info=\"js\" class=\"language-javascript js\"><code><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'html'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">block</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>  <span class=\"token literal-property property\">raw</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">pre</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">}</span>\n</code></pre><h4 id=\"def-引用\">def 引用 </h4>\n<pre data-role=\"codeBlock\" data-info=\"js\" class=\"language-javascript js\"><code><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'def'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">tag</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">href</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>  <span class=\"token literal-property property\">raw</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">}</span>\n</code></pre><h4 id=\"table-表格\">table 表格 </h4>\n<pre data-role=\"codeBlock\" data-info=\"js\" class=\"language-javascript js\"><code><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'table'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">raw</span><span class=\"token operator\">:</span> cap<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">header</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">align</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">rows</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><h4 id=\"paragraph-段落\">paragraph 段落 </h4>\n<pre data-role=\"codeBlock\" data-info=\"js\" class=\"language-javascript js\"><code><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'paragraph'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">raw</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">tokens</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n</code></pre><h4 id=\"text-文本\">text 文本 </h4>\n<pre data-role=\"codeBlock\" data-info=\"js\" class=\"language-javascript js\"><code><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">raw</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">tokens</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n</code></pre><h4 id=\"escape-转义字符\">escape 转义字符 </h4>\n<pre data-role=\"codeBlock\" data-info=\"js\" class=\"language-javascript js\"><code><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'escape'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">raw</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> string <span class=\"token punctuation\">}</span>\n</code></pre><h3 id=\"行内类型-inline\">行内类型 inline </h3>\n<h4 id=\"tag-标签\">tag 标签 </h4>\n<pre data-role=\"codeBlock\" data-info=\"js\" class=\"language-javascript js\"><code><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'html'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">raw</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">inLink</span><span class=\"token operator\">:</span> boolean<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">inRawBlock</span><span class=\"token operator\">:</span> boolean<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">block</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><h4 id=\"linkreflink-链接\">link/reflink 链接 </h4>\n<pre data-role=\"codeBlock\" data-info=\"js\" class=\"language-javascript js\"><code><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'link'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">raw</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span>  <span class=\"token literal-property property\">href</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">tokens</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n</code></pre><h4 id=\"emstrong-斜体加粗\">emStrong 斜体加粗 </h4>\n<pre data-role=\"codeBlock\" data-info=\"js\" class=\"language-javascript js\"><code><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'em|strong'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">raw</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span>  <span class=\"token literal-property property\">tokens</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>  <span class=\"token punctuation\">}</span>\n</code></pre><h4 id=\"codespan-单行代码\">codespan 单行代码 </h4>\n<pre data-role=\"codeBlock\" data-info=\"js\" class=\"language-javascript js\"><code><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'codespan'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">raw</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><h4 id=\"br-换行\">br 换行 </h4>\n<pre data-role=\"codeBlock\" data-info=\"js\" class=\"language-javascript js\"><code><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'br'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">raw</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><h4 id=\"del-删除\">del 删除 </h4>\n<pre data-role=\"codeBlock\" data-info=\"js\" class=\"language-javascript js\"><code><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'del'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">raw</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">token</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><h4 id=\"autolink\">autolink </h4>\n<p>{ type: 'link', raw: string,  href: string, title: string, text: string, tokens: [{ type: 'text', raw: string, text: string }] }</p>\n<h4 id=\"inlinetext-行内文本\">inlineText 行内文本 </h4>\n<pre data-role=\"codeBlock\" data-info=\"js\" class=\"language-javascript js\"><code><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">raw</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">escaped</span><span class=\"token operator\">:</span> boolean <span class=\"token punctuation\">}</span>\n</code></pre><h3 id=\"其他类型-other\">其他类型 other </h3>\n<h4 id=\"表格相关\">表格相关 </h4>\n<ol>\n<li>tableAlignRight</li>\n<li>tableAlignLeft</li>\n<li>tableAlignCenter</li>\n<li>tableRowBlankLine</li>\n<li>tableDelimiter</li>\n</ol>\n<h4 id=\"code相关\">code相关 </h4>\n<ol>\n<li>indentCodeCompensation</li>\n<li>codeRemoveIndent</li>\n</ol>\n<h4 id=\"文本相关\">文本相关 </h4>\n<ol>\n<li>beginningSpace</li>\n<li>endingHash</li>\n<li>endingSpaceChar</li>\n<li>blockquoteStart</li>\n<li>blockquoteSetextReplace/blockquoteSetextReplace2</li>\n<li>blankLine</li>\n<li>doubleBlankLine</li>\n<li>anyLine</li>\n</ol>\n<h4 id=\"标签相关\">标签相关 </h4>\n<ol>\n<li>startATag</li>\n<li>endATag</li>\n<li>startPreScriptTag</li>\n<li>endPreScriptTag</li>\n</ol>\n\n      </div>\n      <div class=\"md-sidebar-toc\">\n<div class=\"md-toc\">\n<details style=\"padding:0;;padding-left:0px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#分词器-tokenizer\" class=\"md-toc-link\"><p>分词器 Tokenizer</p>\n</a>\n          </summary>\n        <div>\n          <details style=\"padding:0;;padding-left:24px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#规则\" class=\"md-toc-link\"><p>规则</p>\n</a>\n          </summary>\n        <div>\n          <details style=\"padding:0;;padding-left:24px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#块级类型-block\" class=\"md-toc-link\"><p>块级类型 block</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#新行\" class=\"md-toc-link\">\n            <p>新行</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#code\" class=\"md-toc-link\">\n            <p>code</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#fences-代码块\" class=\"md-toc-link\">\n            <p>fences 代码块</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#headingheading-标题\" class=\"md-toc-link\">\n            <p>heading/heading 标题</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#hr-水平线\" class=\"md-toc-link\">\n            <p>hr 水平线</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#blockquote-块引用\" class=\"md-toc-link\">\n            <p>blockquote 块引用</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#list-列表\" class=\"md-toc-link\">\n            <p>list 列表</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#html\" class=\"md-toc-link\">\n            <p>html</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#def-引用\" class=\"md-toc-link\">\n            <p>def 引用</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#table-表格\" class=\"md-toc-link\">\n            <p>table 表格</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#paragraph-段落\" class=\"md-toc-link\">\n            <p>paragraph 段落</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#text-文本\" class=\"md-toc-link\">\n            <p>text 文本</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#escape-转义字符\" class=\"md-toc-link\">\n            <p>escape 转义字符</p>\n\n          </a></div>\n        </div>\n      </details>\n    <details style=\"padding:0;;padding-left:24px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#行内类型-inline\" class=\"md-toc-link\"><p>行内类型 inline</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#tag-标签\" class=\"md-toc-link\">\n            <p>tag 标签</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#linkreflink-链接\" class=\"md-toc-link\">\n            <p>link/reflink 链接</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#emstrong-斜体加粗\" class=\"md-toc-link\">\n            <p>emStrong 斜体加粗</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#codespan-单行代码\" class=\"md-toc-link\">\n            <p>codespan 单行代码</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#br-换行\" class=\"md-toc-link\">\n            <p>br 换行</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#del-删除\" class=\"md-toc-link\">\n            <p>del 删除</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#autolink\" class=\"md-toc-link\">\n            <p>autolink</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#inlinetext-行内文本\" class=\"md-toc-link\">\n            <p>inlineText 行内文本</p>\n\n          </a></div>\n        </div>\n      </details>\n    <details style=\"padding:0;;padding-left:24px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#其他类型-other\" class=\"md-toc-link\"><p>其他类型 other</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#表格相关\" class=\"md-toc-link\">\n            <p>表格相关</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#code相关\" class=\"md-toc-link\">\n            <p>code相关</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#文本相关\" class=\"md-toc-link\">\n            <p>文本相关</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#标签相关\" class=\"md-toc-link\">\n            <p>标签相关</p>\n\n          </a></div>\n        </div>\n      </details>\n    \n        </div>\n      </details>\n    \n        </div>\n      </details>\n    \n</div>\n</div>\n      <a id=\"sidebar-toc-btn\">≡</a>\n    \n    \n    \n    \n    \n    \n<script>\n\nvar sidebarTOCBtn = document.getElementById('sidebar-toc-btn')\nsidebarTOCBtn.addEventListener('click', function(event) {\n  event.stopPropagation()\n  if (document.body.hasAttribute('html-show-sidebar-toc')) {\n    document.body.removeAttribute('html-show-sidebar-toc')\n  } else {\n    document.body.setAttribute('html-show-sidebar-toc', true)\n  }\n})\n</script>\n      \n  \n    "},{"id":"10042_100004","type":"chapter","name":"规则rules","fullPath":"F:\\passerby\\source\\marked源码解析\\04规则rules.md","url":"/chapter/10042_100004","content":"\n    \n    \n      <div class=\"crossnote markdown-preview  \">\n      \n<h1 id=\"解析规则-rules\">解析规则 rules </h1>\n<h2 id=\"正则编辑器\">正则编辑器 </h2>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code><span class=\"token keyword keyword-function\">function</span> <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span>regex<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> RegExp<span class=\"token punctuation\">,</span> opt <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword keyword-let\">let</span> source <span class=\"token operator\">=</span> <span class=\"token keyword keyword-typeof\">typeof</span> regex <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">?</span> regex <span class=\"token operator\">:</span> regex<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword keyword-const\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">replace</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> RegExp<span class=\"token punctuation\">,</span> val<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> RegExp<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword keyword-let\">let</span> valSource <span class=\"token operator\">=</span> <span class=\"token keyword keyword-typeof\">typeof</span> val <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">?</span> val <span class=\"token operator\">:</span> val<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">;</span>\n      valSource <span class=\"token operator\">=</span> valSource<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>caret<span class=\"token punctuation\">,</span> <span class=\"token string\">'$1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      source <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> valSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword keyword-return\">return</span> obj<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">getRegex</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword keyword-return\">return</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> opt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword keyword-return\">return</span> obj<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><h2 id=\"其他类型\">其他类型 </h2>\n<p>匹配代码行的缩进 codeRemoveIndent <code>/^(?: {1,4}| {0,3}\\t)/gm</code><br>\noutputLinkReplace <code>/\\\\([\\[\\]])/g</code><br>\n匹配围栏代码是不是有缩进 indentCodeCompensation <code>/^(\\s+)(?:```)/</code><br>\nbeginningSpace <code>/^\\s+/</code><br>\n标题内容的# endingHash: <code>/#$/</code><br>\nstartingSpaceChar <code>/^ /</code><br>\n标题内容的空白 endingSpaceChar <code>/ $/</code><br>\nnonSpaceChar: <code>/[^ ]/</code><br>\nnewLineCharGlobal <code>/\\n/g</code><br>\n|制表符 | tabCharGlobal | <code>/\\t/g</code> |<br>\nmultipleSpaceGlobal <code>/\\s+/g</code><br>\nblankLine <code>/^[ \\t]*$/</code><br>\ndoubleBlankLine <code>/\\n[ \\t]*\\n[ \\t]*$/</code><br>\n块引用的开始符 blockquoteStart <code>/^ {0,3}&gt;/</code><br>\n块引用中嵌套列表 blockquoteSetextReplace <code>/\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g</code><br>\n块引用中的空白 blockquoteSetextReplace2 <code>/^ {0,3}&gt;[ \\t]?/gm</code><br>\nlistReplaceTabs <code>/^\\t+/</code><br>\nlistReplaceNesting <code>/^ {1,4}(?=( {4})*[^ ])/g</code><br>\nlistIsTask <code>/^\\[[ xX]\\] /</code><br>\nlistReplaceTask <code>/^\\[[ xX]\\] +/</code><br>\nanyLine <code>/\\n.*\\n/</code><br>\nhrefBrackets <code>/^&lt;(.*)&gt;$/</code><br>\ntableDelimiter <code>/[:|]/</code><br>\ntableAlignChars <code>/^\\||\\| *$/g</code><br>\ntableRowBlankLine <code>/\\n[ \\t]*$/</code><br>\ntableAlignRight <code>/^ *-+: *$/</code><br>\ntableAlignCenter <code>/^ *:-+: *$/</code><br>\ntableAlignLeft <code>/^ *:-+ *$/</code><br>\nstartATag <code>/^&lt;a /i</code><br>\nendATag <code>/^&lt;\\/a&gt;/i</code><br>\nstartPreScriptTag <code>/^&lt;(pre|code|kbd|script)(\\s|&gt;)/i</code><br>\nendPreScriptTag <code>/^&lt;\\/(pre|code|kbd|script)(\\s|&gt;)/i</code><br>\nstartAngleBracket <code>/^&lt;/</code><br>\nendAngleBracket <code>/&gt;$/</code><br>\npedanticHrefTitle <code>/^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/</code><br>\nunicodeAlphaNumeric <code>/[\\p{L}\\p{N}]/u</code><br>\nescapeTest <code>/[&amp;&lt;&gt;\"']/</code><br>\nescapeReplace <code>/[&amp;&lt;&gt;\"']/g</code><br>\nescapeTestNoEncode <code>/[&lt;&gt;\"']|&amp;(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/</code><br>\nescapeReplaceNoEncode <code>/[&lt;&gt;\"']|&amp;(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/g</code><br>\nunescapeTest <code>/&amp;(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig</code><br>\ncaret <code>/(^|[^\\[])\\^/g</code><br>\npercentDecode <code>/%25/g</code><br>\nfindPipe <code>/\\|/g</code><br>\nsplitPipe <code>/ \\|/</code><br>\nslashPipe <code>/\\\\\\|/g</code><br>\n回车换行 carriageReturn<code>/\\r\\n|\\r/g</code><br>\n空行 spaceLine  <code>/^ +$/gm</code><br>\nnotSpaceStart <code>/^\\S*/</code><br>\nendingNewline <code>/\\n$/</code><br>\nlistItemRegex <code>(bull: string) =&gt; new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`)</code><br>\nnextBulletRegex <code>(indent: number) =&gt; new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`)</code><br>\nhrRegex <code>(indent: number) =&gt; new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`)</code><br>\nfencesBeginRegex <code>(indent: number) =&gt; new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`)</code><br>\nheadingBeginRegex <code>(indent: number) =&gt; new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`)</code><br>\nhtmlBeginRegex <code>(indent: number) =&gt; new RegExp(`^ {0,${Math.min(3, indent - 1)}}&lt;(?:[a-z].*&gt;|!--)`, 'i')</code></p>\n<h2 id=\"块级类型\">块级类型 </h2>\n<p>空白行  newline  <code>/^(?:[ \\t]*(?:\\n|$))+/</code><br>\n代码块（缩进）blockCode <code>/^((?: {4}| {0,3}\\t)[^\\n]+(?:\\n(?:[ \\t]*(?:\\n|$))*)?)+/;</code><br>\n围栏代码块 fences   <code>/^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/</code><br>\n水平线 hr <code>/^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/</code><br>\n标题匹配 heading <code>/^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/</code><br>\nbullet <code>/(?:[*+-]|\\d{1,9}[.)])/</code><br>\nlheading</p>\n<pre data-role=\"codeBlock\" data-info=\"javascript\" class=\"language-javascript javascript\"><code><span class=\"token function\">edit</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^(?!bull |blockCode|fences|blockquote|heading|html)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">bull</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> bullet<span class=\"token punctuation\">)</span> <span class=\"token comment\">// lists can interrupt</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">blockCode</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(?: {4}| {0,3}\\t)</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// indented code blocks can interrupt</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">fences</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"> {0,3}(?:`{3,}|~{3,})</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// fenced code blocks can interrupt</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">blockquote</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"> {0,3}&gt;</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// blockquote can interrupt</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">heading</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"> {0,3}#{1,6}</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ATX heading can interrupt</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">html</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"> {0,3}&lt;[^\\n&gt;]+&gt;\\n</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// block html can interrupt</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getRegex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre><p>_paragraph <code>/^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/</code><br>\nblockText <code>/^[^\\n]+/</code><br>\n_blockLabel  <code>/(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/</code><br>\ndef</p>\n<pre data-role=\"codeBlock\" data-info=\"javascript\" class=\"language-javascript javascript\"><code><span class=\"token function\">edit</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^ {0,3}\\[(label)\\]: *(?:\\n[ \\t]*)?([^&lt;\\s][^\\s]*|&lt;.*?&gt;)(?:(?: +(?:\\n[ \\t]*)?| *\\n[ \\t]*)(title))? *(?:\\n+|$)</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'label'</span><span class=\"token punctuation\">,</span> _blockLabel<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">,</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getRegex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre><p>list</p>\n<pre data-role=\"codeBlock\" data-info=\"javascript\" class=\"language-javascript javascript\"><code><span class=\"token function\">edit</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">bull</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> bullet<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getRegex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre><p>_tag</p>\n<pre data-role=\"codeBlock\" data-info=\"javascript\" class=\"language-javascript javascript\"><code><span class=\"token string\">'address|article|aside|base|basefont|blockquote|body|caption'</span>\n  <span class=\"token operator\">+</span> <span class=\"token string\">'|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'</span>\n  <span class=\"token operator\">+</span> <span class=\"token string\">'|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'</span>\n  <span class=\"token operator\">+</span> <span class=\"token string\">'|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'</span>\n  <span class=\"token operator\">+</span> <span class=\"token string\">'|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title'</span>\n  <span class=\"token operator\">+</span> <span class=\"token string\">'|tr|track|ul'</span>\n</code></pre><p>_comment <code>/&lt;!--(?:-?&gt;|[\\s\\S]*?(?:--&gt;|$))/</code><br>\nhtml</p>\n<pre data-role=\"codeBlock\" data-info=\"javascript\" class=\"language-javascript javascript\"><code><span class=\"token function\">edit</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'^ {0,3}(?:'</span> <span class=\"token comment\">// optional indentation</span>\n<span class=\"token operator\">+</span> <span class=\"token string\">'&lt;(script|pre|style|textarea)[\\\\s&gt;][\\\\s\\\\S]*?(?:&lt;/\\\\1&gt;[^\\\\n]*\\\\n+|$)'</span> <span class=\"token comment\">// (1)</span>\n<span class=\"token operator\">+</span> <span class=\"token string\">'|comment[^\\\\n]*(\\\\n+|$)'</span> <span class=\"token comment\">// (2)</span>\n<span class=\"token operator\">+</span> <span class=\"token string\">'|&lt;\\\\?[\\\\s\\\\S]*?(?:\\\\?&gt;\\\\n*|$)'</span> <span class=\"token comment\">// (3)</span>\n<span class=\"token operator\">+</span> <span class=\"token string\">'|&lt;![A-Z][\\\\s\\\\S]*?(?:&gt;\\\\n*|$)'</span> <span class=\"token comment\">// (4)</span>\n<span class=\"token operator\">+</span> <span class=\"token string\">'|&lt;!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]&gt;\\\\n*|$)'</span> <span class=\"token comment\">// (5)</span>\n<span class=\"token operator\">+</span> <span class=\"token string\">'|&lt;/?(tag)(?: +|\\\\n|/?&gt;)[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)'</span> <span class=\"token comment\">// (6)</span>\n<span class=\"token operator\">+</span> <span class=\"token string\">'|&lt;(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?&gt;(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)'</span> <span class=\"token comment\">// (7) open tag</span>\n<span class=\"token operator\">+</span> <span class=\"token string\">'|&lt;/(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*&gt;(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)'</span> <span class=\"token comment\">// (7) closing tag</span>\n<span class=\"token operator\">+</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'i'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'comment'</span><span class=\"token punctuation\">,</span> _comment<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tag'</span><span class=\"token punctuation\">,</span> _tag<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'attribute'</span><span class=\"token punctuation\">,</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"> +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=&lt;&gt;`]+)?</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getRegex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre><p>paragraph</p>\n<pre data-role=\"codeBlock\" data-info=\"javascript\" class=\"language-javascript javascript\"><code> <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span>_paragraph<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hr'</span><span class=\"token punctuation\">,</span> hr<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'heading'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">' {0,3}#{1,6}(?:\\\\s|$)'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'|lheading'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// setext headings don't interrupt commonmark paragraphs</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'|table'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'blockquote'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">' {0,3}&gt;'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fences'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'list'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">' {0,3}(?:[*+-]|1[.)]) '</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// only lists starting from 1 can interrupt</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&lt;/?(?:tag)(?: +|\\\\n|/?&gt;)|&lt;(?:script|pre|style|textarea|!--)'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tag'</span><span class=\"token punctuation\">,</span> _tag<span class=\"token punctuation\">)</span> <span class=\"token comment\">// pars can be interrupted by type (6) html blocks</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getRegex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><p>块引用 blockquote</p>\n<pre data-role=\"codeBlock\" data-info=\"javascript\" class=\"language-javascript javascript\"><code><span class=\"token function\">edit</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^( {0,3}&gt; ?(paragraph|[^\\n]*)(?:\\n|$))+</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'paragraph'</span><span class=\"token punctuation\">,</span> paragraph<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getRegex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre><p>gfmTable</p>\n<pre data-role=\"codeBlock\" data-info=\"javascript\" class=\"language-javascript javascript\"><code><span class=\"token function\">edit</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'^ *([^\\\\n ].*)\\\\n'</span> <span class=\"token comment\">// Header</span>\n<span class=\"token operator\">+</span> <span class=\"token string\">' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)'</span> <span class=\"token comment\">// Align</span>\n<span class=\"token operator\">+</span> <span class=\"token string\">'(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Cells</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hr'</span><span class=\"token punctuation\">,</span> hr<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'heading'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">' {0,3}#{1,6}(?:\\\\s|$)'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'blockquote'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">' {0,3}&gt;'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'code'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'(?: {4}| {0,3}\\t)[^\\\\n]'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fences'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'list'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">' {0,3}(?:[*+-]|1[.)]) '</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// only lists starting from 1 can interrupt</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&lt;/?(?:tag)(?: +|\\\\n|/?&gt;)|&lt;(?:script|pre|style|textarea|!--)'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tag'</span><span class=\"token punctuation\">,</span> _tag<span class=\"token punctuation\">)</span> <span class=\"token comment\">// tables can be interrupted by type (6) html blocks</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getRegex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre><h2 id=\"行内类型\">行内类型 </h2>\n\n      </div>\n      <div class=\"md-sidebar-toc\">\n<div class=\"md-toc\">\n<details style=\"padding:0;;padding-left:0px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#解析规则-rules\" class=\"md-toc-link\"><p>解析规则 rules</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#正则编辑器\" class=\"md-toc-link\">\n            <p>正则编辑器</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#其他类型\" class=\"md-toc-link\">\n            <p>其他类型</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#块级类型\" class=\"md-toc-link\">\n            <p>块级类型</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#行内类型\" class=\"md-toc-link\">\n            <p>行内类型</p>\n\n          </a></div>\n        </div>\n      </details>\n    \n</div>\n</div>\n      <a id=\"sidebar-toc-btn\">≡</a>\n    \n    \n    \n    \n    \n    \n<script>\n\nvar sidebarTOCBtn = document.getElementById('sidebar-toc-btn')\nsidebarTOCBtn.addEventListener('click', function(event) {\n  event.stopPropagation()\n  if (document.body.hasAttribute('html-show-sidebar-toc')) {\n    document.body.removeAttribute('html-show-sidebar-toc')\n  } else {\n    document.body.setAttribute('html-show-sidebar-toc', true)\n  }\n})\n</script>\n      \n  \n    "},{"id":"10042_100005","type":"chapter","name":"Token","fullPath":"F:\\passerby\\source\\marked源码解析\\05Token.md","url":"/chapter/10042_100005","content":"\n    \n    \n      <div class=\"crossnote markdown-preview  \">\n      \n<h1 id=\"token\">Token </h1>\n<p>细化文档解析后的颗粒度，主要分为一下几个类型，也是说归纳AST树的节点类型</p>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code><span class=\"token keyword keyword-export\">export</span> <span class=\"token keyword keyword-namespace\">namespace</span> Tokens <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre><h2 id=\"blockquote-块级引用\">Blockquote 块级引用 </h2>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code><span class=\"token keyword keyword-export\">export</span> <span class=\"token keyword keyword-interface\">interface</span> <span class=\"token class-name\">Blockquote</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">\"blockquote\"</span><span class=\"token punctuation\">;</span>\n  raw<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  text<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  tokens<span class=\"token operator\">:</span> Token<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><h2 id=\"br换行\">Br换行 </h2>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code><span class=\"token keyword keyword-export\">export</span> <span class=\"token keyword keyword-interface\">interface</span> <span class=\"token class-name\">Blockquote</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'br'</span><span class=\"token punctuation\">;</span>\n    raw<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><h2 id=\"checkbox-代办事项\">CheckBox 代办事项 </h2>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code><span class=\"token keyword keyword-export\">export</span> <span class=\"token keyword keyword-interface\">interface</span> <span class=\"token class-name\">Checkbox</span> <span class=\"token punctuation\">{</span>\n    checked<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><h2 id=\"code\">code </h2>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code><span class=\"token keyword keyword-export\">export</span> <span class=\"token keyword keyword-interface\">interface</span> <span class=\"token class-name\">Code</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'code'</span><span class=\"token punctuation\">;</span>\n    raw<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    codeBlockStyle<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token string\">'indented'</span><span class=\"token punctuation\">;</span>\n    lang<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    text<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    escaped<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><h2 id=\"codespan\">Codespan </h2>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code><span class=\"token keyword keyword-export\">export</span> <span class=\"token keyword keyword-interface\">interface</span> <span class=\"token class-name\">Code</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'codespan'</span><span class=\"token punctuation\">;</span>\n    raw<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    text<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><h2 id=\"def-引用\">Def 引用 </h2>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code><span class=\"token keyword keyword-export\">export</span> <span class=\"token keyword keyword-interface\">interface</span> <span class=\"token class-name\">Def</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'def'</span><span class=\"token punctuation\">;</span>\n    raw<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    tag<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    href<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><h2 id=\"del-删除\">Del 删除 </h2>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code><span class=\"token keyword keyword-export\">export</span> <span class=\"token keyword keyword-interface\">interface</span> <span class=\"token class-name\">Del</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'del'</span><span class=\"token punctuation\">;</span>\n    raw<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    text<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    tokens<span class=\"token operator\">:</span> Token<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><h2 id=\"em-斜体\">Em 斜体 </h2>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code><span class=\"token keyword keyword-export\">export</span> <span class=\"token keyword keyword-interface\">interface</span> <span class=\"token class-name\">Em</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'em'</span><span class=\"token punctuation\">;</span>\n    raw<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    text<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    tokens<span class=\"token operator\">:</span> Token<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><h2 id=\"escape-转义\">Escape 转义 </h2>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code><span class=\"token keyword keyword-export\">export</span> <span class=\"token keyword keyword-interface\">interface</span> <span class=\"token class-name\">Escape</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'escape'</span><span class=\"token punctuation\">;</span>\n    raw<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    text<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><h2 id=\"generic-通用类型\">Generic 通用类型 </h2>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code><span class=\"token keyword keyword-export\">export</span> <span class=\"token keyword keyword-interface\">interface</span> <span class=\"token class-name\">Generic</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>index<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n    type<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    raw<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    tokens<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Token<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><h2 id=\"heading-标题\">Heading 标题 </h2>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code><span class=\"token keyword keyword-export\">export</span> <span class=\"token keyword keyword-interface\">interface</span> <span class=\"token class-name\">Heading</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'heading'</span><span class=\"token punctuation\">;</span>\n    raw<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    depth<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    text<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    tokens<span class=\"token operator\">:</span> Token<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><h2 id=\"hr-下划线\">Hr 下划线 </h2>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code><span class=\"token keyword keyword-export\">export</span> <span class=\"token keyword keyword-interface\">interface</span> <span class=\"token class-name\">Hr</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'hr'</span><span class=\"token punctuation\">;</span>\n    raw<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><h2 id=\"html\">HTML </h2>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code><span class=\"token keyword keyword-export\">export</span> <span class=\"token keyword keyword-interface\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">HTML</span></span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'html'</span><span class=\"token punctuation\">;</span>\n    raw<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    pre<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n    text<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    block<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><h2 id=\"image-图片\">Image 图片 </h2>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code><span class=\"token keyword keyword-export\">export</span> <span class=\"token keyword keyword-interface\">interface</span> <span class=\"token class-name\">Image</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'image'</span><span class=\"token punctuation\">;</span>\n    raw<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    href<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword keyword-null\">null</span><span class=\"token punctuation\">;</span>\n    text<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><h2 id=\"link-链接\">Link 链接 </h2>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code><span class=\"token keyword keyword-export\">export</span> <span class=\"token keyword keyword-interface\">interface</span> <span class=\"token class-name\">Link</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'link'</span><span class=\"token punctuation\">;</span>\n    raw<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    href<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    title<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword keyword-null\">null</span><span class=\"token punctuation\">;</span>\n    text<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    tokens<span class=\"token operator\">:</span> Token<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><h2 id=\"list-列表\">List 列表 </h2>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code><span class=\"token keyword keyword-export\">export</span> <span class=\"token keyword keyword-interface\">interface</span> <span class=\"token class-name\">ListItem</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'list_item'</span><span class=\"token punctuation\">;</span>\n    raw<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    task<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n    checked<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n    loose<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n    text<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    tokens<span class=\"token operator\">:</span> Token<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><h2 id=\"paragraph-段落\">Paragraph 段落 </h2>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code><span class=\"token keyword keyword-export\">export</span> <span class=\"token keyword keyword-interface\">interface</span> <span class=\"token class-name\">Paragraph</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'paragraph'</span><span class=\"token punctuation\">;</span>\n    raw<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    pre<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n    text<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    tokens<span class=\"token operator\">:</span> Token<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><h2 id=\"space-空白\">Space 空白 </h2>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code><span class=\"token keyword keyword-export\">export</span> <span class=\"token keyword keyword-interface\">interface</span> <span class=\"token class-name\">Space</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'space'</span><span class=\"token punctuation\">;</span>\n    raw<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><h2 id=\"strong-粗体\">Strong 粗体 </h2>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code><span class=\"token keyword keyword-export\">export</span> <span class=\"token keyword keyword-interface\">interface</span> <span class=\"token class-name\">Strong</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'strong'</span><span class=\"token punctuation\">;</span>\n    raw<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    text<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    tokens<span class=\"token operator\">:</span> Token<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><h2 id=\"table-表格\">Table 表格 </h2>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code><span class=\"token keyword keyword-export\">export</span> <span class=\"token keyword keyword-interface\">interface</span> <span class=\"token class-name\">Table</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'table'</span><span class=\"token punctuation\">;</span>\n    raw<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    align<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token string\">'center'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'left'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'right'</span> <span class=\"token operator\">|</span> <span class=\"token keyword keyword-null\">null</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n    header<span class=\"token operator\">:</span> TableCell<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    rows<span class=\"token operator\">:</span> TableCell<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><h2 id=\"tablecell-单元格\">TableCell 单元格 </h2>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code><span class=\"token keyword keyword-export\">export</span> <span class=\"token keyword keyword-interface\">interface</span> <span class=\"token class-name\">TableCell</span> <span class=\"token punctuation\">{</span>\n    text<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    tokens<span class=\"token operator\">:</span> Token<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    header<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n    align<span class=\"token operator\">:</span> <span class=\"token string\">'center'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'left'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'right'</span> <span class=\"token operator\">|</span> <span class=\"token keyword keyword-null\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><h2 id=\"tablerow-单元行\">TableRow 单元行 </h2>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code><span class=\"token keyword keyword-export\">export</span> <span class=\"token keyword keyword-interface\">interface</span> <span class=\"token class-name\">TableRow</span> <span class=\"token punctuation\">{</span>\n    text<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><h2 id=\"tag-标签\">Tag 标签 </h2>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code><span class=\"token keyword keyword-export\">export</span> <span class=\"token keyword keyword-interface\">interface</span> <span class=\"token class-name\">Tag</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'html'</span><span class=\"token punctuation\">;</span>\n    raw<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    inLink<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n    inRawBlock<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n    text<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    block<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><h2 id=\"text-文本\">Text 文本 </h2>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code><span class=\"token keyword keyword-export\">export</span> <span class=\"token keyword keyword-interface\">interface</span> <span class=\"token class-name\">Text</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">;</span>\n    raw<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    text<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    tokens<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Token<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    escaped<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n      </div>\n      <div class=\"md-sidebar-toc\">\n<div class=\"md-toc\">\n<details style=\"padding:0;;padding-left:0px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#token\" class=\"md-toc-link\"><p>Token</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#blockquote-块级引用\" class=\"md-toc-link\">\n            <p>Blockquote 块级引用</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#br换行\" class=\"md-toc-link\">\n            <p>Br换行</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#checkbox-代办事项\" class=\"md-toc-link\">\n            <p>CheckBox 代办事项</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#code\" class=\"md-toc-link\">\n            <p>code</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#codespan\" class=\"md-toc-link\">\n            <p>Codespan</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#def-引用\" class=\"md-toc-link\">\n            <p>Def 引用</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#del-删除\" class=\"md-toc-link\">\n            <p>Del 删除</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#em-斜体\" class=\"md-toc-link\">\n            <p>Em 斜体</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#escape-转义\" class=\"md-toc-link\">\n            <p>Escape 转义</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#generic-通用类型\" class=\"md-toc-link\">\n            <p>Generic 通用类型</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#heading-标题\" class=\"md-toc-link\">\n            <p>Heading 标题</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#hr-下划线\" class=\"md-toc-link\">\n            <p>Hr 下划线</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#html\" class=\"md-toc-link\">\n            <p>HTML</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#image-图片\" class=\"md-toc-link\">\n            <p>Image 图片</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#link-链接\" class=\"md-toc-link\">\n            <p>Link 链接</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#list-列表\" class=\"md-toc-link\">\n            <p>List 列表</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#paragraph-段落\" class=\"md-toc-link\">\n            <p>Paragraph 段落</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#space-空白\" class=\"md-toc-link\">\n            <p>Space 空白</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#strong-粗体\" class=\"md-toc-link\">\n            <p>Strong 粗体</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#table-表格\" class=\"md-toc-link\">\n            <p>Table 表格</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#tablecell-单元格\" class=\"md-toc-link\">\n            <p>TableCell 单元格</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#tablerow-单元行\" class=\"md-toc-link\">\n            <p>TableRow 单元行</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#tag-标签\" class=\"md-toc-link\">\n            <p>Tag 标签</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#text-文本\" class=\"md-toc-link\">\n            <p>Text 文本</p>\n\n          </a></div>\n        </div>\n      </details>\n    \n</div>\n</div>\n      <a id=\"sidebar-toc-btn\">≡</a>\n    \n    \n    \n    \n    \n    \n<script>\n\nvar sidebarTOCBtn = document.getElementById('sidebar-toc-btn')\nsidebarTOCBtn.addEventListener('click', function(event) {\n  event.stopPropagation()\n  if (document.body.hasAttribute('html-show-sidebar-toc')) {\n    document.body.removeAttribute('html-show-sidebar-toc')\n  } else {\n    document.body.setAttribute('html-show-sidebar-toc', true)\n  }\n})\n</script>\n      \n  \n    "}],"type":"book","url":"/chapter/10042_100000"},"chapterInfo":{"id":"10042_100002","type":"chapter","name":"词法分析latex","fullPath":"F:\\passerby\\source\\marked源码解析\\02词法分析latex.md","url":"/chapter/10042_100002","content":"\n    \n    \n      <div class=\"crossnote markdown-preview  \">\n      \n<h1 id=\"lexer-词法分析\">Lexer 词法分析 </h1>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code></code></pre><h2 id=\"初始化\">初始化 </h2>\n<ol>\n<li>初始化基础数据和分词器Tokenizer</li>\n<li>初始化markword文档的<a href=\"/chapter/\">解析规则</a></li>\n</ol>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code><span class=\"token function\">consstructor</span><span class=\"token punctuation\">(</span>options<span class=\"token operator\">?</span><span class=\"token operator\">:</span> MarkedOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>tokens <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword keyword-as\">as</span> <span class=\"token builtin\">unknown</span> <span class=\"token keyword keyword-as\">as</span> TokensList<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>tokens<span class=\"token punctuation\">.</span>links <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword keyword-null\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>options <span class=\"token operator\">=</span> options <span class=\"token operator\">||</span> _defaults<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>tokenizer <span class=\"token operator\">=</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>tokenizer <span class=\"token operator\">||</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token class-name\">_Tokenizer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>tokenizer <span class=\"token operator\">=</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>tokenizer<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>tokenizer<span class=\"token punctuation\">.</span>options <span class=\"token operator\">=</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>tokenizer<span class=\"token punctuation\">.</span>lexer <span class=\"token operator\">=</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>inlineQueue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        inLink<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        inRawBlock<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        top<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword keyword-const\">const</span> rules <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        other<span class=\"token punctuation\">,</span>\n        block<span class=\"token operator\">:</span> block<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">,</span>\n        inline<span class=\"token operator\">:</span> inline<span class=\"token punctuation\">.</span>normal<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>pedantic<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        rules<span class=\"token punctuation\">.</span>block <span class=\"token operator\">=</span> block<span class=\"token punctuation\">.</span>pedantic<span class=\"token punctuation\">;</span>\n        rules<span class=\"token punctuation\">.</span>inline <span class=\"token operator\">=</span> inline<span class=\"token punctuation\">.</span>pedantic<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-else\">else</span> <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>gfm<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        rules<span class=\"token punctuation\">.</span>block <span class=\"token operator\">=</span> block<span class=\"token punctuation\">.</span>gfm<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>breaks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            rules<span class=\"token punctuation\">.</span>inline <span class=\"token operator\">=</span> inline<span class=\"token punctuation\">.</span>breaks<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-else\">else</span> <span class=\"token punctuation\">{</span>\n            rules<span class=\"token punctuation\">.</span>inline <span class=\"token operator\">=</span> inline<span class=\"token punctuation\">.</span>gfm<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>tokenizer<span class=\"token punctuation\">.</span>rules <span class=\"token operator\">=</span> rules<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><h2 id=\"lex-分解词汇\">lex 分解词汇 </h2>\n<ol>\n<li>将文档中的回车换行统一为<code>\\n</code></li>\n<li>处理块级的词汇凭证Token</li>\n<li>在处理行内的词汇凭证Token</li>\n<li>返回获取到的AST树</li>\n</ol>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code><span class=\"token function\">lex</span><span class=\"token punctuation\">(</span>src<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    src <span class=\"token operator\">=</span> src<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>carriageReturn<span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">blockTokens</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>tokens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword keyword-for\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword keyword-let\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>inlineQueue<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword keyword-const\">const</span> next <span class=\"token operator\">=</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>inlineQueue<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">inlineTokens</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">.</span>tokens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>inlineQueue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword keyword-return\">return</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>tokens<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><h3 id=\"blocktokens-块级\">blockTokens 块级 </h3>\n<ol>\n<li>优先块级扩展中的词法分析器</li>\n<li>执行空白的词法分析器</li>\n<li>执行空白缩进或者制表符格式的代码行的词法分析器</li>\n<li>执行围栏代码块的词法分析器</li>\n<li>执行标题的词法分析器</li>\n<li>执行水平线的词法分析器</li>\n<li>执行块引用的词法分析器</li>\n</ol>\n<pre data-role=\"codeBlock\" data-info=\"typescript\" class=\"language-typescript typescript\"><code><span class=\"token function\">blockTokens</span><span class=\"token punctuation\">(</span>src<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> tokens<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Token<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> lastParagraphClipped<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Token<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">blockTokens</span><span class=\"token punctuation\">(</span>src<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> tokens<span class=\"token operator\">?</span><span class=\"token operator\">:</span> TokensList<span class=\"token punctuation\">,</span> lastParagraphClipped<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> TokensList<span class=\"token punctuation\">;</span>\n<span class=\"token function\">blockTokens</span><span class=\"token punctuation\">(</span>src<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> tokens<span class=\"token operator\">:</span> Token<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> lastParagraphClipped <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>pedantic<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      src <span class=\"token operator\">=</span> src<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>tabCharGlobal<span class=\"token punctuation\">,</span> <span class=\"token string\">'    '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>spaceLine<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword keyword-while\">while</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword keyword-let\">let</span> token<span class=\"token operator\">:</span> Tokens<span class=\"token punctuation\">.</span>Generic <span class=\"token operator\">|</span> <span class=\"token keyword keyword-undefined\">undefined</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>extensions<span class=\"token operator\">?.</span>block<span class=\"token operator\">?.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>extTokenizer<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>token <span class=\"token operator\">=</span> <span class=\"token function\">extTokenizer</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> lexer<span class=\"token operator\">:</span> <span class=\"token keyword keyword-this\">this</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">,</span> tokens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                src <span class=\"token operator\">=</span> src<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                tokens<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword keyword-return\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword keyword-continue\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>token <span class=\"token operator\">=</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>tokenizer<span class=\"token punctuation\">.</span><span class=\"token function\">space</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                src <span class=\"token operator\">=</span> src<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword keyword-const\">const</span> lastToken <span class=\"token operator\">=</span> tokens<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> lastToken <span class=\"token operator\">!==</span> <span class=\"token keyword keyword-undefined\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// if there's a single \\n as a spacer, it's terminating the last line,</span>\n            <span class=\"token comment\">// so move it there so that we don't get unnecessary paragraph tags</span>\n                lastToken<span class=\"token punctuation\">.</span>raw <span class=\"token operator\">+=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-else\">else</span> <span class=\"token punctuation\">{</span>\n                tokens<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword keyword-continue\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>token <span class=\"token operator\">=</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>tokenizer<span class=\"token punctuation\">.</span><span class=\"token function\">code</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                src <span class=\"token operator\">=</span> src<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword keyword-const\">const</span> lastToken <span class=\"token operator\">=</span> tokens<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// An indented code block cannot interrupt a paragraph.</span>\n            <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>lastToken<span class=\"token operator\">?.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'paragraph'</span> <span class=\"token operator\">||</span> lastToken<span class=\"token operator\">?.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                lastToken<span class=\"token punctuation\">.</span>raw <span class=\"token operator\">+=</span> <span class=\"token string\">'\\n'</span> <span class=\"token operator\">+</span> token<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">;</span>\n                lastToken<span class=\"token punctuation\">.</span>text <span class=\"token operator\">+=</span> <span class=\"token string\">'\\n'</span> <span class=\"token operator\">+</span> token<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>inlineQueue<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> lastToken<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-else\">else</span> <span class=\"token punctuation\">{</span>\n                tokens<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword keyword-continue\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>token <span class=\"token operator\">=</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>tokenizer<span class=\"token punctuation\">.</span><span class=\"token function\">fences</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            src <span class=\"token operator\">=</span> src<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            tokens<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword keyword-continue\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>token <span class=\"token operator\">=</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>tokenizer<span class=\"token punctuation\">.</span><span class=\"token function\">heading</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            src <span class=\"token operator\">=</span> src<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            tokens<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword keyword-continue\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>token <span class=\"token operator\">=</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>tokenizer<span class=\"token punctuation\">.</span><span class=\"token function\">hr</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            src <span class=\"token operator\">=</span> src<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            tokens<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword keyword-continue\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>token <span class=\"token operator\">=</span> <span class=\"token keyword keyword-this\">this</span><span class=\"token punctuation\">.</span>tokenizer<span class=\"token punctuation\">.</span><span class=\"token function\">blockquote</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            src <span class=\"token operator\">=</span> src<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            tokens<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword keyword-continue\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><h3 id=\"inlinetokens-行内\">inlineTokens 行内 </h3>\n\n      </div>\n      <div class=\"md-sidebar-toc\">\n<div class=\"md-toc\">\n<details style=\"padding:0;;padding-left:0px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#lexer-词法分析\" class=\"md-toc-link\"><p>Lexer 词法分析</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#初始化\" class=\"md-toc-link\">\n            <p>初始化</p>\n\n          </a></div><details style=\"padding:0;;padding-left:24px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#lex-分解词汇\" class=\"md-toc-link\"><p>lex 分解词汇</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#blocktokens-块级\" class=\"md-toc-link\">\n            <p>blockTokens 块级</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#inlinetokens-行内\" class=\"md-toc-link\">\n            <p>inlineTokens 行内</p>\n\n          </a></div>\n        </div>\n      </details>\n    \n        </div>\n      </details>\n    \n</div>\n</div>\n      <a id=\"sidebar-toc-btn\">≡</a>\n    \n    \n    \n    \n    \n    \n<script>\n\nvar sidebarTOCBtn = document.getElementById('sidebar-toc-btn')\nsidebarTOCBtn.addEventListener('click', function(event) {\n  event.stopPropagation()\n  if (document.body.hasAttribute('html-show-sidebar-toc')) {\n    document.body.removeAttribute('html-show-sidebar-toc')\n  } else {\n    document.body.setAttribute('html-show-sidebar-toc', true)\n  }\n})\n</script>\n      \n  \n    "}},"__N_SSG":true}