{"pageProps":{"bookInfo":{"id":"10039","name":"微前端","fullPath":"F:\\passerby\\framework\\微前端","chapterList":[{"id":"10039_100000","type":"chapter","name":"简介","fullPath":"F:\\passerby\\framework\\微前端\\01简介.md","url":"/chapter/10039_100000","content":"\n    \n    \n      <div class=\"crossnote markdown-preview  \">\n      \n<h1 id=\"微前端\">微前端 </h1>\n<p>微前端是一种多个团队通过独立发布功能的方式来共同构建现代化web应用的技术手段及方法策略</p>\n<h2 id=\"定义\">定义 </h2>\n<p>现代的前端应用的发展趋势正在变得越来越富功能化，富交互化，也就是传说中的SPA(单页面应用)；这样越来越复杂的单体前端应用，背后的后端应用则是数量庞大的微服务集群。被一个团队维护的前端项目，随着时间推进，会变得越来越庞大，越来越难以维护。所以我们给这种应用起名为<em>巨石单体应用</em><br>\n微前端背后的思想是认为：现代复杂的web app或者网站，通常由很多相对独立的功能模块组合而成，而对这些模块负责的应该是相互独立的多个团队。这些独立的团队由于专业分工不同，会负责着特定的业务领域，以及完成特定的开发任务。这样的团队，通常在人员组成方面囊括了从前端开发到服务端开发，从UI实现到数据库设计这样端到端的跨职能人员构成</p>\n<h2 id=\"核心思维\">核心思维 </h2>\n<h3 id=\"技术不可知主义\">技术不可知主义 </h3>\n<p>每个团队应该选择自己的技术栈以及技术进化路线，而不是与其他团队步调一致。在项目中可以通过引入自定义元素来提供技术栈无关的接口，同时还隐藏了复杂的内部实现。也许在微前端的语境之下，框架将不是未来架构师主要考虑的问题，如何高效的提供可复用的WebComponent会成为核心问题</p>\n<h3 id=\"隔离团队之间的代码\">隔离团队之间的代码 </h3>\n<p>即便所有团队都使用同样的框架，也不要共享同一个运行时环境。构建自包含的Apps。不要依赖共享的状态或者全局变量</p>\n<h3 id=\"建立团队自己的前缀\">建立团队自己的前缀 </h3>\n<p>在还不能做到完全隔离的环境下，通过命名规约进行隔离。对于CSS， 事件，Local Storage 以及 Cookies之类的环境之下，通过命名空间进行的隔离可以避免冲突，以及所有权</p>\n<h3 id=\"原生浏览器标准优先于框架封装的api\">原生浏览器标准优先于框架封装的API </h3>\n<p>使用<strong>用于通信的原生浏览器事件机制</strong>，而不是自己构建一个PubSub系统。如果确实需要设计一个跨团队的通信API，那么也尽量让设计简单为好</p>\n<h3 id=\"构建高可用的网络应用\">构建高可用的网络应用 </h3>\n<p>即便在Javascript执行失败的情况下，站点的功能也应保证可用。使用同构渲染以及渐进增强来提升体验和性能</p>\n<h2 id=\"页面组成\">页面组成 </h2>\n<p>抛开前后端如何集成来自于<strong>不同开发框架</strong>的代码这个问题本身，还有很多其他值得讨论的话题：用来<strong>隔离js作用域的机制</strong>，避免<strong>css样式冲突</strong>，<strong>按需加载资源</strong>，团队之间<strong>共用资源的共享</strong>，<strong>处理获取数据的流程</strong>以及因此产生的如何通过<strong>更好的加载状态管理</strong>来为用户带来更好的体验</p>\n<h3 id=\"同构渲染\">同构渲染 </h3>\n<p>同构渲染（Isomorphic Rendering）是一种现代web开发技术，结合了服务器端渲染（SSR）和客户端渲染（CSR）的优点<br>\n同构渲染是指在前后端共享代码的情况下，首次页面加载时的HTML是在服务器上生成的，然后在客户端上通过JavaScript增强，提供动态的交互性</p>\n<h2 id=\"问题\">问题 </h2>\n<ol>\n<li>为什么更多的微前端框架不采用iframe实现</li>\n</ol>\n<blockquote>\n<p>iframe 最大的特性就是提供了浏览器原生的硬隔离方案，不论是样式隔离、js 隔离这类问题统统都能被完美解决。但是同样也带来了最大的问题隔离性无法被突破，从而应用间无法共享上下文，由此带来的开发、产品体验问题随之而来</p>\n</blockquote>\n<ul>\n<li>url 不同步。浏览器刷新<strong>iframe url</strong>状态丢失、后退前进按钮无法使用</li>\n<li>UI 不同步，DOM结构不共享 例如：右下角的iframe中出带出一个弹窗，要求弹窗的位置在浏览器居中</li>\n<li>全局上下文完全隔离，内存变量不共享，主应用的cookie要透传到根域名都不同的子应用中实现免登效果</li>\n<li>每次子应用进入都是一次浏览器上下文重建、资源重新加载的过程导致<strong>慢</strong></li>\n</ul>\n\n      </div>\n      <div class=\"md-sidebar-toc\">\n<div class=\"md-toc\">\n<details style=\"padding:0;;padding-left:0px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#微前端\" class=\"md-toc-link\"><p>微前端</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#定义\" class=\"md-toc-link\">\n            <p>定义</p>\n\n          </a></div><details style=\"padding:0;;padding-left:24px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#核心思维\" class=\"md-toc-link\"><p>核心思维</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#技术不可知主义\" class=\"md-toc-link\">\n            <p>技术不可知主义</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#隔离团队之间的代码\" class=\"md-toc-link\">\n            <p>隔离团队之间的代码</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#建立团队自己的前缀\" class=\"md-toc-link\">\n            <p>建立团队自己的前缀</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#原生浏览器标准优先于框架封装的api\" class=\"md-toc-link\">\n            <p>原生浏览器标准优先于框架封装的API</p>\n\n          </a></div><div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#构建高可用的网络应用\" class=\"md-toc-link\">\n            <p>构建高可用的网络应用</p>\n\n          </a></div>\n        </div>\n      </details>\n    <details style=\"padding:0;;padding-left:24px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#页面组成\" class=\"md-toc-link\"><p>页面组成</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#同构渲染\" class=\"md-toc-link\">\n            <p>同构渲染</p>\n\n          </a></div>\n        </div>\n      </details>\n    <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#问题\" class=\"md-toc-link\">\n            <p>问题</p>\n\n          </a></div>\n        </div>\n      </details>\n    \n</div>\n</div>\n      <a id=\"sidebar-toc-btn\">≡</a>\n    \n    \n    \n    \n    \n    \n<script>\n\nvar sidebarTOCBtn = document.getElementById('sidebar-toc-btn')\nsidebarTOCBtn.addEventListener('click', function(event) {\n  event.stopPropagation()\n  if (document.body.hasAttribute('html-show-sidebar-toc')) {\n    document.body.removeAttribute('html-show-sidebar-toc')\n  } else {\n    document.body.setAttribute('html-show-sidebar-toc', true)\n  }\n})\n</script>\n      \n  \n    "}],"type":"book","url":"/book/10039"}},"__N_SSG":true}