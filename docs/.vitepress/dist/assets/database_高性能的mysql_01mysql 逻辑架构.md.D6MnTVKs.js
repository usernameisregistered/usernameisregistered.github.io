import{_ as a,c as e,o as s,a2 as t}from"./chunks/framework.Bc4oNHcE.js";const u=JSON.parse('{"title":"01mysql 逻辑架构","description":"","frontmatter":{"layout":"doc","title":"01mysql 逻辑架构"},"headers":[],"relativePath":"database/高性能的mysql/01mysql 逻辑架构.md","filePath":"database/高性能的mysql/01mysql 逻辑架构.md"}'),n={name:"database/高性能的mysql/01mysql 逻辑架构.md"},i=t(`<h1 id="mysql逻辑架构" tabindex="-1">mysql逻辑架构 <a class="header-anchor" href="#mysql逻辑架构" aria-label="Permalink to &quot;mysql逻辑架构&quot;">​</a></h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>        ----------------------------------------</span></span>
<span class="line"><span>        |                客户端                 |</span></span>
<span class="line"><span>        ----------------------------------------</span></span>
<span class="line"><span>        |              连接\\/线程处理            |</span></span>
<span class="line"><span>        ----------------------------------------</span></span>
<span class="line"><span>        |     查询缓存       |       解析器      |</span></span>
<span class="line"><span>        ----------------------------------------</span></span>
<span class="line"><span>        |                 优化器                |</span></span>
<span class="line"><span>        ----------------------------------------</span></span>
<span class="line"><span>        |                 存储引擎              |</span></span>
<span class="line"><span>        ----------------------------------------</span></span></code></pre></div><h1 id="并发控制" tabindex="-1">并发控制 <a class="header-anchor" href="#并发控制" aria-label="Permalink to &quot;并发控制&quot;">​</a></h1><h2 id="读写锁" tabindex="-1">读写锁 <a class="header-anchor" href="#读写锁" aria-label="Permalink to &quot;读写锁&quot;">​</a></h2><h2 id="锁粒度" tabindex="-1">锁粒度 <a class="header-anchor" href="#锁粒度" aria-label="Permalink to &quot;锁粒度&quot;">​</a></h2><blockquote><p>锁策略 就是在锁的开销和数据的安全性之间寻求平衡</p></blockquote><h3 id="表锁" tabindex="-1">表锁 <a class="header-anchor" href="#表锁" aria-label="Permalink to &quot;表锁&quot;">​</a></h3><blockquote><p>最基本的锁策略，并且是开销最小的策略 会锁定整个表</p></blockquote><h3 id="行级锁" tabindex="-1">行级锁 <a class="header-anchor" href="#行级锁" aria-label="Permalink to &quot;行级锁&quot;">​</a></h3><blockquote><p>最大程度的支持并发处理，同时也会带来最大的锁开销</p></blockquote><h1 id="事务" tabindex="-1">事务 <a class="header-anchor" href="#事务" aria-label="Permalink to &quot;事务&quot;">​</a></h1><h2 id="a-atomicity-原子性-不可分割的最小工作单元" tabindex="-1">A atomicity 原子性 不可分割的最小工作单元 <a class="header-anchor" href="#a-atomicity-原子性-不可分割的最小工作单元" aria-label="Permalink to &quot;A atomicity 原子性 不可分割的最小工作单元&quot;">​</a></h2><h2 id="c-comnsistency-一致性" tabindex="-1">C comnsistency 一致性 <a class="header-anchor" href="#c-comnsistency-一致性" aria-label="Permalink to &quot;C comnsistency 一致性&quot;">​</a></h2><h2 id="i-isolation-隔离性" tabindex="-1">I isolation 隔离性 <a class="header-anchor" href="#i-isolation-隔离性" aria-label="Permalink to &quot;I isolation 隔离性&quot;">​</a></h2><h2 id="d-durability-持久性" tabindex="-1">D durability 持久性 <a class="header-anchor" href="#d-durability-持久性" aria-label="Permalink to &quot;D durability 持久性&quot;">​</a></h2><h2 id="隔离级别" tabindex="-1">隔离级别 <a class="header-anchor" href="#隔离级别" aria-label="Permalink to &quot;隔离级别&quot;">​</a></h2><h3 id="未提交读-read-uncomitted" tabindex="-1">未提交读 read uncomitted <a class="header-anchor" href="#未提交读-read-uncomitted" aria-label="Permalink to &quot;未提交读 read uncomitted&quot;">​</a></h3><h3 id="提交读-read-committed" tabindex="-1">提交读 read committed <a class="header-anchor" href="#提交读-read-committed" aria-label="Permalink to &quot;提交读 read committed&quot;">​</a></h3><h3 id="可重复读-repeatable-read" tabindex="-1">可重复读 repeatable read <a class="header-anchor" href="#可重复读-repeatable-read" aria-label="Permalink to &quot;可重复读 repeatable read&quot;">​</a></h3><h3 id="可串行化-serializable" tabindex="-1">可串行化 serializable <a class="header-anchor" href="#可串行化-serializable" aria-label="Permalink to &quot;可串行化 serializable&quot;">​</a></h3><h2 id="死锁" tabindex="-1">死锁 <a class="header-anchor" href="#死锁" aria-label="Permalink to &quot;死锁&quot;">​</a></h2><blockquote><p>2个事务或者多个在同一个资源上相互占用，请求锁定对方占用的资源，从而导致恶性循环的现象</p></blockquote>`,22),l=[i];function o(r,c,d,h,p,b){return s(),e("div",null,l)}const q=a(n,[["render",o]]);export{u as __pageData,q as default};
