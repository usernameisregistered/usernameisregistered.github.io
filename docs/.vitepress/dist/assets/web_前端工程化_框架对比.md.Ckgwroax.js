import{_ as a,c as e,o as t,a2 as r}from"./chunks/framework.Bc4oNHcE.js";const m=JSON.parse('{"title":"框架对比","description":"","frontmatter":{"layout":"doc","title":"框架对比"},"headers":[],"relativePath":"web/前端工程化/框架对比.md","filePath":"web/前端工程化/框架对比.md"}'),o={name:"web/前端工程化/框架对比.md"},c=r('<h2 id="基本选型" tabindex="-1">基本选型 <a class="header-anchor" href="#基本选型" aria-label="Permalink to &quot;基本选型&quot;">​</a></h2><ol><li>pc用react,手机用vue,固定的管理系统会部分用ng</li><li>团队技术基础一般的vue(尤其传统前端过渡阶段的),技术基础好并且有react实践经验的react,技术非常好并且对ng有深度实践的可以用ng</li><li>能以数据模型、逻辑性的角度去思考前端页面的用react,以组件库、页面为维度思考的用vue</li><li>喜欢青睐组件单向数据流以及组件传递单向的用react，否则用vue</li></ol><h3 id="框架特征描述" tabindex="-1">框架特征描述 <a class="header-anchor" href="#框架特征描述" aria-label="Permalink to &quot;框架特征描述&quot;">​</a></h3><h4 id="ng" tabindex="-1">ng <a class="header-anchor" href="#ng" aria-label="Permalink to &quot;ng&quot;">​</a></h4><p>ng与另外两者相比更像一个框架，其包括控制层，服务，指令等完整的生态，文档比较完善，而且其后台为google，其学习使用成本较高，需要你掌握typescript.(其中ts是js强类型的体现)</p><h4 id="react" tabindex="-1">react <a class="header-anchor" href="#react" aria-label="Permalink to &quot;react&quot;">​</a></h4><p>react以任意单位的可重复组件为基本单位，它最大程度的打破了使用使用基本的h5标签为最小单位的常规思路，并创建了自己对组件的注入以及状态机概念，通过组件的相关特性来实现界面的更新以及数据的渲染使用 比较零散的一个前端的页面模板框架，需要搭配各种相关生态才可以完成完整的应用 属于逻辑性的技术框架，所以其样式、交互、模板等都尽可能的融入到了js当中，对js基础非常好的人是比较容易吸收的，但切实的用好是较难的，尤其在大型的管理系统、业务系统中，一般都是用react就是因为其对逻辑性的偏好</p><h4 id="vue" tabindex="-1">vue <a class="header-anchor" href="#vue" aria-label="Permalink to &quot;vue&quot;">​</a></h4><p>学习曲线最平缓的，对原常规前端开发人员是最友好的，基本是面向html&amp;&amp;css&amp;&amp;js实现的页面框架，而且提供了完整的一些列的语法文档以及语法糖，提供了丰富的api来完整基本功能开发需求 开发人员很少使用它的组件维度，也很少去设计和考虑公用组件的继承以及拓展。导致目前大部分vue的项目都是把页面组件当做vue的基本单位</p>',9),i=[c];function l(n,s,h,_,d,u){return t(),e("div",null,i)}const b=a(o,[["render",l]]);export{m as __pageData,b as default};
