import{_ as e,c as a,o as t,a2 as r}from"./chunks/framework.Bc4oNHcE.js";const o="/assets/758596f1-3c84-44dc-9309-4ace31608707.DXJrcz9G.png",c="/assets/f406b50d-ec78-40f1-a6a8-48d49fd21d63.CmdudBXe.png",F=JSON.parse('{"title":"01WPF体系结构","description":"","frontmatter":{"layout":"doc","title":"01WPF体系结构"},"headers":[],"relativePath":"csharp/WPF教程/01WPF体系结构.md","filePath":"csharp/WPF教程/01WPF体系结构.md"}'),s={name:"csharp/WPF教程/01WPF体系结构.md"},_=r('<h1 id="wpf体系结构" tabindex="-1">WPF体系结构 <a class="header-anchor" href="#wpf体系结构" aria-label="Permalink to &quot;WPF体系结构&quot;">​</a></h1><p><img src="'+o+'" alt="WPF体系结构"></p><p>图中PresentationFramework、PresentationCore和milcore是WPF的主要代码部分，在这些组件中，只有一个是非托管组件 – milcore。milcore 是以非托管代码编写的，目的是实现与 DirectX 的紧密集成。WPF 中的所有显示是通过 DirectX 引擎完成的，可实现高效的硬件和软件呈现。WPF 还要求对内存和执行进行精确控制。milcore 中的组合引擎受性能影响关系大，需要放弃 CLR 的许多优点来提高性能。</p><h2 id="常用控件类继承结构图" tabindex="-1">常用控件类继承结构图 <a class="header-anchor" href="#常用控件类继承结构图" aria-label="Permalink to &quot;常用控件类继承结构图&quot;">​</a></h2><p><img src="'+c+'" alt="控件类继承结构图"></p>',5),i=[_];function n(d,p,l,P,m,h){return t(),a("div",null,i)}const W=e(s,[["render",n]]);export{F as __pageData,W as default};
