import{_ as e,c as a,o,a2 as t}from"./chunks/framework.Bc4oNHcE.js";const p=JSON.parse('{"title":"07WPF键盘输入、鼠标输入、焦点处理","description":"","frontmatter":{"layout":"doc","title":"07WPF键盘输入、鼠标输入、焦点处理"},"headers":[],"relativePath":"csharp/WPF教程/07WPF键盘输入、鼠标输入、焦点处理.md","filePath":"csharp/WPF教程/07WPF键盘输入、鼠标输入、焦点处理.md"}'),l={name:"csharp/WPF教程/07WPF键盘输入、鼠标输入、焦点处理.md"},r=t('<h1 id="wpf键盘输入、鼠标输入、焦点处理" tabindex="-1">WPF键盘输入、鼠标输入、焦点处理 <a class="header-anchor" href="#wpf键盘输入、鼠标输入、焦点处理" aria-label="Permalink to &quot;WPF键盘输入、鼠标输入、焦点处理&quot;">​</a></h1><h2 id="键盘类和键盘事件" tabindex="-1">键盘类和键盘事件 <a class="header-anchor" href="#键盘类和键盘事件" aria-label="Permalink to &quot;键盘类和键盘事件&quot;">​</a></h2><blockquote><p>WPF提供了基础的键盘类（System.Input.Keyboard类），该类提供与键盘相关的事件、方法和属性，这些事件、方法和属性提供有关键盘状态的信息。Keyboard的事件也通过UIElement等XAML基元素类的事件向外提供</p></blockquote><h3 id="常用的事件" tabindex="-1">常用的事件 <a class="header-anchor" href="#常用的事件" aria-label="Permalink to &quot;常用的事件&quot;">​</a></h3><ul><li>KeyDown事件和PreviewKeyDown事件：处理键盘键按下 <strong>冒泡路由事件</strong></li><li>KeyUp事件和PreviewKeyUp事件：处理键盘键抬起 <strong>隧道路由事件</strong></li></ul><blockquote><p>为了使元素能够接收键盘输入，该元素必须可获得焦点。默认情况下，大多数 UIElement 派生对象都可获得焦点。如果不是这样，则要使元素可获得焦点，请将基元素上的 Focusable 属性设置为 true。像 StackPanel 和 Canvas 这样的 Panel 类将 Focusable 的默认值设置为 false。因此，对要获取键盘焦点的这些对象而言，必须将 Focusable 设置为 true</p></blockquote><h2 id="鼠标类和鼠标事件" tabindex="-1">鼠标类和鼠标事件 <a class="header-anchor" href="#鼠标类和鼠标事件" aria-label="Permalink to &quot;鼠标类和鼠标事件&quot;">​</a></h2><blockquote><p>WPF提供的System.Input.Mouse类提供与鼠标相关的事件、方法和属性，这些事件、方法和属性提供有关鼠标状态的信息。与Keyboard类类似，其事件也通过UIElement等基元素向外提供。</p></blockquote><h3 id="常用的事件-1" tabindex="-1">常用的事件 <a class="header-anchor" href="#常用的事件-1" aria-label="Permalink to &quot;常用的事件&quot;">​</a></h3><ul><li>MouseDown、MouseUp事件：处理鼠标键的按下与抬起</li><li>MouseEnter、MouseLeave、MouseMove：处理鼠标进入、离开控件及在控件上移动</li><li>MouseWheel：处理鼠标滚轮滚动</li></ul><blockquote><p>对于鼠标位置的捕获，使用Mouse类的GetPosition方法，其参数是一个UIElement，表示其鼠标位置基于哪一个控件的坐标系</p></blockquote><h2 id="焦点处理" tabindex="-1">焦点处理 <a class="header-anchor" href="#焦点处理" aria-label="Permalink to &quot;焦点处理&quot;">​</a></h2><blockquote><p>在 WPF 中，有两个与焦点有关的主要概念：键盘焦点和逻辑焦点。 键盘焦点指接收键盘输入的元素，而逻辑焦点指焦点范围中具有焦点的元素</p></blockquote><h3 id="键盘焦点" tabindex="-1">键盘焦点 <a class="header-anchor" href="#键盘焦点" aria-label="Permalink to &quot;键盘焦点&quot;">​</a></h3><blockquote><p>键盘焦点指当前正在接收键盘输入的元素。 在整个桌面上，只能有一个具有键盘焦点的元素。 在 WPF 中，具有键盘焦点的元素会将 IsKeyboardFocused 设置为 true。 Keyboard 类的静态属性 FocusedElement 获取当前具有键盘焦点的元素。 为了使元素能够获取键盘焦点，基元素的 Focusable 和 IsVisible 属性必须设置为 true。 有些类（如 Panel 基类）默认情况下将 Focusable 设置为 false；因此，如果您希望此类元素能够获取键盘焦点，必须将 Focusable 设置为 true。 可以通过用户与 UI 交互（例如，按 Tab 键定位到某个元素或者在某些元素上单击鼠标）来获取键盘焦点。 还可以通过使用 Keyboard 类的 Focus 方法，以编程方式获取键盘焦点。 Focus 方法尝试将键盘焦点给予指定的元素。 返回的元素是具有键盘焦点的元素，如果有旧的或新的焦点对象阻止请求，则具有键盘焦点的元素可能不是所请求的元素。</p></blockquote><h3 id="逻辑焦点" tabindex="-1">逻辑焦点 <a class="header-anchor" href="#逻辑焦点" aria-label="Permalink to &quot;逻辑焦点&quot;">​</a></h3><blockquote><p>逻辑焦点指焦点范围中的 FocusManager..::.FocusedElement。 焦点范围是一个跟踪其范围内的 FocusedElement 的元素。 当键盘焦点离开焦点范围时，焦点元素会失去键盘焦点，但保留逻辑焦点。 当键盘焦点返回到焦点范围时，焦点元素会再次获得键盘焦点。 这使得键盘焦点可以在多个焦点范围之间切换，但确保了在焦点返回到焦点范围时，焦点范围中的焦点元素再次获得键盘焦点。 一个应用程序中可以有多个具有逻辑焦点的元素，但在一个特定的焦点范围中只能有一个具有逻辑焦点的元素 GetFocusScope 返回指定元素的焦点范围</p></blockquote><h3 id="键盘导航" tabindex="-1">键盘导航 <a class="header-anchor" href="#键盘导航" aria-label="Permalink to &quot;键盘导航&quot;">​</a></h3><blockquote><p>当按下导航键之一时，KeyboardNavigation 类将负责实现默认键盘焦点导航。 导航键有：Tab、Shift+Tab、Ctrl+Tab、Ctrl+Shift+Tab、向上键、向下键、向左键和向右键。 可以通过设置附加的 KeyboardNavigation 属性 TabNavigation、ControlTabNavigation 和 DirectionalNavigation 来更改导航容器的导航行为。 这些属性是 KeyboardNavigationMode 类型，可能值有 Continue、Local、Contained、Cycle、Once 以及 None。 默认值是 Continue，这意味着元素不是导航容器。</p></blockquote>',19),i=[r];function n(c,s,u,b,h,d){return o(),a("div",null,i)}const q=e(l,[["render",n]]);export{p as __pageData,q as default};
