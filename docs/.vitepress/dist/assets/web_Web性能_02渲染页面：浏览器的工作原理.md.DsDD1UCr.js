import{_ as a,c as e,o as t,a2 as r}from"./chunks/framework.Bc4oNHcE.js";const C=JSON.parse('{"title":"02渲染页面：浏览器的工作原理","description":"","frontmatter":{"layout":"doc","title":"02渲染页面：浏览器的工作原理"},"headers":[],"relativePath":"web/Web性能/02渲染页面：浏览器的工作原理.md","filePath":"web/Web性能/02渲染页面：浏览器的工作原理.md"}'),o={name:"web/Web性能/02渲染页面：浏览器的工作原理.md"},p=r('<h1 id="渲染页面-浏览器的工作原理" tabindex="-1">渲染页面：浏览器的工作原理 <a class="header-anchor" href="#渲染页面-浏览器的工作原理" aria-label="Permalink to &quot;渲染页面：浏览器的工作原理&quot;">​</a></h1><p>大部分情况下，浏览器被认为是单线程的。也就是说，它们在执行一个任务之前会从头到尾完成一个任务，然后才会接受另一个任务。为了实现流畅的交互，开发者的目标是确保网站的交互性能良好，从流畅的滚动到对触摸的响应。渲染时间非常关键，我们需要确保主线程能够完成交给它的所有工作，并且始终能够处理用户交互。通过理解浏览器的单线程特性，并尽可能和适当地减少主线程的责任，可以提高网页性能，以确保渲染流畅，并且对交互的响应是即时的</p><h2 id="一-导航" tabindex="-1">一：导航 <a class="header-anchor" href="#一-导航" aria-label="Permalink to &quot;一：导航&quot;">​</a></h2><p>导航是加载 web 页面的第一步。它发生在以下情形：用户通过在地址栏输入一个 URL、点击一个链接、提交表单或者是其他的行为。</p><h2 id="二-dns-查询" tabindex="-1">二：DNS 查询 <a class="header-anchor" href="#二-dns-查询" aria-label="Permalink to &quot;二：DNS 查询&quot;">​</a></h2><p>对于一个 web 页面来说导航的第一步是要去寻找页面资源的位置。如果导航到 <a href="https://example.com" target="_blank" rel="noreferrer">https://example.com</a>，HTML 页面被定位到 IP 地址为 93.184.216.34 的服务器。如果以前没有访问过这个网站，就需要进行 DNS 查询 浏览器向域名服务器发起 DNS 查询请求，最终得到一个 IP 地址。第一次请求之后，这个 IP 地址可能会被缓存一段时间，这样可以通过从缓存里面检索 IP 地址而不是再通过域名服务器进行查询来加速后续的请求。 每个主机名 (hostname) 在页面加载时通常只需要进行一次 DNS 查询。但是，对于页面指向的不同的主机名，则需要多次 DNS 查询。如果字体（font）、图像（image）、脚本（script）、广告（ads）和网站统计（metric）都有不同的主机名，则需要对每一个主机名进行 DNS 查询 但是对于移动网络，DNS 查询可能存在性能问题。当一个用户使用移动网络时，所有 DNS 查询必须从手机发送到基站，然后到达一个权威 DNS 服务器。手机、信号塔、域名服务器之间的距离会显著增加延迟。</p><h2 id="三-tcp握手" tabindex="-1">三：TCP握手 <a class="header-anchor" href="#三-tcp握手" aria-label="Permalink to &quot;三：TCP握手&quot;">​</a></h2><p>一旦获取到服务器 IP 地址，浏览器就会通过TCP“三次握手”与服务器建立连接。这个机制的是用来让两端尝试进行通信——在浏览器和服务器通过上层协议 HTTPS 发送数据之前，可以协商网络 TCP 套接字连接的一些参数</p><p>TCP 的“三次握手”技术经常被称为“SYN-SYN-ACK”——更确切的说是 SYN、SYN-ACK、ACK——因为通过 TCP 首先发送了三个消息进行协商，然后在两台电脑之间开始一个 TCP 会话。是的，这意味着当请求尚未发出的时候，终端与每台服务器之间还要来回多发送三条消息。</p><h2 id="四-tls协商" tabindex="-1">四：TLS协商 <a class="header-anchor" href="#四-tls协商" aria-label="Permalink to &quot;四：TLS协商&quot;">​</a></h2><p>对于通过 HTTPS 建立的安全连接，还需要另一次 &quot;握手&quot;。这种握手，或者说 TLS 协商，决定使用哪种密码对通信进行加密，验证服务器，并在开始实际数据传输前建立安全连接。这就需要在实际发送内容请求之前，再往返服务器五次。</p><p>虽然建立安全连接的步骤增加了等待加载页面的时间，但是为了建立一个安全的连接而增加延迟是值得的，因为在浏览器和 web 服务器之间传输的数据不可以被第三方解密。</p><p>如此经过 8 次往返，浏览器终于可以发出请求。</p><h2 id="五-响应" tabindex="-1">五：响应 <a class="header-anchor" href="#五-响应" aria-label="Permalink to &quot;五：响应&quot;">​</a></h2><p>一旦我们建立了和 web 服务器的连接，浏览器就会代表用户发送一个初始的 HTTP GET 请求，对于网站来说，这个请求通常是一个 HTML 文件。一旦服务器收到请求，它将使用相关的响应头和 HTML 的内容进行回复</p><p>初始请求的响应包含所接收数据的第一个字节。首字节时间（TTFB）是用户通过点击链接进行请求与收到第一个 HTML 数据包之间的时间。第一个内容分块通常是 14KB 的数据。</p><h3 id="五-一-拥塞控制-tcp-慢启动" tabindex="-1">五（一）：拥塞控制 / TCP 慢启动 <a class="header-anchor" href="#五-一-拥塞控制-tcp-慢启动" aria-label="Permalink to &quot;五（一）：拥塞控制 / TCP 慢启动&quot;">​</a></h3><p>在传输过程中，TCP 包被分割成段。由于 TCP 保证了数据包的顺序，因此服务器在发送一定数量的分段后，必须从客户端接收一个 ACK 包的确认。</p><p>如果服务器在发送每个分段之后都等待 ACK，那么客户端将频繁地发送 ACK，并且可能会增加传输时间，即使在网络负载较低的情况下也是如此。</p><p>另一方面，一次发送过多的分段会导致在繁忙的网络中客户端无法接收分段并且长时间地只会持续发送 ACK，服务器必须不断重新发送分段的问题。</p><p>为了平衡传输分段的数量，TCP 慢启动算法用于逐渐增加传输数据量，直到确定最大网络带宽，并在网络负载较高时减少传输数据量。</p><p>传输段的数量由拥塞窗口（CWND）的值控制，该值可初始化为 1、2、4 或 10 MSS（以太网协议中的 MSS 为 1500 字节）。该值是发送的字节数，客户端收到后必须发送 ACK。</p><p>如果收到 ACK，那么 CWND 值将加倍，这样服务器下次就能发送更多的数据分段。相反，如果没有收到 ACK，那么 CWND 值将减半。因此，这种机制在发送过多分段和过少分段之间取得了平衡。</p><h3 id="五-二-解析" tabindex="-1">五（二）： 解析 <a class="header-anchor" href="#五-二-解析" aria-label="Permalink to &quot;五（二）： 解析&quot;">​</a></h3><p>一旦浏览器收到第一个数据分块，它就可以开始解析收到的信息。“解析”是浏览器将通过网络接收的数据转换为 DOM 和 CSSOM 的步骤，通过渲染器在屏幕上将它们绘制成页面。</p><p>虽然 DOM 是浏览器标记的内部表示，但是它也被暴露出来，可以通过 JavaScript 中的各种 API 进行操作。</p><p>即使请求页面的 HTML 大于初始的 14KB 数据包，浏览器也将根据其拥有的数据开始解析并尝试渲染。这就是为什么在前 14KB 中包含浏览器开始渲染页面所需的所有内容，或者至少包含页面模板（第一次渲染所需的 CSS 和 HTML）对于 web 性能优化来说是重要的。但是在渲染到屏幕上面之前，HTML、CSS、JavaScript 必须被解析完成。</p><h3 id="五-三-构建-dom-树" tabindex="-1">五（三）：构建 DOM 树 <a class="header-anchor" href="#五-三-构建-dom-树" aria-label="Permalink to &quot;五（三）：构建 DOM 树&quot;">​</a></h3><p>第一步是处理 HTML 标记并构造 DOM 树。HTML 解析涉及到符号化和树的构造。HTML 标记包括开始和结束标记，以及属性名和值。如果文档格式良好，则解析它会简单而快速。解析器将标记化的输入解析到文档中，构建文档树</p><p>当解析器发现非阻塞资源，例如一张图片，浏览器会请求这些资源并且继续解析。当遇到一个 CSS 文件时，解析也可以继续进行，但是对于script标签（特别是没有 async 或者 defer 属性的）会阻塞渲染并停止 HTML 的解析。尽管浏览器的预加载扫描器加速了这个过程，但过多的脚本仍然是一个重要的瓶颈</p><h3 id="五-四-预加载扫描器" tabindex="-1">五（四）：预加载扫描器 <a class="header-anchor" href="#五-四-预加载扫描器" aria-label="Permalink to &quot;五（四）：预加载扫描器&quot;">​</a></h3><p>浏览器构建 DOM 树时，这个过程占用了主线程。同时，预加载扫描器会解析可用的内容并请求高优先级的资源，如 CSS、JavaScript 和 web 字体。多亏了预加载扫描器，我们不必等到解析器找到对外部资源的引用时才去请求。它将在后台检索资源，而当主 HTML 解析器解析到要请求的资源时，它们可能已经下载中了，或者已经被下载。预加载扫描器提供的优化减少了阻塞。</p><h3 id="五-五-构建-cssom-树" tabindex="-1">五（五）：构建 CSSOM 树 <a class="header-anchor" href="#五-五-构建-cssom-树" aria-label="Permalink to &quot;五（五）：构建 CSSOM 树&quot;">​</a></h3><p>处理 CSS 并构建 CSSOM 树。CSS 对象模型和 DOM 是相似的。DOM 和 CSSOM 是两棵树。它们是独立的数据结构。浏览器将 CSS 规则转换为可以理解和使用的样式映射。浏览器遍历 CSS 中的每个规则集，根据 CSS 选择器创建具有父、子和兄弟关系的节点树。</p><h3 id="五-六-javascript-编译" tabindex="-1">五（六）： JavaScript 编译 <a class="header-anchor" href="#五-六-javascript-编译" aria-label="Permalink to &quot;五（六）： JavaScript 编译&quot;">​</a></h3><p>在解析 CSS 和创建 CSSOM 的同时，包括 JavaScript 文件在内的其他资源也在下载（这要归功于预加载扫描器）。JavaScript 会被解析、编译和解释。脚本被解析为抽象语法树。有些浏览器引擎会将抽象语法树输入编译器，输出字节码。这就是所谓的 JavaScript 编译。大部分代码都是在主线程上解释的，但也有例外，例如在 web worker 中运行的代码。</p><h3 id="五-七-构建无障碍树" tabindex="-1">五（七）： 构建无障碍树 <a class="header-anchor" href="#五-七-构建无障碍树" aria-label="Permalink to &quot;五（七）： 构建无障碍树&quot;">​</a></h3><p>浏览器还构建辅助设备用于分析和解释内容的无障碍树。无障碍对象模型（AOM）类似于 DOM 的语义版本。当 DOM 更新时，浏览器会更新辅助功能树。辅助技术本身无法修改无障碍树。</p><h2 id="六-渲染" tabindex="-1">六：渲染 <a class="header-anchor" href="#六-渲染" aria-label="Permalink to &quot;六：渲染&quot;">​</a></h2><p>渲染步骤包括样式、布局、绘制，在某些情况下还包括合成。在解析步骤中创建的 CSSOM 树和 DOM 树组合成一个渲染树，然后用于计算每个可见元素的布局，然后将其绘制到屏幕上。在某些情况下，可以将内容提升到它们自己的层并进行合成，通过在 GPU 而不是 CPU 上绘制屏幕的一部分来提高性能，从而释放主线程。</p><h3 id="六-一-样式" tabindex="-1">六（一）：样式 <a class="header-anchor" href="#六-一-样式" aria-label="Permalink to &quot;六（一）：样式&quot;">​</a></h3><p>关键呈现路径的第三步是将 DOM 和 CSSOM 组合成渲染树。计算样式树或渲染树的构建从 DOM 树的根开始，遍历每个可见节点。</p><p>不会被显示的元素，如 <strong>head</strong> 元素及其子元素，以及任何带有 display: none 的节点，如用户代理样式表中的 script { display: none; }，都不会包含在渲染树中，因为它们不会出现在渲染输出中。应用了 visibility: hidden 的节点会包含在渲染树中，因为它们会占用空间。由于我们没有给出任何指令来覆盖用户代理默认值，因此上述代码示例中的 script 节点不会包含在渲染树中。</p><p>每个可见节点都应用了 CSSOM 规则。渲染树包含所有可见节点的内容和计算样式，将所有相关样式与 DOM 树中的每个可见节点匹配起来，并根据 CSS 级联，确定每个节点的计算样式。</p><h3 id="六-二-布局" tabindex="-1">六（二）：布局 <a class="header-anchor" href="#六-二-布局" aria-label="Permalink to &quot;六（二）：布局&quot;">​</a></h3><p>在渲染树上运行布局以计算每个节点的几何体。布局是确定呈现树中所有节点的尺寸和位置，以及确定页面上每个对象的大小和位置的过程。重排是后续过程中对页面的任意部分或整个文档的大小和位置的重新计算</p><p>渲染树构建完毕后，浏览器就开始布局。渲染树标识了哪些节点会显示（即使不可见）及其计算样式，但不标识每个节点的尺寸或位置。为了确定每个对象的确切大小和位置，浏览器会从渲染树的根开始遍历。</p><p>在网页上，大多数东西都是一个盒子。不同的设备和不同的桌面设置意味着无限数量的不同视区大小。在此阶段，根据视口大小，浏览器将确定屏幕上所有盒子的大小。以视口大小为基础，布局通常从 body 开始，设置所有 body 后代的大小，同时给不知道其尺寸的替换元素（例如图像）提供占位符空间，空间大小以相应元素盒模型的属性为准。</p><p>第一次确定每个节点的大小和位置称为布局。随后对节点大小和位置的重新计算称为重排。在我们的示例中，假设初始布局发生在返回图像之前。由于我们没有声明图像的尺寸，因此一旦知道图像的尺寸，就会出现重排。</p><h2 id="七-绘制" tabindex="-1">七： 绘制 <a class="header-anchor" href="#七-绘制" aria-label="Permalink to &quot;七： 绘制&quot;">​</a></h2><p>将各个节点绘制到屏幕上，其中第一次的绘制被称为首次有意义的绘制。在绘制或光栅化阶段，浏览器将在布局阶段计算的每个盒子转换为屏幕上的实际像素。绘制涉及将元素的每个可见部分绘制到屏幕上，包括文本、颜色、边框、阴影以及按钮和图像等替换元素。浏览器需要以超快的速度执行这个过程。</p><p>为了确保平滑滚动和动画效果，包括计算样式、回流和绘制等占用主线程的所有操作，必须在不超过 16.67 毫秒的时间内完成。在 2048 x 1536 分辨率下，iPad 需要将超过 314.5 万个像素绘制到屏幕上。这是非常多的像素，必须要非常快速地绘制出来。为了确保重绘能够比初始绘制更快地完成，绘制到屏幕的操作通常被分解成几个图层。如果发生这种情况，浏览器则需要进行合成。</p><p>绘制可以将布局树中的元素分解为多个层。将内容提升到 GPU 上的层（而不是 CPU 上的主线程）可以提高绘制和重新绘制性能。有一些特定的属性和元素可以实例化一个层，包括 <strong>video</strong> 和 <strong>canvas</strong>，任何 CSS 属性为 opacity 、3D transform、will-change 的元素，还有一些其他元素。这些节点将与子节点一起绘制到它们自己的层上，除非子节点由于上述一个（或多个）原因需要自己的层。</p><p>分层确实可以提高性能，但在内存管理方面成本较高，因此不应作为 Web 性能优化策略的过度使用。</p><h3 id="七-一-合成" tabindex="-1">七（一）: 合成 <a class="header-anchor" href="#七-一-合成" aria-label="Permalink to &quot;七（一）: 合成&quot;">​</a></h3><p>当文档的各个部分以不同的层绘制，相互重叠时，必须进行合成，以确保它们以正确的顺序绘制到屏幕上，并正确显示内容</p><p>当页面继续加载资源时，可能会发生回流（回想一下我们迟到的示例图像），回流会触发重新绘制和重新合成。如果我们定义了图像的大小，就不需要重新绘制，只需要绘制需要重新绘制的层，并在必要时进行合成。但我们并没有定义图像大小！所以从服务器获取图像后，渲染过程将返回到布局步骤并从那里重新开始</p><h2 id="八-交互" tabindex="-1">八： 交互 <a class="header-anchor" href="#八-交互" aria-label="Permalink to &quot;八： 交互&quot;">​</a></h2><p>一旦主线程绘制页面完成，你会认为我们已经“准备好了”，但事实并非如此。如果加载包括正确延迟加载的 JavaScript，并且仅在 onload 事件触发后执行，那么主线程可能会忙于执行脚本，无法用于滚动、触摸和其他交互操作。</p><p>可交互时间（TTI）是测量从第一个请求导致 DNS 查询和 SSL 连接到页面可交互时所用的时间——可交互是在首次内容绘制之后页面在 50ms 内响应用户的交互。如果主线程正在解析、编译和执行 JavaScript，则无法及时（小于 50ms）响应用户交互。</p>',60),i=[p];function h(l,n,s,c,d,S){return t(),e("div",null,i)}const P=a(o,[["render",h]]);export{C as __pageData,P as default};
