import{_ as a,c as e,o as t,a2 as o}from"./chunks/framework.Bc4oNHcE.js";const r="/assets/842f3a71-e1e3-4952-9878-e9fdfdbdd379.BbBWNIqt.png",c="/assets/27e834dc-a4d3-4805-afa8-298b6a319baf.D0zebVW-.png",s="/assets/5d4f6ad2-ee6c-45fe-843f-5999ac7a0545.D1wMzNql.png",k=JSON.parse('{"title":"13WPF基本图形","description":"","frontmatter":{"layout":"doc","title":"13WPF基本图形"},"headers":[],"relativePath":"csharp/WPF教程/13WPF基本图形.md","filePath":"csharp/WPF教程/13WPF基本图形.md"}'),l={name:"csharp/WPF教程/13WPF基本图形.md"},i=o('<h1 id="wpf基本图形" tabindex="-1">WPF基本图形 <a class="header-anchor" href="#wpf基本图形" aria-label="Permalink to &quot;WPF基本图形&quot;">​</a></h1><h2 id="基本的图形类型" tabindex="-1">基本的图形类型 <a class="header-anchor" href="#基本的图形类型" aria-label="Permalink to &quot;基本的图形类型&quot;">​</a></h2><blockquote><p>对于WPF中的基本图形类主要位于System.Windows.Shapes命名空间，其类包括：</p></blockquote><p><img src="'+r+'" alt="WPF基本图形"></p><h2 id="shape中的fill、stroke及stretch" tabindex="-1">Shape中的Fill、Stroke及Stretch <a class="header-anchor" href="#shape中的fill、stroke及stretch" aria-label="Permalink to &quot;Shape中的Fill、Stroke及Stretch&quot;">​</a></h2><blockquote><p>Shape类是所有图形类的基类，其中包含Fill属性（Brush类型）和Strock属性（Brush类型），分别表示图形的填充及边框；此外还包含一系列的StrockXXX属性，表示边框的各种样式。（对于Line来说只有Stock没有Fill）,Stretch属性，表示如果可用的空间与图形的大小不匹配，则如何调整图形</p></blockquote><h2 id="直线、矩形、椭圆" tabindex="-1">直线、矩形、椭圆 <a class="header-anchor" href="#直线、矩形、椭圆" aria-label="Permalink to &quot;直线、矩形、椭圆&quot;">​</a></h2><blockquote><p>Line、Rectangle、Ellipse在图形中相对简单，直线主要设置其起点和终点的坐标、矩形和椭圆主要设置其左上角的坐标（视其所在的容器可能有所不同，例如Canvas是设置Canvas.Left和Canvas.Top，而如Grid取决于对齐方式其Stretch等）及宽度和高度。通过矩形的RadiusX和RadiusY可以设置圆角矩形。</p></blockquote><h2 id="多线段及多边形" tabindex="-1">多线段及多边形 <a class="header-anchor" href="#多线段及多边形" aria-label="Permalink to &quot;多线段及多边形&quot;">​</a></h2><blockquote><p>Polyline用来绘制多线段组成的不封闭的图形而Polygon用来绘制由多线段组成的封闭图形</p></blockquote><h2 id="使用path构建复杂图形" tabindex="-1">使用Path构建复杂图形 <a class="header-anchor" href="#使用path构建复杂图形" aria-label="Permalink to &quot;使用Path构建复杂图形&quot;">​</a></h2><blockquote><p>Path所构建的图形由Data属性来定义，其属性的类型为Geometry(几何类)，几何类类型的继承关系参考上图</p></blockquote><h2 id="位图操作" tabindex="-1">位图操作 <a class="header-anchor" href="#位图操作" aria-label="Permalink to &quot;位图操作&quot;">​</a></h2><blockquote><p>WPF支持以下格式的位图：BMP、JPEG、PNG、TIFF、Windows Media Photo、GIF和ICO。在System.Windows.Media.Imaging命名空间定义了一系列处理图像文件的类型，其中最常使用的是Image类处理位图。</p></blockquote><p><img src="'+c+'" alt="WPF位图操作"></p><blockquote><p>使用Image类型的Source属性加载图片，Source属性的类型是ImageSource类型。ImageSource有两个子类DrawingImage和BitmapSource，分别用来处理不依赖分辨率的图画对象和依赖分辨率的图画对象（位图）</p></blockquote><p><img src="'+s+'" alt="ImageSource继承关系"></p>',17),h=[i];function n(p,d,u,_,P,b){return t(),e("div",null,h)}const q=a(l,[["render",n]]);export{k as __pageData,q as default};
