import{_ as t,c as a,o,l as e,a as _}from"./chunks/framework.Bc4oNHcE.js";const $=JSON.parse('{"title":"04_表示和绘制","description":"","frontmatter":{"layout":"doc","title":"04_表示和绘制"},"headers":[],"relativePath":"graph/3D计算机图形学/04_表示和绘制.md","filePath":"graph/3D计算机图形学/04_表示和绘制.md"}'),s={name:"graph/3D计算机图形学/04_表示和绘制.md"},n=e("h1",{id:"绘制多边形网格",tabindex:"-1"},[_("绘制多边形网格 "),e("a",{class:"header-anchor",href:"#绘制多边形网格","aria-label":'Permalink to "绘制多边形网格"'},"​")],-1),r=e("p",null,"在计算机图形中，多边形物体显然是最常见的表示形式",-1),c=e("p",null,"多边形绘制程序的输入是一个多边形的列表。而其输出是每一个像素的颜色，每个对边形会投影到屏幕上的像素。多边形绘制程序的主要优点是已经有了吧多边形作为一个实体或者单元进行的算法。多边形成为图形程序设计人员所必须考虑的最底层的元素。这有助于非常快速和简单的处理，然而，我们必须注意到。这些优点随着物体越来越复杂而逐渐被削弱了。随着多边形的投影区域趋向于单个像素点，插值算法的优点快速下降",-1),l=e("p",null,"绘制引擎对于多边形网格主要执行2个任务。第一个任务是将物体的几何学作为各种变换来处理。第二是执行估算光线和物体相交的过程，也就是明暗处理",-1),d=e("p",null,"146",-1),i=[n,r,c,l,d];function p(h,m,u,f,x,g){return o(),a("div",null,i)}const k=t(s,[["render",p]]);export{$ as __pageData,k as default};
