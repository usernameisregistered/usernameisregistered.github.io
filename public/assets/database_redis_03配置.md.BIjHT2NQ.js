import{_ as t,c as d,o as e,a2 as a}from"./chunks/framework.Bc4oNHcE.js";const _=JSON.parse('{"title":"03配置","description":"","frontmatter":{"layout":"doc","title":"03配置"},"headers":[],"relativePath":"database/redis/03配置.md","filePath":"database/redis/03配置.md"}'),r={name:"database/redis/03配置.md"},s=a('<h1 id="redis-配置" tabindex="-1">Redis 配置 <a class="header-anchor" href="#redis-配置" aria-label="Permalink to &quot;Redis 配置&quot;">​</a></h1><h2 id="配置获取" tabindex="-1">配置获取 <a class="header-anchor" href="#配置获取" aria-label="Permalink to &quot;配置获取&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>config get config_name</span></span></code></pre></div><h2 id="配置设置和修改" tabindex="-1">配置设置和修改 <a class="header-anchor" href="#配置设置和修改" aria-label="Permalink to &quot;配置设置和修改&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>config set config_name config_value</span></span></code></pre></div><h2 id="配置说明" tabindex="-1">配置说明 <a class="header-anchor" href="#配置说明" aria-label="Permalink to &quot;配置说明&quot;">​</a></h2><table><thead><tr><th>配置项</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>daemonize</td><td>no</td><td>redis默认不以守护进程的方式运行可以修改配置项</td></tr><tr><td>pidfile</td><td>/var/run/redis.pid</td><td>当redis以守护进程运行时的oid</td></tr><tr><td>port</td><td>6379</td><td>指定的redis监听端口</td></tr><tr><td>bind</td><td>127.0.0.1</td><td>绑定的主机地址</td></tr><tr><td>timeout</td><td>360</td><td>当客户端多长时间不连接时关闭连接 为0时永不关闭</td></tr><tr><td>loglevel</td><td>notice</td><td>指定日志的记录级别 debug , verbose , notice ，warning</td></tr><tr><td>logfile</td><td>stdout</td><td>日志的记录方式 默认是标准输出</td></tr><tr><td>databases</td><td>16</td><td>设置数据库的个数</td></tr><tr><td>save &lt;seconds&gt; &lt;changes&gt;</td><td>save 900 1</td><td>900 秒（15 分钟）内有 1 个更改 指定在多长时间内，有多少次更新操作，就将数据同步到数据文件</td></tr><tr><td>rdbcompression</td><td>yes</td><td>指定存储至本地数据库时是否压缩数据，默认为 yes</td></tr><tr><td>dbfilename</td><td>dump.rdb</td><td>指定本地数据库文件名</td></tr><tr><td>dir</td><td>./</td><td>指定本地数据库存放目录</td></tr><tr><td>slaveof &lt;masterip&gt; &lt;masterport&gt;</td><td></td><td>设置当本机为 slav 服务时，设置 master 服务的 IP 地址及端口，在 Redis 启动时，它会自动从 master</td></tr><tr><td>masterauth &lt;master-password&gt;</td><td></td><td>当 master 服务设置了密码保护时，slav 服务连接 master 的密码</td></tr><tr><td>requirepass</td><td></td><td>设置 Redis 连接密码，如果配置了连接密码，客户端在连接 Redis 时需要通过 AUTH &lt;password&gt; 命令提供密码，默认关闭</td></tr><tr><td>maxclients</td><td>128</td><td>设置同一时间最大客户端连接数，默认无限制</td></tr><tr><td>maxmemory</td><td></td><td>指定 Redis 最大内存限制，Redis 在启动时会把数据加载到内存中，达到最大内存后，Redis 会先尝试清除已到期或即将到期的 Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis 新的 vm 机制，会把 Key 存放内存，Value 会存放在 swap 区</td></tr><tr><td>appendonly</td><td>on</td><td>指定是否在每次更新操作后进行日志记录</td></tr><tr><td>appendfilename</td><td>appendonly.aof</td><td>指定更新日志文件名</td></tr><tr><td>inclue</td><td>/path/to/local.conf</td><td>指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件</td></tr><tr><td>activerehashing</td><td>yes</td><td>指定是否激活重置哈希，默认为开启</td></tr><tr><td>vm-enabled</td><td>no</td><td>指定是否启用虚拟内存机制，默认值为 no</td></tr></tbody></table>',7),i=[s];function o(n,l,c,p,h,m){return e(),d("div",null,i)}const b=t(r,[["render",o]]);export{_ as __pageData,b as default};
