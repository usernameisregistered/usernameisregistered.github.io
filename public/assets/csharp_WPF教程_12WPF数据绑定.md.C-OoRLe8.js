import{_ as s,c as i,o as a,a2 as n}from"./chunks/framework.Bc4oNHcE.js";const l="/assets/53296b66-1af1-4290-bd2a-02346442d569.BkDsA38l.png",t="/assets/58bb08c2-ef7a-46e2-a8cf-8a1532579dfd.L_NX_y8z.png",h="/assets/9798343c-c47e-47eb-aa1d-e0b22b86bac0.C8g0IVMm.png",u=JSON.parse('{"title":"12WPF数据绑定","description":"","frontmatter":{"layout":"doc","title":"12WPF数据绑定"},"headers":[],"relativePath":"csharp/WPF教程/12WPF数据绑定.md","filePath":"csharp/WPF教程/12WPF数据绑定.md"}'),e={name:"csharp/WPF教程/12WPF数据绑定.md"},p=n('<h1 id="wpf数据绑定" tabindex="-1">WPF数据绑定 <a class="header-anchor" href="#wpf数据绑定" aria-label="Permalink to &quot;WPF数据绑定&quot;">​</a></h1><blockquote><p>WPF数据绑定为应用程序提供了一种表示数据和与数据交互的简单而又一致的方法。元素能够以公共语言运行库 (CLR) 对象和XML的形式绑定到各种数据源中的数据。</p></blockquote><h2 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-label="Permalink to &quot;基本概念&quot;">​</a></h2><ul><li>绑定源即控件绑定所使用的源数据</li><li>绑定目标即数据显示的控件</li></ul><h3 id="绑定源" tabindex="-1">绑定源 <a class="header-anchor" href="#绑定源" aria-label="Permalink to &quot;绑定源&quot;">​</a></h3><ul><li>CLR对象：可以绑定到CLR类的公开的属性、子属性、索引器上</li><li>ADO.Net对象：例如DataTable、DataView等</li><li>XML文件：使用XPath进行解析</li><li>DependencyObject：绑定到其依赖项属性上，即控件绑定控件</li></ul><h3 id="绑定目标" tabindex="-1">绑定目标 <a class="header-anchor" href="#绑定目标" aria-label="Permalink to &quot;绑定目标&quot;">​</a></h3><blockquote><p>必须是WPF中的DependencyObject，将数据绑定到其依赖项属性上</p></blockquote><p><img src="'+l+'" alt="数据绑定示例图"></p><h2 id="绑定的基本方式" tabindex="-1">绑定的基本方式 <a class="header-anchor" href="#绑定的基本方式" aria-label="Permalink to &quot;绑定的基本方式&quot;">​</a></h2><ol><li>OneWay绑定导致对源属性的更改会自动更新目标属性，但是对目标属性的更改不会传播回源属性。此绑定类型适用于绑定的控件为隐式只读控件的情况。例如，您可能绑定到如股票行情自动收录器这样的源，或许目标属性没有用于进行更改的控件接口（如表的数据绑定背景色）。如果无需监视目标属性的更改，则使用 OneWay 绑定模式可避免 TwoWay 绑定模式的系统开销</li><li>TwoWay 绑定导致对源属性的更改会自动更新目标属性，而对目标属性的更改也会自动更新源属性。此绑定类型适用于可编辑窗体或其他完全交互式 UI 方案。大多数属性都默认为 OneWay 绑定，但是一些依赖项属性（通常为用户可编辑的控件的属性，如 TextBox 的 Text 属性和 CheckBox 的 IsChecked 属性）默认为 TwoWay 绑定。确定依赖项属性绑定在默认情况下是单向还是双向的编程方法是：使用 GetMetadata 获取属性的属性元数据，然后检查 BindsTwoWayByDefault 属性的布尔值</li><li>OneWayToSource 与 OneWay 绑定相反；它在目标属性更改时更新源属性。一个示例方案是您只需要从 UI 重新计算源值的情况</li><li>OneTime绑定 ，该绑定会导致源属性初始化目标属性，但不传播后续更改</li></ol><p><img src="'+t+`" alt="数据绑定方式示例图"></p><h2 id="实现数据源更改影响目标更改" tabindex="-1">实现数据源更改影响目标更改 <a class="header-anchor" href="#实现数据源更改影响目标更改" aria-label="Permalink to &quot;实现数据源更改影响目标更改&quot;">​</a></h2><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> System</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ComponentModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BasicWPFDataBinding</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">INotifyPropertyChanged</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        #</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">region</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> INotifyPropertyChanged Members</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> event</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PropertyChangedEventHandler</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PropertyChanged</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        #</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">endregion</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Tom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            set</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            _Name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value; </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (PropertyChanged </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    PropertyChanged</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PropertyChangedEventArgs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            get</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _Name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="实现绑定目标的值更改影响绑定源的值" tabindex="-1">实现绑定目标的值更改影响绑定源的值 <a class="header-anchor" href="#实现绑定目标的值更改影响绑定源的值" aria-label="Permalink to &quot;实现绑定目标的值更改影响绑定源的值&quot;">​</a></h2><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">TextBox</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{Binding Path=Name, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div><h2 id="自定义这种绑定转换" tabindex="-1">自定义这种绑定转换 <a class="header-anchor" href="#自定义这种绑定转换" aria-label="Permalink to &quot;自定义这种绑定转换&quot;">​</a></h2><p><img src="`+h+'" alt="自定义数据绑定示例图"></p>',18),k=[p];function r(d,E,o,c,g,y){return a(),i("div",null,k)}const b=s(e,[["render",r]]);export{u as __pageData,b as default};
