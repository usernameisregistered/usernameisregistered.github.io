import{_ as t,c as a,o as e,a2 as l}from"./chunks/framework.Bc4oNHcE.js";const q=JSON.parse('{"title":"前端工程化说明","description":"","frontmatter":{"layout":"doc","title":"前端工程化说明"},"headers":[],"relativePath":"web/前端工程化/前端工程化说明.md","filePath":"web/前端工程化/前端工程化说明.md"}'),o={name:"web/前端工程化/前端工程化说明.md"},r=l('<h2 id="前端从无到有-从简单到复杂-从手动到配置-从融合到后端到主导用户应用-不断的对前端的工程化提出了新的概念和挑战-而在这一系列的工具或者方法中-简单分出以下几个阶段" tabindex="-1">前端从无到有，从简单到复杂，从手动到配置，从融合到后端到主导用户应用，不断的对前端的工程化提出了新的概念和挑战，而在这一系列的工具或者方法中，简单分出以下几个阶段 <a class="header-anchor" href="#前端从无到有-从简单到复杂-从手动到配置-从融合到后端到主导用户应用-不断的对前端的工程化提出了新的概念和挑战-而在这一系列的工具或者方法中-简单分出以下几个阶段" aria-label="Permalink to &quot;前端从无到有，从简单到复杂，从手动到配置，从融合到后端到主导用户应用，不断的对前端的工程化提出了新的概念和挑战，而在这一系列的工具或者方法中，简单分出以下几个阶段&quot;">​</a></h2><h3 id="库、框架的选型" tabindex="-1">库、框架的选型 <a class="header-anchor" href="#库、框架的选型" aria-label="Permalink to &quot;库、框架的选型&quot;">​</a></h3><blockquote><p>前端工程建设的第一项任务就是根据项目特征进行技术选型</p></blockquote><h3 id="简单构建" tabindex="-1">简单构建 <a class="header-anchor" href="#简单构建" aria-label="Permalink to &quot;简单构建&quot;">​</a></h3><blockquote><p>完成项目之后，一般我们都需要对项目中引用的文件进行简单的优化，包括校验、压缩、合并等 而目前市场上提供的构建工具有grunt,gulp,fis以及webpack等</p></blockquote><h3 id="js-css模块化开发" tabindex="-1">JS/CSS模块化开发 <a class="header-anchor" href="#js-css模块化开发" aria-label="Permalink to &quot;JS/CSS模块化开发&quot;">​</a></h3><blockquote><p>模块化开发的最大价值应该是分治,只有根据自己的业务需要不断的整合并且开出新的分之，并且分别维护才可以让业务或者技术更加纯熟</p></blockquote><h3 id="工程化问题的爆发" tabindex="-1">工程化问题的爆发 <a class="header-anchor" href="#工程化问题的爆发" aria-label="Permalink to &quot;工程化问题的爆发&quot;">​</a></h3><ol><li>大体量：多功能、多页面、多状态、多系统</li><li>大规模：多人甚至多团队合作开发</li><li>高性能：CDN部署、缓存控制、文件指纹、缓存复用、请求合并、按需加载、同步/异步加载、移动端首屏CSS内嵌、HTTP 2.0服务端资源推送</li></ol><h2 id="解决方案" tabindex="-1">解决方案 <a class="header-anchor" href="#解决方案" aria-label="Permalink to &quot;解决方案&quot;">​</a></h2><h3 id="整体规范" tabindex="-1">整体规范 <a class="header-anchor" href="#整体规范" aria-label="Permalink to &quot;整体规范&quot;">​</a></h3><ol><li>设计规范 一个前端工程界面部分规范不可或缺的部分</li><li>前端代码规范 从源头开始制定代码规范，所有的代码符合这一规范，目前制定了包括html\\css\\js\\less在内的代码规范。针对前端项目中遇到的问题，也将统一制定解决方案。比如web视频解决方案，时间控件解决方案，二维码解决方案等</li><li>构建规范</li></ol><h3 id="组件化开发" tabindex="-1">组件化开发 <a class="header-anchor" href="#组件化开发" aria-label="Permalink to &quot;组件化开发&quot;">​</a></h3><h3 id="不同维度" tabindex="-1">不同维度 <a class="header-anchor" href="#不同维度" aria-label="Permalink to &quot;不同维度&quot;">​</a></h3><table><thead><tr><th>名称</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>js模块</td><td>独立的算法和数据单元</td><td>浏览器环境监测 网络请求 应用配置 DOM操作 工具函数 组件中的js单元</td></tr><tr><td>css模块</td><td>独立的功能性样式单元</td><td>栅格系统 字体图表 动画样式 组件中的css单元</td></tr><tr><td>UI组件</td><td>独立的可视/ 可交互式功能单元</td><td>页头 页尾 导航栏 搜索栏</td></tr><tr><td>页面</td><td>ui组件的容器</td><td>首页 列表页 用户管理</td></tr><tr><td>应用</td><td>整个项目 整个站点</td><td></td></tr></tbody></table><h3 id="静态资源管理" tabindex="-1">静态资源管理 <a class="header-anchor" href="#静态资源管理" aria-label="Permalink to &quot;静态资源管理&quot;">​</a></h3><ol><li>有加载相关的按需加载、延迟加载、预加载、请求合并等策略；</li><li>有缓存相关的浏览器缓存利用，缓存更新、缓存共享、非覆盖式发布等方案；</li></ol>',17),d=[r];function i(h,s,c,n,b,u){return e(),a("div",null,d)}const m=t(o,[["render",i]]);export{q as __pageData,m as default};
