import{_ as s,c as i,o as a,a2 as n}from"./chunks/framework.Bc4oNHcE.js";const c=JSON.parse('{"title":"06WPF依赖项属性和路由事件","description":"","frontmatter":{"layout":"doc","title":"06WPF依赖项属性和路由事件"},"headers":[],"relativePath":"csharp/WPF教程/06WPF依赖项属性和路由事件.md","filePath":"csharp/WPF教程/06WPF依赖项属性和路由事件.md"}'),l={name:"csharp/WPF教程/06WPF依赖项属性和路由事件.md"},t=n(`<h1 id="wpf依赖项属性和路由事件" tabindex="-1">WPF依赖项属性和路由事件 <a class="header-anchor" href="#wpf依赖项属性和路由事件" aria-label="Permalink to &quot;WPF依赖项属性和路由事件&quot;">​</a></h1><h2 id="依赖项属性-dependency-property" tabindex="-1">依赖项属性（Dependency Property） <a class="header-anchor" href="#依赖项属性-dependency-property" aria-label="Permalink to &quot;依赖项属性（Dependency Property）&quot;">​</a></h2><blockquote><p>Windows Presentation Foundation (WPF) 提供了一组服务，这些服务可用于扩展公共语言运行时 (CLR) 属性的功能。这些服务通常统称为 WPF 属性系统。由 WPF 属性系统支持的属性称为依赖项属性。本概述介绍 WPF 属性系统以及依赖项属性的功能，这包括如何在可扩展应用程序标记语言 (XAML) 中和代码中使用现有的依赖项属性。 依赖项属性的用途在于提供一种方法来基于其他输入的值计算属性值。这些其他输入可以包括系统属性（如主题和用户首选项）、实时属性确定机制（如数据绑定和动画/演示图板）、重用模板（如资源和样式）或者通过与元素树中其他元素的父子关系来公开的值。另外，可以通过实现依赖项属性来提供独立验证、默认值、监视其他属性的更改的回调以及可以基于可能的运行时信息来强制指定属性值的系统。派生类还可以通过重写依赖项属性元数据（而不是重写现有属性的实际实现或者创建新属性）来更改现有属性的某些具体特征。</p></blockquote><ul><li>依赖项属性与CLR 包装属性</li></ul><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 通过包装的属性设置按钮的背景颜色</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">btn_ButtonC.Background </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SolidColorBrush</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Colors.Red);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 通过依赖性属性的SetValue设置按钮的背景颜色</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SolidColorBrush</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> brush</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SolidColorBrush</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Colors.Blue);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">btn_ButtonD.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SetValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Button.BackgroundProperty, brush);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 通过包装的属性获取ButtonB的背景颜色</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SolidColorBrush</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> b_Brush1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SolidColorBrush</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) (btn_ButtonB.Background);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">txt_Value1.Text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b_Brush1.Color.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 通过依赖性属性的GetValue获取ButtonB的背景颜色</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SolidColorBrush</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> b_Brush2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SolidColorBrush</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) (btn_ButtonB.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Button.BackgroundProperty));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">txt_Value2.Text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b_Brush2.Color.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><ul><li>使用由依赖项属性提供的属性功能</li></ul><blockquote><p>依赖项属性提供用来扩展属性功能的功能，这与字段支持的属性相反。每个这样的功能通常都表示或支持整套WPF功能中的特定功能：资源数据绑定样式动画元数据重写属性值继承WPF设计器集成</p></blockquote><ul><li>自定义依赖项属性及重写依赖项属性</li></ul><blockquote><p>对于自定义依赖项属性，其所在的类型必须直接或间接继承System.Windows.DependencyObject类，依赖项属性是通过调用 Register 方法（或 RegisterReadOnly，自定义的只读的依赖项属性）在 WPF 属性系统中注册，并通过 DependencyProperty 标识符字段备份的属性。依赖项属性只能由 DependencyObject 类型使用，但 DependencyObject 在 WPF 类层次结构中的级别很高，因此，WPF 中的大多数可用类都支持依赖项属性。在对依赖项属性及CLR包装属性命名时必须满足：CLR包装属性名+Property＝依赖项属性名。</p></blockquote><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> readonly</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DependencyProperty</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AquariumGraphicProperty</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DependencyProperty.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;AquariumGraphic&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,              </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 要注册的依赖项对象的名称</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Uri</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),                    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 属性的类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AquariumObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 正注册依赖项对象的所有者类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FrameworkPropertyMetadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 依赖项对象的属性元数据</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    FrameworkPropertyMetadataOptions.AffectsRender,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PropertyChangedCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(OnUriChanged)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">public Uri AquariumGraphic</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    get { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Uri)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AquariumGraphicProperty); }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    set { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SetValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AquariumGraphicProperty, value); }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="路由事件-routedevent" tabindex="-1">路由事件（RoutedEvent） <a class="header-anchor" href="#路由事件-routedevent" aria-label="Permalink to &quot;路由事件（RoutedEvent）&quot;">​</a></h2><h3 id="路由事件的处理模型常用的有三种" tabindex="-1">路由事件的处理模型常用的有三种 <a class="header-anchor" href="#路由事件的处理模型常用的有三种" aria-label="Permalink to &quot;路由事件的处理模型常用的有三种&quot;">​</a></h3><ul><li>冒泡事件：由子控件位次向父容器传递，大部分的路由事件都是冒泡事件</li><li>隧道事件：由父容器位次向其子容器、控件传递，一般PreXXX事件属性隧道事件</li><li>直接</li></ul>`,13),h=[t];function e(p,k,r,d,E,o){return a(),i("div",null,h)}const g=s(l,[["render",e]]);export{c as __pageData,g as default};
