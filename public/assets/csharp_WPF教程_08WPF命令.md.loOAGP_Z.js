import{_ as s,c as i,o as a,a2 as t}from"./chunks/framework.Bc4oNHcE.js";const n="/assets/783e6662-23b2-4fef-84cf-3f0f4ef0a869.TxbyF2eP.png",u=JSON.parse('{"title":"08WPF命令","description":"","frontmatter":{"layout":"doc","title":"08WPF命令"},"headers":[],"relativePath":"csharp/WPF教程/08WPF命令.md","filePath":"csharp/WPF教程/08WPF命令.md"}'),e={name:"csharp/WPF教程/08WPF命令.md"},l=t(`<h1 id="wpf命令" tabindex="-1">WPF命令 <a class="header-anchor" href="#wpf命令" aria-label="Permalink to &quot;WPF命令&quot;">​</a></h1><blockquote><p>WPF中的命令路由与事件路由是两个很让初学者头痛的概念，对于命令路由可以理解为，系统（WPF）定义了一系列的操作，在应用程序中可以直接使用 WPF 中的路由命令模型可以分为四个主要概念：命令、命令源、命令目标以及命令绑定</p></blockquote><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h2><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Grid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Grid.RowDefinitions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">RowDefinition</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;23&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">RowDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Grid.RowDefinitions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Menu</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Grid.Row</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Grid.Column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">MenuItem</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Edit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">MenuItem</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> x:Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;menuCopy&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Copy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                Command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ApplicationCommands.Copy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">MenuItem</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> x:Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;menuCut&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Cut&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                Command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ApplicationCommands.Cut&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">MenuItem</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> x:Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;menuPaste&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Paste&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                Command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ApplicationCommands.Paste&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">MenuItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Menu</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">TextBox</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Grid.Row</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Grid.Column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> x:Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mainText&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        TextWrapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Wrap&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AcceptsReturn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;True&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Grid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ul><li>命令是要执行的操作。在本例中命令为ApplicationCommands.Copy、Cut、Paste</li><li>命令源是调用命令的对象。 在本例中命令源为三个MenuItem控件</li><li>命令目标是在其上执行命令的对象。 在本例中命令目标是mainText这个TextBox文本框</li><li>命令绑定是将命令逻辑映射到命令的对象。 在本例中命令绑定到系统定义的对于文本框的“复制”、“剪切”、“粘贴”操作、</li></ul><p><img src="`+n+'" alt="四者的关系依赖图"></p><h3 id="命令" tabindex="-1">命令 <a class="header-anchor" href="#命令" aria-label="Permalink to &quot;命令&quot;">​</a></h3><blockquote><p>WPF 中的命令是通过实现 ICommand 接口来创建的。ICommand 公开两个方法（Execute 和 CanExecute）和一个事件 (CanExecuteChanged)</p></blockquote><h3 id="wpf已封装的命令类" tabindex="-1">WPF已封装的命令类 <a class="header-anchor" href="#wpf已封装的命令类" aria-label="Permalink to &quot;WPF已封装的命令类&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">命令类</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">ApplicationCommands</td><td style="text-align:left;">Close、Cut、Copy、Paste、Save、Print</td></tr><tr><td style="text-align:left;">NavigationCommands</td><td style="text-align:left;">BrowseForward、BrowseBack、Zoom、Search</td></tr><tr><td style="text-align:left;">EditingCommands</td><td style="text-align:left;">AlignXXX、MoveXXX、SelectXXX</td></tr><tr><td style="text-align:left;">MediaCommands</td><td style="text-align:left;">Play、Pause、NextTrack、IncreaseVolume、Record、Stop</td></tr><tr><td style="text-align:left;">ComponentCommands</td><td style="text-align:left;">MoveXXX、SelectXXX、ScrollXXX、ExtendSelectionXXX</td></tr></tbody></table><h3 id="命令源" tabindex="-1">命令源 <a class="header-anchor" href="#命令源" aria-label="Permalink to &quot;命令源&quot;">​</a></h3><blockquote><p>命令源是调用命令的对象。例如，MenuItem、Button 和 KeyGesture 就是命令源。 WPF 中的命令源通常实现 ICommandSource 接口。 ICommandSource 公开三个属性：Command、CommandTarget 和 CommandParameter</p></blockquote><h3 id="命令目标" tabindex="-1">命令目标 <a class="header-anchor" href="#命令目标" aria-label="Permalink to &quot;命令目标&quot;">​</a></h3><blockquote><p>命令目标是在其上执行命令的元素。对于 RoutedCommand 而言，命令目标是 Executed 和 CanExecute 的路由的起始元素。前面已提到，在 WPF 中，ICommandSource 上的 CommandTarget 属性只有在 ICommand 是一个 RoutedCommand 时才适用。如果在 ICommandSource 上设置了 CommandTarget，而对应的命令不是 RoutedCommand，将会忽略命令目标。 命令源可以显式设置命令目标。如果未定义命令目标，则具有键盘焦点的元素将用作命令目标。将具有键盘焦点的元素用作命令目标的一个好处是，应用程序开0发人员可以使用同一个命令源在多个目标上调用命令，而不必跟踪命令目标</p></blockquote><h3 id="命令绑定" tabindex="-1">命令绑定 <a class="header-anchor" href="#命令绑定" aria-label="Permalink to &quot;命令绑定&quot;">​</a></h3><blockquote><p>CommandBinding 将一个命令与实现该命令的事件处理程序关联。 CommandBinding 类包含一个 Command 属性以及 PreviewExecuted、Executed、PreviewCanExecute 和 CanExecute 事件。 Command 是 CommandBinding 要与之关联的命令。附加到 PreviewExecuted 和 Executed 事件的事件处理程序实现命令逻辑。附加到 PreviewCanExecute 和 CanExecute 事件的事件处理程序确定命令是否可以在当前命令目标上执行。</p></blockquote>',16),h=[l];function k(p,E,d,r,o,g){return a(),i("div",null,h)}const F=s(e,[["render",k]]);export{u as __pageData,F as default};
