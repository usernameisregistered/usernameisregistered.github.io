import{_ as t,c as s,o as e,a2 as a}from"./chunks/framework.Bc4oNHcE.js";const g=JSON.parse('{"title":"10css性能优化","description":"","frontmatter":{"layout":"doc","title":"10css性能优化"},"headers":[],"relativePath":"web/Web性能/10css性能优化.md","filePath":"web/Web性能/10css性能优化.md"}'),o={name:"web/Web性能/10css性能优化.md"},r=a('<h1 id="css性能优化" tabindex="-1">css性能优化 <a class="header-anchor" href="#css性能优化" aria-label="Permalink to &quot;css性能优化&quot;">​</a></h1><h2 id="优化渲染" tabindex="-1">优化渲染 <a class="header-anchor" href="#优化渲染" aria-label="Permalink to &quot;优化渲染&quot;">​</a></h2><p>浏览器有一个固定的渲染流程——只有在布局（layout）完成后才能绘制（paint）页面，而布局的前提是要生成渲染树（render tree），而渲染树的生成则需要 DOM 和 CSSOM 树的配合</p><ol><li><strong>删除不必要的样式</strong></li><li><strong>将 CSS 拆分为独立模块</strong></li><li><strong>最小化和压缩你的 CSS</strong></li><li><strong>简化选择器</strong></li><li><strong>不要将样式应用于不需要的元素</strong></li><li><strong>使用 CSS 精灵图减少图像相关的 HTTP 请求</strong></li><li><strong>预加载重要资源</strong></li></ol><h2 id="优化渲染阻塞" tabindex="-1">优化渲染阻塞 <a class="header-anchor" href="#优化渲染阻塞" aria-label="Permalink to &quot;优化渲染阻塞&quot;">​</a></h2><p>CSS 可以使用媒体查询将样式限定在特定条件下。媒体查询对于响应式网页设计非常重要，并且可以帮助我们优化关键渲染流程。浏览器会阻塞渲染直到解析完所有的样式，但不会阻塞不会使用的样式，例如打印样式表。通过根据媒体查询将 CSS 拆分为多个文件，可以防止在下载未使用的 CSS 时阻塞渲染。要创建一个非阻塞的 CSS 链接，将不立即使用的样式（例如打印样式）移动到单独的文件中，在 HTML 标记中添加一个 <link>，并添加一个媒体查询，</p>',6),n=[r];function i(l,c,_,d,h,S){return e(),s("div",null,n)}const u=t(o,[["render",i]]);export{g as __pageData,u as default};
