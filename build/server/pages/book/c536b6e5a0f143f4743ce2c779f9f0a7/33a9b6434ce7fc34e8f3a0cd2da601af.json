{"pageProps":{"bookInfo":{"id":"c536b6e5a0f143f4743ce2c779f9f0a7","name":"数据结构与算法","fullPath":"F:\\passerby\\algorithm\\数据结构与算法","chapterList":[{"id":"39d59038a85836e2c0388617d7e57295","type":"chapter","name":"01引言.md","fullPath":"F:\\passerby\\algorithm\\数据结构与算法\\01引言.md","url":"/book/c536b6e5a0f143f4743ce2c779f9f0a7/39d59038a85836e2c0388617d7e57295"},{"id":"d11141211c49aee7f399e7b62e3d6f73","type":"chapter","name":"02线性表.md","fullPath":"F:\\passerby\\algorithm\\数据结构与算法\\02线性表.md","url":"/book/c536b6e5a0f143f4743ce2c779f9f0a7/d11141211c49aee7f399e7b62e3d6f73"},{"id":"fd0020c886adebfe144cfb0990e8cf39","type":"chapter","name":"03栈和队列.md","fullPath":"F:\\passerby\\algorithm\\数据结构与算法\\03栈和队列.md","url":"/book/c536b6e5a0f143f4743ce2c779f9f0a7/fd0020c886adebfe144cfb0990e8cf39"},{"id":"33a9b6434ce7fc34e8f3a0cd2da601af","type":"chapter","name":"04串.md","fullPath":"F:\\passerby\\algorithm\\数据结构与算法\\04串.md","url":"/book/c536b6e5a0f143f4743ce2c779f9f0a7/33a9b6434ce7fc34e8f3a0cd2da601af"}],"title":"04串","type":"book","url":"/book/c536b6e5a0f143f4743ce2c779f9f0a7","content":"\n    \n    \n      <div class=\"crossnote markdown-preview  \">\n      \n<h1 id=\"串\">串 </h1>\n<p>字符串是一种特殊的线性表，其特殊性在于线性表的数据元素限定为字符串；理。字符串一般简称为“串”，并具有自身的特征，通常把一个串作为一个整体来处理。</p>\n<h2 id=\"应用实例\">应用实例 </h2>\n<p><strong>例文本编辑软件</strong></p>\n<p>文本编辑程序是利用计算机进行文字加工的基本软件工具，实现对文本文件的插入、删除、修改等操作，甚至用于报刊和书籍的编辑排版。常用的简单文本编辑程序，1,(和文字处理软件机VJ、机*)1等，究其实质，都是修改字符数据的形式或格式。可用于文本编辑的程序很多，功能不同且强弱差别很大，但基本操作是一样的，一般都包含串的查找、插入和删除等基本</p>\n<p>例如，对于下面的一段源程序，一个文本编辑软件首先必须解决的问题就是文本串在内存中如何存储，其次需要解决的问题是基于存储方式实现对文本串的实际操作</p>\n<pre data-role=\"codeBlock\" data-info=\"c\" class=\"language-c c\"><code><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-int\">int</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>max<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-if\">if</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">&gt;</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        max <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword keyword-else\">else</span> <span class=\"token punctuation\">{</span>\n        max <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>    \n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"max = %d\"</span><span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><h2 id=\"串及其运算\">串及其运算 </h2>\n<p>串（string）是由零个或多个字符组成的有限序列，一般记作 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>=</mo><mi mathvariant=\"normal\">\"</mi><msub><mi>a</mi><mn>1</mn></msub><msub><mi>a</mi><mn>2</mn></msub><msub><mi>a</mi><mn>3</mn></msub><msub><mi>a</mi><mn>4</mn></msub><msub><mi>a</mi><mn>5</mn></msub><mo>⋯</mo><msub><mi>a</mi><mi>n</mi></msub><mi mathvariant=\"normal\">\"</mi></mrow><annotation encoding=\"application/x-tex\">S = \"a_1 a_2 a_3 a_4 a_5 \\cdots a_n\"</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord\">\"</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">\"</span></span></span></span></p>\n<p>空串（null string）：长度为零的串，它不包含任何字符<br>\n空格串（blank string）: 仅由一个或多个空格组成的串，长度大于等于1<br>\n子串（sub string）：串中任意个连续字符组成的子序列称为该串的“子串”<br>\n主串（master string）：包含子串的串相应地称为“主串”。因此子串是主串的一部分<br>\n位置：通常将字符在串中的序号称为该字符在串中的“位置”<br>\n串相等：当且仅当两个串的值相等时，称这两个串是相等的。即只有当两个串的长度相等，并且每个对应位置的字符都相等时才相等<br>\n模式匹配：确定子串从主串的某个位置开始后，在主串中首次出现的位置的运算。在串的模式匹配中，一般将主串称为“目标串”，子串称为“模式串”</p>\n<h3 id=\"基本运算\">基本运算 </h3>\n<p>串的基本操作中，则通常以“串的整体”或“串的一部分”作为操作对象，例如在串中查找某个子串，在某个位置上插入一个子串或删除一个子串等。</p>\n<p>拷贝<br>\n获取长度<br>\n删除子串<br>\n插入子串<br>\n比较串<br>\n串拼接<br>\n查找子串<br>\n替换子串<br>\n串存在判断<br>\n清空串<br>\n销毁串</p>\n<h2 id=\"串的存储结构及其实现\">串的存储结构及其实现 </h2>\n<p>串的实现方法有定长顺序串、堆串和块链串，分别介绍如下</p>\n<h3 id=\"顺序串\">顺序串 </h3>\n<p>串的定长顺序存储结构，与前面线性表的顺序存储结构类似，是用一组地址连续的存储单元存储串的字符序列，也称为“静态存储分配的顺序串”。所谓定长顺序存储是直接使用定长的字符数组来定义，为每个定义的串变量分配一个固定长度的存储区，存储分配是在编译时完成的</p>\n<h4 id=\"存储结构\">存储结构 </h4>\n<pre data-role=\"codeBlock\" data-info=\"c\" class=\"language-c c\"><code><span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXLEN</span> <span class=\"token expression\"><span class=\"token number\">50</span></span></span>\n<span class=\"token keyword keyword-typedef\">typedef</span> <span class=\"token keyword keyword-struct\">struct</span> \n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-char\">char</span> ch<span class=\"token punctuation\">[</span>MAXLEN <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//存储字符串的一堆数组，每个分量存储一个字符，第0号单元不使用</span>\n    <span class=\"token keyword keyword-int\">int</span> len<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> SString<span class=\"token punctuation\">;</span>\n</code></pre><p>串的实际长度可在预定义长度）5<sup>S，3的范围内随意变动，超过）5</sup>S，3，串值被舍去，称为“截断”。</p>\n<p>字符串的长度可以采用以上描述的定长顺序串类型定义中的成员&amp;%+表示，此时的号单元不使用（浪费一个空间）；也可以在串值后设特殊标记，隐含串长，例如6语言中f的表示串的结束。</p>\n<h3 id=\"堆串\">堆串 </h3>\n<p>串的堆存储结构，与定长顺序串的存储结构类似，都是用一组地址连续的存储单元存储串的字符序列，不同的是堆串的存储空间是在程序执行过程中动态分配的。在系统中存在一个称为“堆”的自由存储区，每当建立一个新串时，可以通过动态分配函数从这个空间中分配一块实际串所需的存储空间，来存储新串的串值。只要存储空间能分配成功，则在操作的过程中就不会发生“截断”的情况</p>\n<h4 id=\"存储结构-1\">存储结构 </h4>\n<pre data-role=\"codeBlock\" data-info=\"c\" class=\"language-c c\"><code><span class=\"token keyword keyword-typedef\">typedef</span> <span class=\"token keyword keyword-struct\">struct</span> \n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-char\">char</span> <span class=\"token operator\">*</span>ch<span class=\"token punctuation\">;</span> <span class=\"token comment\">//若是非空串，则指向串的起始地址否则ch是null</span>\n    <span class=\"token keyword keyword-int\">int</span> len<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> HString<span class=\"token punctuation\">;</span>\n</code></pre><h3 id=\"块链串\">块链串 </h3>\n<p>在串的链式存储结构中，链表的每个结点既可以存放一个字符，也可以存放多个字符。每个结点称为“块”，整个链表称为“块链结构</p>\n<h4 id=\"存储结构-2\">存储结构 </h4>\n<pre data-role=\"codeBlock\" data-info=\"c\" class=\"language-c c\"><code><span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">BLOCK_SIZE</span> <span class=\"token expression\"><span class=\"token number\">4</span></span></span>\n<span class=\"token keyword keyword-typedef\">typedef</span> <span class=\"token keyword keyword-struct\">struct</span> <span class=\"token class-name\">block</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-char\">char</span> ch<span class=\"token punctuation\">[</span>BLOCK_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword keyword-struct\">struct</span> <span class=\"token class-name\">block</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> Block<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword keyword-typedef\">typedef</span> <span class=\"token keyword keyword-struct\">struct</span> \n<span class=\"token punctuation\">{</span>\n    Block <span class=\"token operator\">*</span>head<span class=\"token punctuation\">;</span>\n    Block <span class=\"token operator\">*</span>tail<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword keyword-int\">int</span> len<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>LString\n</code></pre><p>在一般情况下，对串进行操作时，只需要从头向尾顺序扫描即可，则对串值不必建立双向链表。但当进行串的连接操作时，就要在第一个串的尾部进行连接，因此在块链存储中设置尾指针可以便于其操作。在连接时需要注意处理第一个串的最后一个结点中的无效字符。</p>\n<p>块大小是指块链表中结点存放字符的个数。假设链表结点的链域next所需的存储空间大小为?字节。在块链串的存储方式中，块大小直接影响到串处理的效率。这就要求考虑串值的存储密度。存储密度定义为<br>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>存储密度</mtext><mo>=</mo><mfrac><mtext>度法串值所占的存储位</mtext><mtext>实际分配的存储位</mtext></mfrac></mrow><annotation encoding=\"application/x-tex\">存储密度  = \\frac{度法串值所占的存储位}{实际分配的存储位}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\">存储密度</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.0463em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3603em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord cjk_fallback\">实际分配的存储位</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord cjk_fallback\">度法串值所占的存储位</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>当BLOCK_SIZE大于1：由于串长不一定是块大小的整倍数，则链表中的最后一个结点不一定全被串值占满，此时通常补上“Z”或其他的非串值字符（通常“Z”不属于串的字符集，是一个特殊的符号）</p>\n<p>当BLOCK_SIZE等于1：此时块链表结构同线性链表，插入、删除等处理方法和线性链表一样</p>\n<h2 id=\"串的模式匹配\">串的模式匹配 </h2>\n<p><a href=\"https://ebook.hep.com.cn/index.html#/reader?bookId=1061913534566236161\">原文地址</a></p>\n\n      </div>\n      <div class=\"md-sidebar-toc\">\n<div class=\"md-toc\">\n<details style=\"padding:0;;padding-left:0px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#串\" class=\"md-toc-link\"><p>串</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#应用实例\" class=\"md-toc-link\">\n            <p>应用实例</p>\n\n          </a></div><details style=\"padding:0;;padding-left:24px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#串及其运算\" class=\"md-toc-link\"><p>串及其运算</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#基本运算\" class=\"md-toc-link\">\n            <p>基本运算</p>\n\n          </a></div>\n        </div>\n      </details>\n    <details style=\"padding:0;;padding-left:24px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#串的存储结构及其实现\" class=\"md-toc-link\"><p>串的存储结构及其实现</p>\n</a>\n          </summary>\n        <div>\n          <details style=\"padding:0;;padding-left:24px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#顺序串\" class=\"md-toc-link\"><p>顺序串</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#存储结构\" class=\"md-toc-link\">\n            <p>存储结构</p>\n\n          </a></div>\n        </div>\n      </details>\n    <details style=\"padding:0;;padding-left:24px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#堆串\" class=\"md-toc-link\"><p>堆串</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#存储结构-1\" class=\"md-toc-link\">\n            <p>存储结构</p>\n\n          </a></div>\n        </div>\n      </details>\n    <details style=\"padding:0;;padding-left:24px;\" open=\"\">\n        <summary class=\"md-toc-link-wrapper\">\n          <a href=\"#块链串\" class=\"md-toc-link\"><p>块链串</p>\n</a>\n          </summary>\n        <div>\n          <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#存储结构-2\" class=\"md-toc-link\">\n            <p>存储结构</p>\n\n          </a></div>\n        </div>\n      </details>\n    \n        </div>\n      </details>\n    <div class=\"md-toc-link-wrapper\" style=\"padding:0;;display:list-item;list-style:square;margin-left:42px\">\n          <a href=\"#串的模式匹配\" class=\"md-toc-link\">\n            <p>串的模式匹配</p>\n\n          </a></div>\n        </div>\n      </details>\n    \n</div>\n</div>\n      <a id=\"sidebar-toc-btn\">≡</a>\n    \n    \n    \n    \n    \n    \n<script>\n\nvar sidebarTOCBtn = document.getElementById('sidebar-toc-btn')\nsidebarTOCBtn.addEventListener('click', function(event) {\n  event.stopPropagation()\n  if (document.body.hasAttribute('html-show-sidebar-toc')) {\n    document.body.removeAttribute('html-show-sidebar-toc')\n  } else {\n    document.body.setAttribute('html-show-sidebar-toc', true)\n  }\n})\n</script>\n      \n  \n    <script>\n</script>"},"revalidate":200,"title":"04串"},"__N_SSG":true}